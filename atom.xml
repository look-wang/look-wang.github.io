<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>好好学习，天天向上</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-16T11:35:28.112Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>look-wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库基本语法</title>
    <link href="http://yoursite.com/2018/10/16/mysql/"/>
    <id>http://yoursite.com/2018/10/16/mysql/</id>
    <published>2018-10-16T11:38:14.918Z</published>
    <updated>2018-10-16T11:35:28.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、基本命令"><a href="#一、基本命令" class="headerlink" title="一、基本命令"></a>一、基本命令</h2><pre><code>1、启动服务    说明： 以管理员身份运行cmd    格式： net start mysql2、停止服务    说明： 以管理员身份运行cmd    格式： net stop mysql3、Git Bash 连接数据库    格式： winpty mysql -u 用户名 -p    示例： winpty mysql -u root -p4、退出登陆（断开连接）    quit或exit5、查看版本（连接后可以执行）    示例： select version();6、 显示当前时间（连接后可以执行）    示例： select now();</code></pre><a id="more"></a><h2 id="二、数据库操作"><a href="#二、数据库操作" class="headerlink" title="二、数据库操作"></a>二、数据库操作</h2><pre><code>1、创建数据库    格式： create database 数据库名 charset=utf8;2、删除数据库    格式： drop database 数据库名；3、查看所有数据库    格式： show databases;4、切换数据库    格式： use 数据库名；5、查看当前选择的数据库    select database();        </code></pre><h2 id="三、表操作"><a href="#三、表操作" class="headerlink" title="三、表操作"></a>三、表操作</h2><pre><code>1、查看当前数据库中所有表    show tables;2、创建表    格式： create table if not exists 表名(列及类型)    说明：        unsignet 无符号型        auto_increment 自增长        primary key 主键        not null 不为空        unique     唯一索引    示例：        create table if not exists users(u_id int unsigned PRIMARY KEY auto_increment,u_name varchar(128) not null,u_age int not null,u_sex char(1),u_phone char(13))ENGINE=InnoDB DEFAULT CHARSET=utf8;3、删除表    格式： drop table 表名；4、查看表结构    格式： desc 表名；5、查看建表语句    格式： show create table 表名；6、重命名表名    格式： rename table 原表名 to 新表名；</code></pre><h2 id="四、数据操作"><a href="#四、数据操作" class="headerlink" title="四、数据操作"></a>四、数据操作</h2><pre><code>1、增    a、全列插入        格式： insert into 表名 values(...)；        格式： 主键列是自动增长，但是在全列插入时需要占位，使用null    b、缺省插入        格式： insert into 表名(列1，列2，...) values(值1，值2，...);    c、同时插入多条数据        格式：insert into 表名 values(...),(...),...(...);    d、添加字段        示例：alter table utable add id int not null;    e、修改字段名        示例：alter table utable change id u_id char(11);    f、修改字段初始值        示例：alter table utable alter column u_id set default 100;    g、设置主键        示例：alter table utable add primary key(age);    h、删除主键        示例：alter table utable drop primary key;    i、插入外键        示例：alter table utable add index(last_name);2、删    格式： delete from 表名 where 条件；    注意： 没有条件是全部删除3、改    格式： update 表名 set 列1=值1,列2=值2,... where 条件；    注意： 没有条件是全部修改    示例：        update users set u_age=2 where u_id=3;        update users set u_age=20,u_sex=&apos;f&apos; where u_id=2;4、查    说明： 查询表中的全部数据    格式： select * from 表名；</code></pre><h2 id="五、查"><a href="#五、查" class="headerlink" title="五、查"></a>五、查</h2><pre><code>1、基本语法    格式： select * from 表名；    说明：         a、from关键字后面是表名，表示数据来源于这张表        b、select后面写表中的列名、如果是*表示显示所有列        c、在select后面的列名部分，可以使用as为列名起别名，这个别名显示在结果中        d、如果要查询多个列，之间使用逗号分隔2、消除重复行    在select后面列前面使用distinct可以消除重复的行    格式： select distinct * from 表名；3、条件查询    a、语法        select * from 表名 where 条件    b、比较运算符        等于                =        大于                &gt;        小于            &lt;         大于等于            &gt;=            小于等于            &lt;=        不等于            !=或&lt;&gt;    c、逻辑运算符        and        并且        or        或者        not        非    d、模糊查询        like        % 表示任意多个任意字符        _ 表示一个任意字符        示例：            select * from users where u_name like &apos;IG%&apos;;            select * from users where u_name like &apos;_G%&apos;;    e、范围查询        in                     表示在一个非连续的范围内        between...and...    表示在一个连续的范围内        示例：            查询u_id为1，3，4的数据            select * from ordergoods where u_id in (1,3,4);            查询u_id为1到3的数据            select * from ordergoods where u_id between 1 and 3;    f、空判断        注意：null与&quot;&quot;是不同的        判断空： is null        判断非空： is not null    g、优先级        小括号，not比较运算符，逻辑运算符        and比or优先级高，如果同时出现并希望先选or，需要结合()来使用4、聚合    为了快速得到统计结果，提供了5个聚合函数    a、count(*)        表示计算总行数，括号中可以写*和列名    b、max(列)        表示求此列的最大值    c、min(列)        表示求此列的最小值    d、sum(列)        表示求此列的和    e、avg(列)        表示求此列的平均值5、分组    按照字段分组，表示此字段相同的数据会被放到一个集合中    分组后，只能查询出相同的数据列，对于有差异的数据列无法显示在结果集中    可以对分组后的数据进行统计，做聚合运算    语法： select 列1,列2,聚合... from 表名 group by 列1,列2,列3,... having 列1,...聚合...    where与having的区别    where是对from后面指定的表进行筛选，属于对原始数据的筛选    having是对group by的结果进行筛选6、排序    语法：select * from 表名 order by 列1 asc|desc，列2 asc|desc,...    说明：        a、将数据按照列1进行排序，如果某些列1的值相同，则按照列2进行排序        b、默认按照从小到大的顺序排序        c、asc降序        d、desc升序7、分页    语法：select * from 表名 limit start,count;    说明：start索引从0开始    示例：        select * from student limit 0,3;        select * from student limit 3,3;        select * from student where gender=1 limit 0,3;</code></pre><h2 id="六、关联"><a href="#六、关联" class="headerlink" title="六、关联"></a>六、关联</h2><pre><code>1、关联查询    select * from ebproduct inner join ebtype on ebproduct.type_id=ebtype.tid;2、三表连接    select * from user inner join userorder on user.U_uid = userorder.u_uid inner join ordergoods on ordergoods.o_order=userorder.u_order;分类：1、表A inner join 表B    表A与表B匹配的行会出现在结果集中2、表A left join 表B    表A与表B匹配的行会出现在结果集中,外加表A中独有的数据，未对应的数据使用null填充3、表A right join 表B    表A与表B匹配的行会出现在结果集中,外加表B中独有的数据，未对应的数据使用null填充</code></pre><h2 id="七、权限管理"><a href="#七、权限管理" class="headerlink" title="七、权限管理"></a>七、权限管理</h2><pre><code>1.查看权限：show grants;2.查看用户：select user from mysql.user;3.查看用户权限：show grants for pony2@localhost; （pony2为用户名）4.创建用户：create user ‘pony’@’localhost’ identified by ‘123456’5.赋予用户pony权限：grant all privileges on py03db.* to ‘pony’@’localhost’;注意：一定要提交修改：flush privileges6.创建并赋予用户权利：grant all on py03db.* to &apos;pony&apos;@&apos;localhost&apos; identified by &apos;123456&apos;;    提交：flush privileges7.修改用户密码： set password for &apos;pony2&apos;@&apos;localhost&apos;=password(&apos;1234567&apos;);8.删除用户权限：revoke all on py03db.* from &apos;pony2&apos;@&apos;localhost&apos;;9.删除用户：drop user &apos;pony2&apos;@&apos;localhost&apos;;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、基本命令&quot;&gt;&lt;a href=&quot;#一、基本命令&quot; class=&quot;headerlink&quot; title=&quot;一、基本命令&quot;&gt;&lt;/a&gt;一、基本命令&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1、启动服务
    说明： 以管理员身份运行cmd
    格式： net start mysql

2、停止服务
    说明： 以管理员身份运行cmd
    格式： net stop mysql

3、Git Bash 连接数据库
    格式： winpty mysql -u 用户名 -p
    示例： winpty mysql -u root -p

4、退出登陆（断开连接）
    quit或exit

5、查看版本（连接后可以执行）
    示例： select version();

6、 显示当前时间（连接后可以执行）
    示例： select now();
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>小型练习题</title>
    <link href="http://yoursite.com/2018/10/16/ti-2/"/>
    <id>http://yoursite.com/2018/10/16/ti-2/</id>
    <published>2018-10-16T11:14:34.006Z</published>
    <updated>2018-07-26T12:30:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、写程序：模拟公司hr录入员工账号密码的程序。（10分）"><a href="#1、写程序：模拟公司hr录入员工账号密码的程序。（10分）" class="headerlink" title="1、写程序：模拟公司hr录入员工账号密码的程序。（10分）"></a>1、写程序：模拟公司hr录入员工账号密码的程序。（10分）</h3><p>   1)，员工的账号密码存储在这种数据类型中：<br>   user_list = [<br>     {‘username’:’barry’,’password’:’1234’},<br>     {‘username’:’alex’,’password’:’asdf’},<br>     ………<br>              ]<br>  2)非法字符模板：board = [‘共产党’,’毛主席’,’周恩来’]<br>  3)Hr输入用户名，密码（可持续输入，如果想终止程序，那就在输入用户名时输入Q或者q退出程序），在Hr输入用户名时，检测此用户名是否有board里面的非法字符，如果有非法字符，则将非法字符替换成同数量的*（如王二麻子替换成<em>**</em>），然后添加到user_list中，如果没有非法字符，则直接添加到user_list中，每次添加成功后，打印出刚添加的用户名，密码。<br><a id="more"></a><br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">board = [<span class="string">'共产党'</span>,<span class="string">'毛主席'</span>,<span class="string">'周恩来'</span>]  <span class="comment">#用列表放非法字符</span></span><br><span class="line">ulist=[]  <span class="comment">#存储注册的用户名密码</span></span><br><span class="line">t=0</span><br><span class="line">flag=True</span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    name=input(<span class="string">'请输入你的用户名：'</span>).strip()  <span class="comment">#去空格</span></span><br><span class="line">    <span class="keyword">if</span> name.upper()==<span class="string">'Q'</span>:   <span class="comment">#退出</span></span><br><span class="line">        flag=False</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> board:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> name:</span><br><span class="line">               name=name.replace(i,len(i)*<span class="string">'*'</span>) <span class="comment">#替换成等长度的*</span></span><br><span class="line">        <span class="built_in">pwd</span>=input(<span class="string">'请输入你的密码:'</span>)</span><br><span class="line">        ulist.append(&#123;&#125;)</span><br><span class="line">        ulist[t][<span class="string">'uname'</span>]=name  <span class="comment">#添加到列表中</span></span><br><span class="line">        ulist[t][<span class="string">'pwd'</span>]=<span class="built_in">pwd</span></span><br><span class="line">        t+=1</span><br><span class="line">        <span class="built_in">print</span>(ulist)</span><br><span class="line">        <span class="built_in">print</span>(ulist[-1])  <span class="comment">#输出最新添加的一组</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Exit'</span>)</span><br><span class="line"><span class="comment">#执行结果</span></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">请输入你的用户名：共产党</span></span><br><span class="line"><span class="string">请输入你的密码:123</span></span><br><span class="line"><span class="string">[&#123;'</span>uname<span class="string">': '</span>***<span class="string">', '</span><span class="built_in">pwd</span><span class="string">': '</span>123<span class="string">'&#125;]</span></span><br><span class="line"><span class="string">请输入你的用户名：123</span></span><br><span class="line"><span class="string">请输入你的密码:123</span></span><br><span class="line"><span class="string">[&#123;'</span>uname<span class="string">': '</span>***<span class="string">', '</span><span class="built_in">pwd</span><span class="string">': '</span>123<span class="string">'&#125;, &#123;'</span>uname<span class="string">': '</span>123<span class="string">', '</span><span class="built_in">pwd</span><span class="string">': '</span>123<span class="string">'&#125;]</span></span><br><span class="line"><span class="string">请输入你的用户名：www</span></span><br><span class="line"><span class="string">请输入你的密码:123</span></span><br><span class="line"><span class="string">[&#123;'</span>uname<span class="string">': '</span>***<span class="string">', '</span><span class="built_in">pwd</span><span class="string">': '</span>123<span class="string">'&#125;, &#123;'</span>uname<span class="string">': '</span>123<span class="string">', '</span><span class="built_in">pwd</span><span class="string">': '</span>123<span class="string">'&#125;, &#123;'</span>uname<span class="string">': '</span>www<span class="string">', '</span><span class="built_in">pwd</span><span class="string">': '</span>123<span class="string">'&#125;]</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure></p><h3 id="2、设计一个验证用户密码程序，用户只有三次机会输入错误，不过如果用户输入的内容中包含“-”则不计算在内。"><a href="#2、设计一个验证用户密码程序，用户只有三次机会输入错误，不过如果用户输入的内容中包含“-”则不计算在内。" class="headerlink" title="2、设计一个验证用户密码程序，用户只有三次机会输入错误，不过如果用户输入的内容中包含“*”则不计算在内。"></a>2、设计一个验证用户密码程序，用户只有三次机会输入错误，不过如果用户输入的内容中包含“*”则不计算在内。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">'look'</span></span><br><span class="line">mima=123</span><br><span class="line">c=0</span><br><span class="line"><span class="keyword">while</span> c&lt;3:</span><br><span class="line">    uname=input(<span class="string">'请输入用户名：'</span>)</span><br><span class="line">    <span class="built_in">pwd</span>=input(<span class="string">'请输入密码：'</span>)</span><br><span class="line">    <span class="keyword">if</span> uname==<span class="string">'look'</span> and <span class="built_in">pwd</span>==<span class="string">'123'</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'登录成功'</span>)</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> uname.count(<span class="string">'*'</span>)==0:</span><br><span class="line">            c+=1</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'账户或密码错误，你还有%d次机会'</span>%(3-c))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'输入次数已达上限，账户已冻结'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">请输入用户名：qw</span></span><br><span class="line"><span class="string">请输入密码：12</span></span><br><span class="line"><span class="string">账户或密码错误，你还有2次机会</span></span><br><span class="line"><span class="string">请输入用户名：**e</span></span><br><span class="line"><span class="string">请输入密码：23</span></span><br><span class="line"><span class="string">账户或密码错误，你还有2次机会</span></span><br><span class="line"><span class="string">请输入用户名：12</span></span><br><span class="line"><span class="string">请输入密码：3</span></span><br><span class="line"><span class="string">账户或密码错误，你还有1次机会</span></span><br><span class="line"><span class="string">请输入用户名：look</span></span><br><span class="line"><span class="string">请输入密码：123</span></span><br><span class="line"><span class="string">登录成功</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure><h3 id="3、用集合保存4个人的随机投票，列出最终票数及各自的名字，随机给四个人投票【票数限制在1-10票之间】。十轮之后显示投票的数量"><a href="#3、用集合保存4个人的随机投票，列出最终票数及各自的名字，随机给四个人投票【票数限制在1-10票之间】。十轮之后显示投票的数量" class="headerlink" title="3、用集合保存4个人的随机投票，列出最终票数及各自的名字，随机给四个人投票【票数限制在1-10票之间】。十轮之后显示投票的数量"></a>3、用集合保存4个人的随机投票，列出最终票数及各自的名字，随机给四个人投票【票数限制在1-10票之间】。十轮之后显示投票的数量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">list1=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>] <span class="comment">#四个人abcd</span></span><br><span class="line">listname=[]  <span class="comment">#存储每轮投给谁</span></span><br><span class="line">piao=[]      <span class="comment">#存储每轮投了多少票</span></span><br><span class="line">sum1,sum2,sum3,sum4=0,0,0,0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(10):</span><br><span class="line">    listname.append(random.choice(list1)) </span><br><span class="line">               <span class="comment">#在abcd中随机选10次，代表每轮投给谁</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(10):</span><br><span class="line">    piao.append(random.choice(range(1,11)))</span><br><span class="line">               <span class="comment">#随机投10次随机的票数，与每轮投给  谁 一一对应</span></span><br><span class="line"><span class="built_in">print</span>(listname)</span><br><span class="line"><span class="built_in">print</span>(piao)</span><br><span class="line">c=0</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> listname:</span><br><span class="line">    <span class="keyword">if</span> k==<span class="string">'a'</span>:</span><br><span class="line">        sum1=sum1+int(piao[c])</span><br><span class="line">    <span class="keyword">elif</span> k==<span class="string">'b'</span>:</span><br><span class="line">        sum2=sum2+int(piao[c])</span><br><span class="line">    <span class="keyword">elif</span> k==<span class="string">'c'</span>:</span><br><span class="line">        sum3=sum3+int(piao[c])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sum4=sum4+int(piao[c])</span><br><span class="line">    c+=1</span><br><span class="line"><span class="built_in">print</span>(sum1,sum2,sum3,sum4)  <span class="comment">#abcd四个人各对应的总票数</span></span><br><span class="line"><span class="built_in">set</span>=&#123;sum1,sum2,sum3,sum4&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>)</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">['</span>b<span class="string">', '</span>a<span class="string">', '</span>a<span class="string">', '</span>c<span class="string">', '</span>c<span class="string">', '</span>d<span class="string">', '</span>a<span class="string">', '</span>d<span class="string">', '</span>a<span class="string">', '</span>b<span class="string">']</span></span><br><span class="line"><span class="string">[2, 4, 7, 7, 2, 10, 3, 4, 1, 6]</span></span><br><span class="line"><span class="string">15 8 9 14</span></span><br><span class="line"><span class="string">&#123;8, 9, 14, 15&#125;</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure><h3 id="4、编程模拟一个与计算机扔骰子猜大小的游戏。每次游戏采用三局两胜，计算机扔一个骰子，其中1，2，3算为小，4，5，6算为大。用户每次可以猜大或者猜小，猜中则用户赢，否则计算机赢。如程序的一次运行情况如下："><a href="#4、编程模拟一个与计算机扔骰子猜大小的游戏。每次游戏采用三局两胜，计算机扔一个骰子，其中1，2，3算为小，4，5，6算为大。用户每次可以猜大或者猜小，猜中则用户赢，否则计算机赢。如程序的一次运行情况如下：" class="headerlink" title="4、编程模拟一个与计算机扔骰子猜大小的游戏。每次游戏采用三局两胜，计算机扔一个骰子，其中1，2，3算为小，4，5，6算为大。用户每次可以猜大或者猜小，猜中则用户赢，否则计算机赢。如程序的一次运行情况如下："></a>4、编程模拟一个与计算机扔骰子猜大小的游戏。每次游戏采用三局两胜，计算机扔一个骰子，其中1，2，3算为小，4，5，6算为大。用户每次可以猜大或者猜小，猜中则用户赢，否则计算机赢。如程序的一次运行情况如下：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">u=0</span><br><span class="line">flag=True</span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    c=0</span><br><span class="line">    <span class="keyword">while</span> c&lt;3:</span><br><span class="line">        computer=random.randint(1,6)</span><br><span class="line">        <span class="built_in">print</span>(computer)  <span class="comment">#电脑随机出的数，在此打印是为了让自己能决定输赢</span></span><br><span class="line">        <span class="keyword">if</span> computer&lt;=3:</span><br><span class="line">            a=<span class="string">'small'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a=<span class="string">'big'</span></span><br><span class="line">        uname=input(<span class="string">'Please input your guess(big/small):'</span>) <span class="comment">#用户猜大小</span></span><br><span class="line">        <span class="keyword">if</span> uname ==<span class="string">'small'</span> or uname==<span class="string">'big'</span>:</span><br><span class="line">            <span class="keyword">if</span> uname==a:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'You are right'</span>)</span><br><span class="line">                u+=1</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'You are wrong.'</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'非法输入，请重新输入'</span>)</span><br><span class="line">            <span class="built_in">continue</span></span><br><span class="line">        c+=1</span><br><span class="line">    w=0</span><br><span class="line">    y=1</span><br><span class="line">    <span class="keyword">if</span> u&gt;=2:  <span class="comment">#三局两胜</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'You win this round'</span>)</span><br><span class="line">        w+=1   <span class="comment">#统计用户赢了几次</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'You lost this round'</span>)</span><br><span class="line">    choose=input(<span class="string">'Play again?(y/n):'</span>)</span><br><span class="line">    <span class="keyword">if</span> choose==<span class="string">'y'</span>:</span><br><span class="line">        y+=1  <span class="comment">#统计用户玩了几局</span></span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">elif</span> choose==<span class="string">'n'</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'You played %d rounds, and you won %d rounds'</span>%(y,w))</span><br><span class="line">        flag=False</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'非法输入'</span>)</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">Please input your guess(big/small):big</span></span><br><span class="line"><span class="string">You are right</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">Please input your guess(big/small):big</span></span><br><span class="line"><span class="string">You are wrong.</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">Please input your guess(big/small):big</span></span><br><span class="line"><span class="string">You are wrong.</span></span><br><span class="line"><span class="string">You lost this round</span></span><br><span class="line"><span class="string">Play again?(y/n):y</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">Please input your guess(big/small):big</span></span><br><span class="line"><span class="string">You are wrong.</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">Please input your guess(big/small):big</span></span><br><span class="line"><span class="string">You are wrong.</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">Please input your guess(big/small):big</span></span><br><span class="line"><span class="string">You are right</span></span><br><span class="line"><span class="string">You win this round</span></span><br><span class="line"><span class="string">Play again?(y/n):n</span></span><br><span class="line"><span class="string">You played 1 rounds, and you won 1 rounds</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、写程序：模拟公司hr录入员工账号密码的程序。（10分）&quot;&gt;&lt;a href=&quot;#1、写程序：模拟公司hr录入员工账号密码的程序。（10分）&quot; class=&quot;headerlink&quot; title=&quot;1、写程序：模拟公司hr录入员工账号密码的程序。（10分）&quot;&gt;&lt;/a&gt;1、写程序：模拟公司hr录入员工账号密码的程序。（10分）&lt;/h3&gt;&lt;p&gt;   1)，员工的账号密码存储在这种数据类型中：&lt;br&gt;   user_list = [&lt;br&gt;     {‘username’:’barry’,’password’:’1234’},&lt;br&gt;     {‘username’:’alex’,’password’:’asdf’},&lt;br&gt;     ………&lt;br&gt;              ]&lt;br&gt;  2)非法字符模板：board = [‘共产党’,’毛主席’,’周恩来’]&lt;br&gt;  3)Hr输入用户名，密码（可持续输入，如果想终止程序，那就在输入用户名时输入Q或者q退出程序），在Hr输入用户名时，检测此用户名是否有board里面的非法字符，如果有非法字符，则将非法字符替换成同数量的*（如王二麻子替换成&lt;em&gt;**&lt;/em&gt;），然后添加到user_list中，如果没有非法字符，则直接添加到user_list中，每次添加成功后，打印出刚添加的用户名，密码。&lt;br&gt;
    
    </summary>
    
    
      <category term="fighting" scheme="http://yoursite.com/tags/fighting/"/>
    
  </entry>
  
  <entry>
    <title>文件操作题</title>
    <link href="http://yoursite.com/2018/10/16/ti-07/"/>
    <id>http://yoursite.com/2018/10/16/ti-07/</id>
    <published>2018-10-16T11:14:33.969Z</published>
    <updated>2018-08-04T04:48:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>用户的登录与操作（user.txt文件），员工信息操作系统（staff.txt文件）<br>员工信息添加<br>员工信息修改<br>员工信息查询<br>员工信息删除</p><p>第一种方法主要是在文件转成的字典上操作<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">用户名与密码文件</span></span><br><span class="line"><span class="string">user.txt:</span></span><br><span class="line"><span class="string">look,123</span></span><br><span class="line"><span class="string">cross,111</span></span><br><span class="line"><span class="string">wll,666</span></span><br><span class="line"><span class="string">zzz,123</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">思路：把文件里的内容转为一个字典，对字典进行添加，修改，查询，删除之后，把字典里面的内容写入到文件中（用'</span>w<span class="string">'方式，重新从头写），添加功能是追加写到文件中，修改和删除是重新写到文件中</span></span><br><span class="line"><span class="string">小问题：刚添加的信息在此次运行没结束之前，查不出来，但是已经添加到文件中，在下次运行才能</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">def getuser():</span><br><span class="line">    user_pwd=&#123;&#125;</span><br><span class="line">    with open(<span class="string">'user.txt'</span>,<span class="string">'r'</span>) as f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">            i=i.strip().split(<span class="string">','</span>)</span><br><span class="line">            user_pwd[i[0]]=i[1]</span><br><span class="line">    <span class="built_in">return</span> user_pwd</span><br><span class="line">user_pwd=getuser()</span><br><span class="line"><span class="comment">#getuser(user_pwd)</span></span><br><span class="line"><span class="comment">#注册</span></span><br><span class="line">def register(user_pwd):</span><br><span class="line">    global x</span><br><span class="line">    uname=input(<span class="string">'请输入你的用户名：'</span>).strip()</span><br><span class="line">    <span class="keyword">if</span>  uname <span class="keyword">in</span> user_pwd.keys():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'用户已存在'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        upwd=input(<span class="string">'请输入你的密码：'</span>).strip()</span><br><span class="line">        rep=input(<span class="string">'请确认密码：'</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> upwd==rep:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'注册成功,将为你自动登录'</span>)</span><br><span class="line">            with open(<span class="string">'user.txt'</span>,<span class="string">'a'</span>) as f:</span><br><span class="line">                f.write(uname+<span class="string">','</span>+upwd+<span class="string">'\n'</span>)</span><br><span class="line">                f.close()</span><br><span class="line">            x=True</span><br><span class="line">            <span class="built_in">return</span> True</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'密码不一致，注册失败'</span>)</span><br><span class="line">            x=False</span><br><span class="line">            <span class="built_in">return</span> False</span><br><span class="line">    <span class="built_in">return</span> user_pwd</span><br><span class="line"><span class="comment"># user_pwd=register(user_pwd)</span></span><br><span class="line"><span class="comment"># print(user_pwd)</span></span><br><span class="line"><span class="comment">#登录</span></span><br><span class="line">def login(user_pwd):</span><br><span class="line">    global x</span><br><span class="line">    c=2</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        <span class="keyword">if</span> c&gt;=0:</span><br><span class="line">            uname=input(<span class="string">'请输入你的用户名：'</span>).strip()</span><br><span class="line">            upwd=input(<span class="string">'请输入你的密码：'</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> uname <span class="keyword">in</span> user_pwd.keys() and user_pwd[uname]==upwd:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'登录成功'</span>)</span><br><span class="line">                x=True</span><br><span class="line">                <span class="built_in">return</span> True</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'账户或密码错误，你还有%d次机会'</span>%c)</span><br><span class="line">                c-=1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'机会已用完，退出程序'</span>)</span><br><span class="line">            <span class="built_in">exit</span>()</span><br><span class="line"><span class="comment">#login(user_pwd)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改员工信息</span></span><br><span class="line"><span class="comment"># 添加员工信息</span></span><br><span class="line"><span class="comment"># 查看员工信息</span></span><br><span class="line"><span class="comment"># 删除员工信息</span></span><br><span class="line"></span><br><span class="line">def getstaff():</span><br><span class="line">    dic_staff=&#123;&#125;</span><br><span class="line">    with open(<span class="string">'staff.txt'</span>,<span class="string">'r'</span>) as f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">            i=i.strip().split(<span class="string">','</span>)</span><br><span class="line">            dic_staff[i[0]]=i[1]</span><br><span class="line">    <span class="built_in">return</span> dic_staff</span><br><span class="line">dic_staff=getstaff()</span><br><span class="line"><span class="comment"># print(dic_staff)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加</span></span><br><span class="line">x=True</span><br><span class="line">def add_staff(dic_staff):</span><br><span class="line">    <span class="keyword">if</span> x==False:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'你还未登录，请先登录'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        staff_name=input(<span class="string">'请输入员工姓名：'</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> staff_name <span class="keyword">in</span> dic_staff.keys():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'已有员工信息'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            staff_salary=input(<span class="string">'请输入员工的工资：'</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> staff_salary.isdigit():</span><br><span class="line">                with open(<span class="string">'staff.txt'</span>,<span class="string">'a'</span>) as f:</span><br><span class="line">                    f.write(staff_name+<span class="string">','</span>+staff_salary+<span class="string">'\n'</span>)</span><br><span class="line">                    f.close()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'成功添加员工信息'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'输入格式有误'</span>)</span><br><span class="line">    <span class="built_in">return</span> dic_staff</span><br><span class="line"><span class="comment">#dic_staff=add_staff(dic_staff)</span></span><br><span class="line"></span><br><span class="line">def select_staff(dic_staff):</span><br><span class="line">    <span class="keyword">if</span> x==False:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'你还未登录，请先登录'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        select_name=input(<span class="string">'请输入查询的员工姓名：'</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> select_name <span class="keyword">in</span> dic_staff.keys():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'员工姓名:&#123;&#125; 工资:&#123;&#125;'</span>.format(select_name,dic_staff[select_name]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'没有此员工'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#select_staff(dic_staff)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line">def change(dic_staff):</span><br><span class="line">    <span class="keyword">if</span> x==False:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'你还未登录，请先登录'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        staff_name=input(<span class="string">'请输入你要修改的员工姓名：'</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> staff_name <span class="keyword">in</span> dic_staff.keys():</span><br><span class="line">            change_salary=input(<span class="string">'请输入修改的工资：'</span>).strip()</span><br><span class="line">            dic_staff[staff_name]=change_salary</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'修改成功'</span>)</span><br><span class="line">            <span class="built_in">print</span>(dic_staff)</span><br><span class="line">            f=open(<span class="string">'staff.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">            <span class="keyword">for</span> i,j <span class="keyword">in</span> dic_staff.items():</span><br><span class="line">                <span class="comment">#with open('staff.txt','w') as f:</span></span><br><span class="line">                f.write(i+<span class="string">','</span>+j+<span class="string">'\n'</span>)</span><br><span class="line">            f.close()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'你查找的员工不存在，请核实后再修改'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> dic_staff</span><br><span class="line"><span class="comment">#dic_staff=change(dic_staff)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">def delete(dic_staff):</span><br><span class="line">    <span class="keyword">if</span> x==False:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'你还未登录，请先登录'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        staff_name=input(<span class="string">'请输入你要删除的员工姓名：'</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> staff_name <span class="keyword">in</span> dic_staff.keys():</span><br><span class="line">            del dic_staff[staff_name]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'删除成功'</span>)</span><br><span class="line">            f=open(<span class="string">'staff.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">            <span class="keyword">for</span> i,j <span class="keyword">in</span> dic_staff.items():</span><br><span class="line">                <span class="comment">#with open('staff.txt','w') as f:</span></span><br><span class="line">                f.write(i+<span class="string">','</span>+j+<span class="string">'\n'</span>)</span><br><span class="line">            f.close()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'你要删除的员工不存在，请核实后再操作'</span>)</span><br><span class="line">    <span class="built_in">return</span> dic_staff</span><br><span class="line"><span class="comment">#dic_staff=delete(dic_staff)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开始</span></span><br><span class="line">x=False</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    menu=[<span class="string">'登录'</span>,<span class="string">'注册'</span>,<span class="string">'添加信息'</span>,<span class="string">'查询信息'</span>,<span class="string">'修改信息'</span>,<span class="string">'删除信息'</span>,<span class="string">'退出'</span>]</span><br><span class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(menu,1):</span><br><span class="line">        <span class="built_in">print</span>(i,j)</span><br><span class="line">    num=input(<span class="string">'请输入相应操作序号：'</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> num==<span class="string">'1'</span>:</span><br><span class="line">        login(user_pwd)</span><br><span class="line">    <span class="keyword">elif</span> num==<span class="string">'2'</span>:</span><br><span class="line">        register(user_pwd)</span><br><span class="line">    <span class="keyword">elif</span> num==<span class="string">'3'</span>:</span><br><span class="line">        dic_staff=add_staff(dic_staff)</span><br><span class="line">    <span class="keyword">elif</span> num==<span class="string">'4'</span>:</span><br><span class="line">        select_staff(dic_staff) </span><br><span class="line">    <span class="keyword">elif</span> num==<span class="string">'5'</span>:</span><br><span class="line">        dic_staff=change(dic_staff) </span><br><span class="line">    <span class="keyword">elif</span> num==<span class="string">'6'</span>:</span><br><span class="line">        dic_staff=delete(dic_staff)</span><br><span class="line">    <span class="keyword">elif</span> num==<span class="string">'7'</span>:</span><br><span class="line">        <span class="built_in">exit</span>()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'输入非法，请按照指定格式输入'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">staff.txt内容</span></span><br><span class="line"><span class="string">wll,122222</span></span><br><span class="line"><span class="string">aaa,123411</span></span><br><span class="line"><span class="string">ymm,50000s</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">执行效果</span></span><br><span class="line"><span class="string">1 登录</span></span><br><span class="line"><span class="string">2 注册</span></span><br><span class="line"><span class="string">3 添加信息</span></span><br><span class="line"><span class="string">4 查询信息</span></span><br><span class="line"><span class="string">5 修改信息</span></span><br><span class="line"><span class="string">6 删除信息</span></span><br><span class="line"><span class="string">7 退出</span></span><br><span class="line"><span class="string">请输入相应操作序号：3</span></span><br><span class="line"><span class="string">你还未登录，请先登录</span></span><br><span class="line"><span class="string">1 登录</span></span><br><span class="line"><span class="string">2 注册</span></span><br><span class="line"><span class="string">3 添加信息</span></span><br><span class="line"><span class="string">4 查询信息</span></span><br><span class="line"><span class="string">5 修改信息</span></span><br><span class="line"><span class="string">6 删除信息</span></span><br><span class="line"><span class="string">7 退出</span></span><br><span class="line"><span class="string">请输入相应操作序号：2</span></span><br><span class="line"><span class="string">请输入你的用户名：kkk</span></span><br><span class="line"><span class="string">请输入你的密码：112</span></span><br><span class="line"><span class="string">请确认密码：112</span></span><br><span class="line"><span class="string">注册成功,将为你自动登录</span></span><br><span class="line"><span class="string">1 登录</span></span><br><span class="line"><span class="string">2 注册</span></span><br><span class="line"><span class="string">3 添加信息</span></span><br><span class="line"><span class="string">4 查询信息</span></span><br><span class="line"><span class="string">5 修改信息</span></span><br><span class="line"><span class="string">6 删除信息</span></span><br><span class="line"><span class="string">7 退出</span></span><br><span class="line"><span class="string">请输入相应操作序号：3</span></span><br><span class="line"><span class="string">请输入员工姓名：rrr</span></span><br><span class="line"><span class="string">请输入员工的工资：5678</span></span><br><span class="line"><span class="string">成功添加员工信息</span></span><br><span class="line"><span class="string">1 登录</span></span><br><span class="line"><span class="string">2 注册</span></span><br><span class="line"><span class="string">3 添加信息</span></span><br><span class="line"><span class="string">4 查询信息</span></span><br><span class="line"><span class="string">5 修改信息</span></span><br><span class="line"><span class="string">6 删除信息</span></span><br><span class="line"><span class="string">7 退出</span></span><br><span class="line"><span class="string">请输入相应操作序号：6</span></span><br><span class="line"><span class="string">请输入你要删除的员工姓名：rrr</span></span><br><span class="line"><span class="string">你要删除的员工不存在，请核实后再操作</span></span><br><span class="line"><span class="string">1 登录</span></span><br><span class="line"><span class="string">2 注册</span></span><br><span class="line"><span class="string">3 添加信息</span></span><br><span class="line"><span class="string">4 查询信息</span></span><br><span class="line"><span class="string">5 修改信息</span></span><br><span class="line"><span class="string">6 删除信息</span></span><br><span class="line"><span class="string">7 退出</span></span><br><span class="line"><span class="string">请输入相应操作序号：6</span></span><br><span class="line"><span class="string">请输入你要删除的员工姓名：ggg</span></span><br><span class="line"><span class="string">删除成功</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">请输入相应操作序号：7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">D:\soft\python\code&gt;</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure></p><p>第二种方法主要全是在文件上操作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">采用了一种新型调用主函数方法</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">import os</span><br><span class="line"><span class="comment">#引入os模块</span></span><br><span class="line"><span class="comment">#添加信息功能，先读staff2文件里面的内容，判断员工是否已经存在，若不存在在文件后追加</span></span><br><span class="line"><span class="comment">#添加的员工信息</span></span><br><span class="line">def add():</span><br><span class="line">    add_info=input(<span class="string">'请输入员工姓名：'</span>).strip()</span><br><span class="line">    flag=False</span><br><span class="line">    with open(<span class="string">'staff2.txt'</span>,<span class="string">'r'</span>) as f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            <span class="keyword">if</span> add_info==line.split()[0]:</span><br><span class="line">                flag=True</span><br><span class="line">    <span class="comment">#信息存入</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'用户已存在'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        money=input(<span class="string">'请输入员工的工资:'</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> money.isdigit():</span><br><span class="line">            with open(<span class="string">'staff2.txt'</span>,<span class="string">'a+'</span>) as f1:</span><br><span class="line">                f1.write(add_info+<span class="string">'\t'</span>+money+<span class="string">'\n'</span>)</span><br><span class="line">                f1.close()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'添加成功'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'输入非法，请按照指定格式输入'</span>)</span><br><span class="line"><span class="comment">#add()</span></span><br><span class="line"><span class="comment">#查询，循环遍历文件内容，如存在查找的员工，则输出信息</span></span><br><span class="line">def find():</span><br><span class="line">    find_name=input(<span class="string">'请输入要查找的员工姓名：'</span>)</span><br><span class="line">    with open(<span class="string">'staff2.txt'</span>,<span class="string">'r+'</span>) as f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            <span class="keyword">if</span> find_name==line.split()[0]:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'员工姓名：'</span>,find_name,<span class="string">'工资：'</span>,line.split()[1])</span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'你要找的员工不存在，请核实'</span>)</span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line"><span class="comment">#find()</span></span><br><span class="line"><span class="comment">#修改，如果员工存在，循环遍历文件内容的每行值，再创建另一个文件，如果是要修改的员工那行，把修改后的信息写到另一个文件中，如果不是，把每行内容写到另一个文件中，把原来文件删除，另一个文件名字更改为原来文件名，取代原来的文件</span></span><br><span class="line">def change():</span><br><span class="line">    change_name=input(<span class="string">'请输入需要修改信息的员工姓名：'</span>)</span><br><span class="line">    flag=False</span><br><span class="line">    with open(<span class="string">'staff2.txt'</span>,<span class="string">'r+'</span>) as f1:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f1:</span><br><span class="line">            <span class="keyword">if</span> change_name==line.split()[0]:</span><br><span class="line">                flag=True</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            change_sta=input(<span class="string">'请输入修改后的工资：'</span>)</span><br><span class="line">            <span class="keyword">if</span> change_sta.isdigit():</span><br><span class="line">                with open(<span class="string">'staff2.txt'</span>,<span class="string">'r'</span>) as f2,open(<span class="string">'staff3.txt'</span>,<span class="string">'w'</span>) as f3:</span><br><span class="line">                    <span class="keyword">for</span> line1 <span class="keyword">in</span> f2:</span><br><span class="line">                        <span class="keyword">if</span> line1.split()[0]==change_name:</span><br><span class="line">                            f3.write(change_name+<span class="string">'\t'</span>+change_sta+<span class="string">'\n'</span>)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            f3.write(line1)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'修改成功'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'输入有误'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'没有找到此员工，请核实'</span>)</span><br><span class="line">    os.remove(<span class="string">'staff2.txt'</span>)</span><br><span class="line">    os.rename(<span class="string">'staff3.txt'</span>,<span class="string">'staff2.txt'</span>)</span><br><span class="line">         </span><br><span class="line"><span class="comment">#change()</span></span><br><span class="line"><span class="comment">#删除功能，和修改功能思想一样</span></span><br><span class="line">def delete():</span><br><span class="line">    delete_name=input(<span class="string">'请输入要删除的员工姓名:'</span>)</span><br><span class="line">    flag=False</span><br><span class="line">    with open(<span class="string">'staff2.txt'</span>,<span class="string">'r+'</span>) as f1:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f1:</span><br><span class="line">            <span class="keyword">if</span> delete_name==line.split()[0]:</span><br><span class="line">                flag=True</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            with open(<span class="string">'staff2.txt'</span>,<span class="string">'r'</span>) as f2,open(<span class="string">'staff3.txt'</span>,<span class="string">'w'</span>) as f3:</span><br><span class="line">                <span class="keyword">for</span> line1 <span class="keyword">in</span> f2:</span><br><span class="line">                    <span class="keyword">if</span> line1.split()[0]==delete_name:</span><br><span class="line">                        pass</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        f3.write(line1)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'删除成功'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'没有找到此员工，请核实'</span>)</span><br><span class="line">    os.remove(<span class="string">'staff2.txt'</span>)</span><br><span class="line">    os.rename(<span class="string">'staff3.txt'</span>,<span class="string">'staff2.txt'</span>)</span><br><span class="line"><span class="comment">#delete()</span></span><br><span class="line">def exits():</span><br><span class="line">    <span class="built_in">exit</span>()</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    menu=&#123;</span><br><span class="line">        <span class="string">'1'</span>:add,</span><br><span class="line">        <span class="string">'2'</span>:change,</span><br><span class="line">        <span class="string">'3'</span>:find,</span><br><span class="line">        <span class="string">'4'</span>:delete,</span><br><span class="line">        <span class="string">'5'</span>:exits</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        请选择：</span></span><br><span class="line"><span class="string">            1,添加员工信息</span></span><br><span class="line"><span class="string">            2,修改员工工资</span></span><br><span class="line"><span class="string">            3,查询员工信息</span></span><br><span class="line"><span class="string">            4,删除员工信息</span></span><br><span class="line"><span class="string">            5,退出工资系统</span></span><br><span class="line"><span class="string">        "</span><span class="string">""</span>)</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    choice=input(<span class="string">'请选择相应操作序号：'</span>).strip() </span><br><span class="line">    <span class="keyword">if</span> choice <span class="keyword">in</span> menu:</span><br><span class="line">        menu[choice]()</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        main()</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        请选择：</span></span><br><span class="line"><span class="string">            1,添加员工信息</span></span><br><span class="line"><span class="string">            2,修改员工工资</span></span><br><span class="line"><span class="string">            3,查询员工信息</span></span><br><span class="line"><span class="string">            4,删除员工信息</span></span><br><span class="line"><span class="string">            5,退出工资系统</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">请选择相应操作序号：1</span></span><br><span class="line"><span class="string">请输入员工姓名：fff</span></span><br><span class="line"><span class="string">请输入员工的工资:36889</span></span><br><span class="line"><span class="string">添加成功</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        请选择：</span></span><br><span class="line"><span class="string">            1,添加员工信息</span></span><br><span class="line"><span class="string">            2,修改员工工资</span></span><br><span class="line"><span class="string">            3,查询员工信息</span></span><br><span class="line"><span class="string">            4,删除员工信息</span></span><br><span class="line"><span class="string">            5,退出工资系统</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">请选择相应操作序号：2</span></span><br><span class="line"><span class="string">请输入需要修改信息的员工姓名：fff</span></span><br><span class="line"><span class="string">请输入修改后的工资：3333</span></span><br><span class="line"><span class="string">修改成功</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用户的登录与操作（user.txt文件），员工信息操作系统（staff.txt文件）&lt;br&gt;员工信息添加&lt;br&gt;员工信息修改&lt;br&gt;员工信息查询&lt;br&gt;员工信息删除&lt;/p&gt;
&lt;p&gt;第一种方法主要是在文件转成的字典上操作&lt;br&gt;
    
    </summary>
    
    
      <category term="fighting" scheme="http://yoursite.com/tags/fighting/"/>
    
  </entry>
  
  <entry>
    <title>手写装饰器</title>
    <link href="http://yoursite.com/2018/10/16/ti-06/"/>
    <id>http://yoursite.com/2018/10/16/ti-06/</id>
    <published>2018-10-16T11:14:33.955Z</published>
    <updated>2018-08-04T03:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>手写装饰器<br>先让用户选择，是登陆还是注册<br>选择序号完毕之后，运行相应的程序，<br>验证成功之后，可以让其继续选择，登陆还是注册，还可以选择退出(自己增加一个可修改密码功能)<br><a id="more"></a><br>注册<br>登录<br>查看已存在的用户<br>修改密码</p><p>扩展：文件操作<br><strong>name</strong>=<strong>main</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">x=False</span><br><span class="line">user_pwd=&#123;<span class="string">'look'</span>:<span class="string">'123'</span>,<span class="string">'qqq'</span>:<span class="string">'222'</span>&#125;</span><br><span class="line"><span class="comment">#生成日志</span></span><br><span class="line">def <span class="built_in">log</span>(msg):</span><br><span class="line">    fp=open(<span class="string">'log.txt'</span>,<span class="string">'a+'</span>)</span><br><span class="line">    now=time.strftime(<span class="string">'%Y-%m-%d  %H:%M:%S'</span>)</span><br><span class="line">    fp.write(now+<span class="string">'  '</span>+msg+<span class="string">'-python log'</span>+<span class="string">'\n'</span>)</span><br><span class="line">    fp.read()</span><br><span class="line">    fp.close()</span><br><span class="line"><span class="comment">#生成闭包</span></span><br><span class="line">def mylogger(func):</span><br><span class="line">    def inner(*kw,**kws):</span><br><span class="line">        <span class="keyword">if</span> func(*kw,**kws):</span><br><span class="line">            <span class="built_in">log</span>(func.__name__+<span class="string">'操作成功'</span>)</span><br><span class="line">            msg=True</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">log</span>(func.__name__+<span class="string">'操作失败'</span>)</span><br><span class="line">            msg=False</span><br><span class="line">        <span class="built_in">return</span> msg</span><br><span class="line">    <span class="built_in">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># func=mylogger(register)</span></span><br><span class="line"><span class="comment"># inner func()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@mylogger</span><br><span class="line">def register(user_pwd):</span><br><span class="line">    global x</span><br><span class="line">    uname=input(<span class="string">'请输入你的用户名：'</span>).strip()</span><br><span class="line">    <span class="keyword">if</span>  uname <span class="keyword">in</span> user_pwd.keys():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'用户已存在'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        upwd=input(<span class="string">'请输入你的密码：'</span>).strip()</span><br><span class="line">        rep=input(<span class="string">'请确认密码：'</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> upwd==rep:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'注册成功,将为你自动登录'</span>)</span><br><span class="line">            user_pwd[uname]=upwd</span><br><span class="line">            x=uname</span><br><span class="line">            <span class="built_in">return</span> True</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'密码不一致，注册失败'</span>)</span><br><span class="line">            x=False</span><br><span class="line">            <span class="built_in">return</span> False</span><br><span class="line">    <span class="built_in">return</span> user_pwd</span><br><span class="line"><span class="comment"># user_pwd=register(user_pwd)</span></span><br><span class="line"><span class="comment"># print(user_pwd,x)</span></span><br><span class="line"><span class="comment">#登录</span></span><br><span class="line">@mylogger</span><br><span class="line">def login(user_pwd):</span><br><span class="line">    global x</span><br><span class="line">    c=2</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        <span class="keyword">if</span> c&gt;=0:</span><br><span class="line">            uname=input(<span class="string">'请输入你的用户名：'</span>).strip()</span><br><span class="line">            upwd=input(<span class="string">'请输入你的密码：'</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> uname <span class="keyword">in</span> user_pwd.keys() and user_pwd[uname]==upwd:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'登录成功'</span>)</span><br><span class="line">                x=uname</span><br><span class="line">                <span class="built_in">return</span> True</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'账户或密码错误，你还有%d次机会'</span>%c)</span><br><span class="line">                c-=1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'机会已用完，退出程序'</span>)</span><br><span class="line">            <span class="built_in">exit</span>()</span><br><span class="line"><span class="comment">#user_pwd=login(user_pwd)</span></span><br><span class="line">@mylogger</span><br><span class="line">def find(user_pwd):</span><br><span class="line">    <span class="keyword">if</span> user_pwd==&#123;&#125;:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'查找不到用户'</span>)</span><br><span class="line">        <span class="built_in">return</span> False</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> user_pwd.items():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'用户：&#123;&#125;  密码：&#123;&#125;'</span>.format(i,j))</span><br><span class="line">        <span class="built_in">return</span> True</span><br><span class="line"><span class="comment">#find(user_pwd)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改密码</span></span><br><span class="line">@mylogger</span><br><span class="line">def change(user_pwd):</span><br><span class="line">    cname=input(<span class="string">'请输入你的用户名：'</span>)</span><br><span class="line">    cpwd=input(<span class="string">'请输入你的密码：'</span>)</span><br><span class="line">    <span class="keyword">if</span> cname <span class="keyword">in</span> user_pwd.keys() and user_pwd[cname]==cpwd:</span><br><span class="line">        newpwd=input(<span class="string">'请输入你的新密码：'</span>)</span><br><span class="line">        user_pwd[cname]=newpwd</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'修改成功'</span>)</span><br><span class="line">        <span class="built_in">return</span> True</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'你输入的用户名或密码不匹配，无法进行此操作'</span>)</span><br><span class="line">        <span class="built_in">return</span> False</span><br><span class="line">    <span class="built_in">return</span> user_pwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def menu():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'********************'</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">        1   登录</span></span><br><span class="line"><span class="string">        2   注册</span></span><br><span class="line"><span class="string">        3   查看所有用户</span></span><br><span class="line"><span class="string">        4   修改密码</span></span><br><span class="line"><span class="string">        5   退出程序"</span><span class="string">""</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'********************'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#主程序</span></span><br><span class="line">x=False</span><br><span class="line">user_pwd=&#123;<span class="string">'look'</span>:<span class="string">'123'</span>,<span class="string">'qqq'</span>:<span class="string">'222'</span>&#125;</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    start_time=time.time()</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        menu()</span><br><span class="line">        msg=input(<span class="string">'请输入相应操作序号：'</span>)</span><br><span class="line">        <span class="keyword">if</span> msg==<span class="string">'1'</span>:</span><br><span class="line">            login(user_pwd)</span><br><span class="line">        <span class="keyword">elif</span> msg==<span class="string">'2'</span>:</span><br><span class="line">            register(user_pwd)</span><br><span class="line">        <span class="keyword">elif</span> msg==<span class="string">'3'</span>:</span><br><span class="line">            find(user_pwd)</span><br><span class="line">        <span class="keyword">elif</span> msg==<span class="string">'4'</span>:</span><br><span class="line">            change(user_pwd)</span><br><span class="line">        <span class="keyword">elif</span> msg==<span class="string">'5'</span>:</span><br><span class="line">            end_time=time.time()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'此程序执行了&#123;&#125;时间'</span>.format(end_time-start_time))</span><br><span class="line">            <span class="built_in">exit</span>()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'输入非法，请按照指定格式输入'</span>) </span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">执行效果：</span></span><br><span class="line"><span class="string">********************</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        1   登录</span></span><br><span class="line"><span class="string">        2   注册</span></span><br><span class="line"><span class="string">        3   查看所有用户</span></span><br><span class="line"><span class="string">        4   修改密码</span></span><br><span class="line"><span class="string">        5   退出程序</span></span><br><span class="line"><span class="string">********************</span></span><br><span class="line"><span class="string">请输入相应操作序号：1</span></span><br><span class="line"><span class="string">请输入你的用户名：look</span></span><br><span class="line"><span class="string">请输入你的密码：123</span></span><br><span class="line"><span class="string">登录成功</span></span><br><span class="line"><span class="string">********************</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        1   登录</span></span><br><span class="line"><span class="string">        2   注册</span></span><br><span class="line"><span class="string">        3   查看所有用户</span></span><br><span class="line"><span class="string">        4   修改密码</span></span><br><span class="line"><span class="string">        5   退出程序</span></span><br><span class="line"><span class="string">********************</span></span><br><span class="line"><span class="string">请输入相应操作序号：2</span></span><br><span class="line"><span class="string">请输入你的用户名：sss</span></span><br><span class="line"><span class="string">请输入你的密码：333</span></span><br><span class="line"><span class="string">请确认密码：333</span></span><br><span class="line"><span class="string">注册成功,将为你自动登录</span></span><br><span class="line"><span class="string">********************</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        1   登录</span></span><br><span class="line"><span class="string">        2   注册</span></span><br><span class="line"><span class="string">        3   查看所有用户</span></span><br><span class="line"><span class="string">        4   修改密码</span></span><br><span class="line"><span class="string">        5   退出程序</span></span><br><span class="line"><span class="string">********************</span></span><br><span class="line"><span class="string">请输入相应操作序号：3</span></span><br><span class="line"><span class="string">用户：look  密码：123</span></span><br><span class="line"><span class="string">用户：qqq  密码：222</span></span><br><span class="line"><span class="string">用户：sss  密码：333</span></span><br><span class="line"><span class="string">********************</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        1   登录</span></span><br><span class="line"><span class="string">        2   注册</span></span><br><span class="line"><span class="string">        3   查看所有用户</span></span><br><span class="line"><span class="string">        4   修改密码</span></span><br><span class="line"><span class="string">        5   退出程序</span></span><br><span class="line"><span class="string">********************</span></span><br><span class="line"><span class="string">请输入相应操作序号：4</span></span><br><span class="line"><span class="string">请输入你的用户名：sss</span></span><br><span class="line"><span class="string">请输入你的密码：333</span></span><br><span class="line"><span class="string">请输入你的新密码：123</span></span><br><span class="line"><span class="string">修改成功</span></span><br><span class="line"><span class="string">********************</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        1   登录</span></span><br><span class="line"><span class="string">        2   注册</span></span><br><span class="line"><span class="string">        3   查看所有用户</span></span><br><span class="line"><span class="string">        4   修改密码</span></span><br><span class="line"><span class="string">        5   退出程序</span></span><br><span class="line"><span class="string">********************</span></span><br><span class="line"><span class="string">请输入相应操作序号：5</span></span><br><span class="line"><span class="string">此程序执行了33.84893584251404时间</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">log.txt:</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">2018-08-04  11:19:26  change操作失败-python log</span></span><br><span class="line"><span class="string">2018-08-04  11:19:37  change操作成功-python log</span></span><br><span class="line"><span class="string">2018-08-04  11:19:48  login操作成功-python log</span></span><br><span class="line"><span class="string">2018-08-04  11:21:00  login操作成功-python log</span></span><br><span class="line"><span class="string">2018-08-04  11:21:10  register操作成功-python log</span></span><br><span class="line"><span class="string">2018-08-04  11:21:13  find操作成功-python log</span></span><br><span class="line"><span class="string">2018-08-04  11:21:23  change操作成功-python log</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;手写装饰器&lt;br&gt;先让用户选择，是登陆还是注册&lt;br&gt;选择序号完毕之后，运行相应的程序，&lt;br&gt;验证成功之后，可以让其继续选择，登陆还是注册，还可以选择退出(自己增加一个可修改密码功能)&lt;br&gt;
    
    </summary>
    
    
      <category term="fighting" scheme="http://yoursite.com/tags/fighting/"/>
    
  </entry>
  
  <entry>
    <title>博客园</title>
    <link href="http://yoursite.com/2018/10/16/ti-05/"/>
    <id>http://yoursite.com/2018/10/16/ti-05/</id>
    <published>2018-10-16T11:14:33.937Z</published>
    <updated>2018-08-04T01:09:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="博客园"><a href="#博客园" class="headerlink" title="博客园"></a>博客园</h2><p>要求：<br> 欢迎来到博客园首页<br> 1:请登录<br> 2:请注册<br> 3:文章页面<br> 4:日记页面<br> 5:评论页面<br> 6:收藏页面<br> 7:注销<br> 8:退出程序<br><a id="more"></a><br>2)，用户输入选项，3~6选项必须在用户登录成功之后，才能访问成功。</p><p>3)，用户选择登录，用户名密码从字典中读取验证，三次机会，没成功则结束整个程  序运行，成功之后，可以选择访问3~6项，访问页面之前，必须要在打印信息，  格式为–&gt;用户:xx 在xx年xx月xx日 执行了 %s操作，访问页面时，页面内容为：欢迎xx用户访问评论（文章，日记，收藏）页面</p><p>4)，如果用户没有注册，则可以选择注册，注册成功之后，可以自动完成登录（完成自动登录+5分），然后进入首页选择。</p><p>5)，注销用户是指注销用户的登录状态，使其在访问任何页面时，必须重新登录。</p><p>6)，退出程序为结束整个程序运行。</p><pre><code class="bash"><span class="comment">#登录</span><span class="comment">#注册：不能跟之前的用户重复</span>x=<span class="string">'no'</span>   <span class="comment">#变量接收登录状态</span>userlist=[]   <span class="comment">#存储用户注册的账户密码</span>def login():    global x    <span class="keyword">if</span> x:        <span class="built_in">print</span>(<span class="string">'你已登录'</span>)        <span class="built_in">return</span> True    <span class="keyword">else</span>:        c=2        <span class="keyword">while</span> True:            <span class="keyword">if</span> c&gt;=0:                uname=input(<span class="string">'请输入你的用户名：'</span>).strip()                <span class="built_in">pwd</span>=input(<span class="string">'请输入你的密码：'</span>).strip()                <span class="keyword">if</span> uname <span class="keyword">in</span> userlist.keys() and <span class="built_in">pwd</span> <span class="keyword">in</span> userlist.values():                    <span class="built_in">print</span>(<span class="string">'登录成功'</span>)                    x=uname                    <span class="built_in">return</span> True                <span class="keyword">else</span>:                    <span class="built_in">print</span>(<span class="string">'账户或密码错误，你还有%d次机会'</span>%c)                    c-=1            <span class="keyword">else</span>:                <span class="built_in">print</span>(<span class="string">'机会已用完，退出程序'</span>)                <span class="built_in">exit</span>()def zhuce():    global x    <span class="keyword">if</span> x:        <span class="built_in">print</span>(<span class="string">'你已登录，无需注册'</span>)        <span class="built_in">return</span> True    <span class="keyword">else</span>:        uname=input(<span class="string">'请输入你的用户名：'</span>).strip()        <span class="keyword">if</span> uname <span class="keyword">in</span> userlist:            <span class="built_in">print</span>(<span class="string">'用户已存在'</span>)            <span class="built_in">return</span> False        <span class="keyword">else</span>:            <span class="built_in">pwd</span>=input(<span class="string">'请输入你的密码：'</span>).strip()            userlist[uname]=<span class="built_in">pwd</span>            x=uname            <span class="built_in">print</span>(<span class="string">'注册成册，将为你自动登录'</span>)            <span class="built_in">return</span> userlist    def nowtime():    import datetime    y=datetime.datetime.now().year    m=datetime.datetime.now().month    d=datetime.datetime.now().day    <span class="built_in">print</span>(<span class="string">'%s年%s月%s日'</span>%(y,m,d))def artical(x):    <span class="keyword">if</span> x==False:        <span class="built_in">print</span>(<span class="string">'你还未登录，请先登录'</span>)    <span class="keyword">else</span>:        <span class="built_in">print</span>(<span class="string">'用户执行了文章页面操作'</span>)        nowtime()        <span class="built_in">print</span>(<span class="string">'欢迎用户{}访问文章页面'</span>.format(x))def rji(x):    <span class="keyword">if</span> x==False:        <span class="built_in">print</span>(<span class="string">'你还未登录，请先登录'</span>)    <span class="keyword">else</span>:        <span class="built_in">print</span>(<span class="string">'用户执行了日记页面操作'</span>)        nowtime()        <span class="built_in">print</span>(<span class="string">'欢迎用户{}访问日记页面'</span>.format(x))def pinlu(x):    <span class="keyword">if</span> x==False:        <span class="built_in">print</span>(<span class="string">'你还未登录，请先登录'</span>)    <span class="keyword">else</span>:        <span class="built_in">print</span>(<span class="string">'用户执行了评论页面操作'</span>)        nowtime()        <span class="built_in">print</span>(<span class="string">'欢迎用户{}访问评论页面'</span>.format(x))def shouc(x):    <span class="keyword">if</span> x==False:        <span class="built_in">print</span>(<span class="string">'你还未登录，请先登录'</span>)    <span class="keyword">else</span>:        <span class="built_in">print</span>(<span class="string">'用户执行了收藏页面操作'</span>)        nowtime()        <span class="built_in">print</span>(<span class="string">'欢迎用户{}访问收藏页面'</span>.format(x))def zhuxiao(x):    <span class="keyword">if</span> x==False:        <span class="built_in">print</span>(<span class="string">'你还未登录，无法进行此操作'</span>)    <span class="keyword">else</span>:        <span class="built_in">print</span>(<span class="string">'注销成功，继续操作请先登录'</span>)        <span class="built_in">return</span> False<span class="comment">#执行结果：</span><span class="string">''</span><span class="string">'</span><span class="string">**********欢迎来到博客园首页***********</span><span class="string">1 登录</span><span class="string">2 注册</span><span class="string">3 文章页面</span><span class="string">4 日记页面</span><span class="string">5 评论页面</span><span class="string">6 收藏页面</span><span class="string">7 注销</span><span class="string">8 退出程序</span><span class="string">请输入相应操作序号:2</span><span class="string">请输入你的用户名：ff</span><span class="string">请输入你的密码：33</span><span class="string">注册成册，将为你自动登录</span><span class="string">**********欢迎来到博客园首页***********</span><span class="string">1 登录</span><span class="string">2 注册</span><span class="string">3 文章页面</span><span class="string">4 日记页面</span><span class="string">5 评论页面</span><span class="string">6 收藏页面</span><span class="string">7 注销</span><span class="string">8 退出程序</span><span class="string">请输入相应操作序号:3</span><span class="string">用户执行了文章页面操作</span><span class="string">2018年8月4日</span><span class="string">欢迎用户ff访问文章页面</span><span class="string">**********欢迎来到博客园首页***********</span><span class="string">1 登录</span><span class="string">2 注册</span><span class="string">3 文章页面</span><span class="string">4 日记页面</span><span class="string">5 评论页面</span><span class="string">6 收藏页面</span><span class="string">7 注销</span><span class="string">8 退出程序</span><span class="string">请输入相应操作序号:7</span><span class="string">注销成功，继续操作请先登录</span><span class="string">**********欢迎来到博客园首页***********</span><span class="string">1 登录</span><span class="string">2 注册</span><span class="string">3 文章页面</span><span class="string">4 日记页面</span><span class="string">5 评论页面</span><span class="string">6 收藏页面</span><span class="string">7 注销</span><span class="string">8 退出程序</span><span class="string">请输入相应操作序号:3</span><span class="string">你还未登录，请先登录</span><span class="string">**********欢迎来到博客园首页***********</span><span class="string">1 登录</span><span class="string">2 注册</span><span class="string">3 文章页面</span><span class="string">4 日记页面</span><span class="string">5 评论页面</span><span class="string">6 收藏页面</span><span class="string">7 注销</span><span class="string">8 退出程序</span><span class="string">请输入相应操作序号:8</span><span class="string">'</span><span class="string">''</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;博客园&quot;&gt;&lt;a href=&quot;#博客园&quot; class=&quot;headerlink&quot; title=&quot;博客园&quot;&gt;&lt;/a&gt;博客园&lt;/h2&gt;&lt;p&gt;要求：&lt;br&gt; 欢迎来到博客园首页&lt;br&gt; 1:请登录&lt;br&gt; 2:请注册&lt;br&gt; 3:文章页面&lt;br&gt; 4:日记页面&lt;br&gt; 5:评论页面&lt;br&gt; 6:收藏页面&lt;br&gt; 7:注销&lt;br&gt; 8:退出程序&lt;br&gt;
    
    </summary>
    
    
      <category term="fighting" scheme="http://yoursite.com/tags/fighting/"/>
    
  </entry>
  
  <entry>
    <title>购物车功能</title>
    <link href="http://yoursite.com/2018/10/16/ti-04/"/>
    <id>http://yoursite.com/2018/10/16/ti-04/</id>
    <published>2018-10-16T11:14:33.897Z</published>
    <updated>2018-07-26T13:16:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写一个购物车"><a href="#写一个购物车" class="headerlink" title="写一个购物车"></a>写一个购物车</h3><p>购物车<br>功能要求：<br>要求用户输入总资产，例如：2000<br>显示商品列表，让用户根据序号选择商品，加入购物车<br>购买，如果商品总额大于总资产，提示账户余额不足，否则，购买成功。<br>充值功能，删除功能，退出功能<br><a id="more"></a><br>普通方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">goods = [&#123;<span class="string">"name"</span>: <span class="string">"电脑"</span>, <span class="string">"price"</span>: 7999&#125;,</span><br><span class="line">         &#123;<span class="string">"name"</span>: <span class="string">"鼠标"</span>, <span class="string">"price"</span>: 100&#125;,</span><br><span class="line">         &#123;<span class="string">"name"</span>: <span class="string">"游艇"</span>, <span class="string">"price"</span>: 5000&#125;,</span><br><span class="line">         &#123;<span class="string">"name"</span>: <span class="string">"手机"</span>, <span class="string">"price"</span>: 1998&#125;]</span><br><span class="line">buy=[]   <span class="comment">#存储到添加到购物车的商品</span></span><br><span class="line">money1=0  <span class="comment">#定义</span></span><br><span class="line">flag=True</span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    money=input(<span class="string">'请输入你的资产：'</span>)</span><br><span class="line">    <span class="keyword">if</span> money.isdigit():</span><br><span class="line">        money=int(money)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'输入有误'</span>)</span><br><span class="line">        <span class="built_in">continue</span>    </span><br><span class="line">    <span class="keyword">while</span> flag:  <span class="comment">#购买</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'欢迎购买'</span>.center(30,<span class="string">'*'</span>))</span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(goods,1):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'商品编号:&#123;&#125;\t商品名称:&#123;&#125;\t商品价格:&#123;&#125;'</span>.format(i,j[<span class="string">'name'</span>],j[<span class="string">'price'</span>]))</span><br><span class="line">        num=input(<span class="string">'请输入购买的商品编号(充值请按C/c,退出请按Q/q,删除请按D/d)：'</span>)</span><br><span class="line">        <span class="keyword">if</span> num.isdigit():</span><br><span class="line">            num=int(num)</span><br><span class="line">            <span class="keyword">if</span> num&lt;=len(goods):</span><br><span class="line">                <span class="keyword">if</span> goods[num-1][<span class="string">'price'</span>]&lt;money: <span class="comment">#判断商品价格是否小于资产</span></span><br><span class="line">                    money-=goods[num-1][<span class="string">'price'</span>]  <span class="comment">#求余额</span></span><br><span class="line">                    buy.append(&#123;<span class="string">'name'</span>:goods[num-1][<span class="string">'name'</span>],<span class="string">'price'</span>:goods[num-1][<span class="string">'price'</span>]&#125;)</span><br><span class="line">                                                   <span class="comment">#添加到购物车buy列表</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">'你已添加&#123;&#125;到购物车，余额&#123;&#125;'</span>.format(goods[num-1][<span class="string">'name'</span>],money))</span><br><span class="line">                    <span class="built_in">print</span>(buy)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">'余额不足，请充值，充值请按C/c,退出请按Q/q'</span>)</span><br><span class="line">                    <span class="built_in">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'没有该商品'</span>)</span><br><span class="line">        <span class="keyword">elif</span> num.upper()==<span class="string">'C'</span>: <span class="comment">#充值</span></span><br><span class="line">            <span class="keyword">while</span> True:</span><br><span class="line">                money2=input(<span class="string">'请输入充值金额：'</span>)</span><br><span class="line">                <span class="keyword">if</span> money2.isdigit():</span><br><span class="line">                    money2=int(money2)</span><br><span class="line">                    money+=money2</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">'你已成功充值，余额%d'</span>% money)</span><br><span class="line">                    <span class="built_in">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">'输入非法'</span>)</span><br><span class="line">                    <span class="built_in">continue</span></span><br><span class="line">        <span class="keyword">elif</span> num.upper()==<span class="string">'D'</span>:<span class="comment">#删除</span></span><br><span class="line">            <span class="keyword">while</span> True:</span><br><span class="line">                <span class="keyword">if</span> buy:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">'购物车'</span>.center(30,<span class="string">'*'</span>))</span><br><span class="line">                    <span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(buy,1):</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">'编号：&#123;&#125;\t商品:&#123;&#125;\t价格：&#123;&#125;'</span>.format(i,buy[i-1][<span class="string">'name'</span>],buy[i-1][<span class="string">'price'</span>]))</span><br><span class="line">                    num1=input(<span class="string">'请输入要删除的商品编号：'</span>)</span><br><span class="line">                    <span class="keyword">if</span> num1.isdigit():</span><br><span class="line">                        num1=int(num1)</span><br><span class="line">                        <span class="keyword">if</span> num1&lt;=len(buy):</span><br><span class="line">                            del buy[num1-1]</span><br><span class="line">                            <span class="comment"># money-=buy[num1-1]['price']</span></span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">'删除成功'</span>)</span><br><span class="line">                            <span class="built_in">break</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">'没有该商品,请重新输入'</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">'输入有误，请重新输入'</span>)</span><br><span class="line">                        <span class="built_in">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">'购物车为空'</span>)</span><br><span class="line">                    <span class="built_in">break</span></span><br><span class="line">        <span class="keyword">elif</span> num.upper()==<span class="string">'Q'</span>: <span class="comment">#退出</span></span><br><span class="line">            <span class="keyword">if</span> buy:</span><br><span class="line">                <span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(buy,1):</span><br><span class="line">                    money1+=j[<span class="string">'price'</span>]</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">'你购买了&#123;&#125;'</span>.format(j[<span class="string">'name'</span>]))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'结算%d'</span>%money1)</span><br><span class="line">                flag=False</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'购物车为空'</span>)</span><br><span class="line">                flag=False</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'输入非法，请重新输入'</span>)</span><br><span class="line">            <span class="built_in">continue</span></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">请输入你的资产：9999</span></span><br><span class="line"><span class="string">*************欢迎购买*************</span></span><br><span class="line"><span class="string">商品编号:1      商品名称:电脑   商品价格:7999</span></span><br><span class="line"><span class="string">商品编号:2      商品名称:鼠标   商品价格:100</span></span><br><span class="line"><span class="string">商品编号:3      商品名称:游艇   商品价格:5000</span></span><br><span class="line"><span class="string">商品编号:4      商品名称:手机   商品价格:1998</span></span><br><span class="line"><span class="string">请输入购买的商品编号(充值请按C/c,退出请按Q/q,删除请按D/d)：c</span></span><br><span class="line"><span class="string">请输入充值金额：1</span></span><br><span class="line"><span class="string">你已成功充值，余额10000</span></span><br><span class="line"><span class="string">*************欢迎购买*************</span></span><br><span class="line"><span class="string">商品编号:1      商品名称:电脑   商品价格:7999</span></span><br><span class="line"><span class="string">商品编号:2      商品名称:鼠标   商品价格:100</span></span><br><span class="line"><span class="string">商品编号:3      商品名称:游艇   商品价格:5000</span></span><br><span class="line"><span class="string">商品编号:4      商品名称:手机   商品价格:1998</span></span><br><span class="line"><span class="string">请输入购买的商品编号(充值请按C/c,退出请按Q/q,删除请按D/d)：1</span></span><br><span class="line"><span class="string">你已添加电脑到购物车，余额2001</span></span><br><span class="line"><span class="string">[&#123;'</span>name<span class="string">': '</span>电脑<span class="string">', '</span>price<span class="string">': 7999&#125;]</span></span><br><span class="line"><span class="string">*************欢迎购买*************</span></span><br><span class="line"><span class="string">商品编号:1      商品名称:电脑   商品价格:7999</span></span><br><span class="line"><span class="string">商品编号:2      商品名称:鼠标   商品价格:100</span></span><br><span class="line"><span class="string">商品编号:3      商品名称:游艇   商品价格:5000</span></span><br><span class="line"><span class="string">商品编号:4      商品名称:手机   商品价格:1998</span></span><br><span class="line"><span class="string">请输入购买的商品编号(充值请按C/c,退出请按Q/q,删除请按D/d)：2</span></span><br><span class="line"><span class="string">你已添加鼠标到购物车，余额1901</span></span><br><span class="line"><span class="string">[&#123;'</span>name<span class="string">': '</span>电脑<span class="string">', '</span>price<span class="string">': 7999&#125;, &#123;'</span>name<span class="string">': '</span>鼠标<span class="string">', '</span>price<span class="string">': 100&#125;]</span></span><br><span class="line"><span class="string">*************欢迎购买*************</span></span><br><span class="line"><span class="string">商品编号:1      商品名称:电脑   商品价格:7999</span></span><br><span class="line"><span class="string">商品编号:2      商品名称:鼠标   商品价格:100</span></span><br><span class="line"><span class="string">商品编号:3      商品名称:游艇   商品价格:5000</span></span><br><span class="line"><span class="string">商品编号:4      商品名称:手机   商品价格:1998</span></span><br><span class="line"><span class="string">请输入购买的商品编号(充值请按C/c,退出请按Q/q,删除请按D/d)：d</span></span><br><span class="line"><span class="string">*************购物车**************</span></span><br><span class="line"><span class="string">编号：1 商品:电脑       价格：7999</span></span><br><span class="line"><span class="string">编号：2 商品:鼠标       价格：100</span></span><br><span class="line"><span class="string">请输入要删除的商品编号：1</span></span><br><span class="line"><span class="string">删除成功</span></span><br><span class="line"><span class="string">*************欢迎购买*************</span></span><br><span class="line"><span class="string">商品编号:1      商品名称:电脑   商品价格:7999</span></span><br><span class="line"><span class="string">商品编号:2      商品名称:鼠标   商品价格:100</span></span><br><span class="line"><span class="string">商品编号:3      商品名称:游艇   商品价格:5000</span></span><br><span class="line"><span class="string">商品编号:4      商品名称:手机   商品价格:1998</span></span><br><span class="line"><span class="string">请输入购买的商品编号(充值请按C/c,退出请按Q/q,删除请按D/d)：q</span></span><br><span class="line"><span class="string">你购买了鼠标</span></span><br><span class="line"><span class="string">结算100</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure></p><h3 id="函数方法"><a href="#函数方法" class="headerlink" title="函数方法"></a>函数方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">def chaxun(goods):  <span class="comment">#查询</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'欢迎购买'</span>.center(30,<span class="string">'*'</span>))</span><br><span class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(goods,1):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'商品编号:&#123;&#125;\t商品名称:&#123;&#125;\t商品价格:&#123;&#125;'</span>.format(i,j[<span class="string">'name'</span>],j[<span class="string">'price'</span>]))</span><br><span class="line"></span><br><span class="line">def shop(goods,money,buy): <span class="comment">#购买</span></span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        num=input(<span class="string">'请输入购买的商品编号(返回请按F/f)：'</span>)</span><br><span class="line">        <span class="keyword">if</span> num.isdigit():</span><br><span class="line">            num=int(num)</span><br><span class="line">            <span class="keyword">if</span> num&lt;=len(goods):</span><br><span class="line">                <span class="keyword">if</span> goods[num-1][<span class="string">'price'</span>]&lt;money:</span><br><span class="line">                    money-=goods[num-1][<span class="string">'price'</span>]</span><br><span class="line">                    buy.append(&#123;<span class="string">'name'</span>:goods[num-1][<span class="string">'name'</span>],<span class="string">'price'</span>:goods[num-1][<span class="string">'price'</span>]&#125;)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">'你已添加&#123;&#125;到购物车，余额&#123;&#125;'</span>.format(goods[num-1][<span class="string">'name'</span>],money))</span><br><span class="line">                    <span class="built_in">print</span>(buy)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">'余额不足，请充值'</span>)</span><br><span class="line">                    <span class="built_in">continue</span></span><br><span class="line">        <span class="keyword">elif</span> num.upper()==<span class="string">'F'</span>:  <span class="comment">#返回到菜单页面</span></span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'没有该商品,请重新输入'</span>)</span><br><span class="line">    <span class="built_in">return</span> money,buy</span><br><span class="line"></span><br><span class="line">def chongzhi(money): <span class="comment">#充值</span></span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        money2=input(<span class="string">'请输入充值金额：'</span>)</span><br><span class="line">        <span class="keyword">if</span> money2.isdigit():</span><br><span class="line">            money2=int(money2)</span><br><span class="line">            money+=money2</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'你已成功充值，余额%d'</span>%money)</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'输入非法'</span>)</span><br><span class="line">            <span class="built_in">continue</span></span><br><span class="line">    <span class="built_in">return</span> money,money2</span><br><span class="line"></span><br><span class="line">def delete(buy): <span class="comment">#删除</span></span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        <span class="keyword">if</span> buy:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'购物车'</span>.center(30,<span class="string">'*'</span>))</span><br><span class="line">            <span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(buy,1):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'编号：&#123;&#125;\t商品:&#123;&#125;\t价格：&#123;&#125;'</span>.format(i,buy[i-1][<span class="string">'name'</span>],buy[i-1][<span class="string">'price'</span>]))</span><br><span class="line">            num1=input(<span class="string">'请输入要删除的商品编号：'</span>)</span><br><span class="line">            <span class="keyword">if</span> num1.isdigit():</span><br><span class="line">                num1=int(num1)</span><br><span class="line">                <span class="keyword">if</span> num1&lt;=len(buy):</span><br><span class="line">                    del buy[num1-1]</span><br><span class="line">                    <span class="comment"># money-=buy[num1-1]['price']</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">'删除成功'</span>)</span><br><span class="line">                    <span class="built_in">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">'没有该商品,请重新输入'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'输入有误，请重新输入'</span>)</span><br><span class="line">                <span class="built_in">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'购物车为空'</span>)</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">    <span class="built_in">return</span> buy</span><br><span class="line"></span><br><span class="line">def <span class="built_in">exit</span>(buy,money1): <span class="comment">#退出</span></span><br><span class="line">    <span class="keyword">if</span> buy:</span><br><span class="line">        <span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(buy,1):</span><br><span class="line">            money1+=j[<span class="string">'price'</span>]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'你购买了&#123;&#125;'</span>.format(j[<span class="string">'name'</span>]))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'结算%d'</span>%money1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'购物车为空'</span>)</span><br><span class="line"></span><br><span class="line">goods = [&#123;<span class="string">"name"</span>: <span class="string">"电脑"</span>, <span class="string">"price"</span>: 7999&#125;,</span><br><span class="line">         &#123;<span class="string">"name"</span>: <span class="string">"鼠标"</span>, <span class="string">"price"</span>: 100&#125;,</span><br><span class="line">         &#123;<span class="string">"name"</span>: <span class="string">"游艇"</span>, <span class="string">"price"</span>: 5000&#125;,</span><br><span class="line">         &#123;<span class="string">"name"</span>: <span class="string">"手机"</span>, <span class="string">"price"</span>: 1998&#125;]</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    money=input(<span class="string">'请输入你的资产：'</span>)</span><br><span class="line">    <span class="keyword">if</span> money.isdigit():</span><br><span class="line">        money=int(money)</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'输入有误'</span>)</span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">buy=[]</span><br><span class="line">money1=0</span><br><span class="line">flag=True</span><br><span class="line"><span class="keyword">while</span> flag: </span><br><span class="line">    menu=[<span class="string">'查询'</span>,<span class="string">'购买'</span>,<span class="string">'充值'</span>,<span class="string">'删除'</span>,<span class="string">'退出'</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'欢迎来到商场'</span>.center(30,<span class="string">'*'</span>))</span><br><span class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(menu,1):</span><br><span class="line">        <span class="built_in">print</span>(i,j)</span><br><span class="line">    n=input(<span class="string">'请选择相应操作序号:'</span>)</span><br><span class="line">    <span class="keyword">if</span> n.isdigit():</span><br><span class="line">        n=int(n)</span><br><span class="line">        <span class="keyword">if</span> n&lt;=len(menu):</span><br><span class="line">            <span class="keyword">if</span> n==1:</span><br><span class="line">                chaxun(goods)</span><br><span class="line">                <span class="built_in">continue</span></span><br><span class="line">            <span class="keyword">elif</span> n==2:</span><br><span class="line">                chaxun(goods)</span><br><span class="line">                shop(goods,money,buy)</span><br><span class="line">                <span class="built_in">continue</span></span><br><span class="line">            <span class="keyword">elif</span> n==3:</span><br><span class="line">                chongzhi(money)</span><br><span class="line">                <span class="built_in">continue</span></span><br><span class="line">            <span class="keyword">elif</span> n==4:</span><br><span class="line">                delete(buy)</span><br><span class="line">                <span class="built_in">continue</span></span><br><span class="line">            <span class="keyword">elif</span> n==5:</span><br><span class="line">                <span class="built_in">exit</span>(buy,money1)</span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'输入不符合规定'</span>)</span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行页面</span></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">请输入你的资产：10000</span></span><br><span class="line"><span class="string">************欢迎来到商场************</span></span><br><span class="line"><span class="string">1 查询</span></span><br><span class="line"><span class="string">2 购买</span></span><br><span class="line"><span class="string">3 充值</span></span><br><span class="line"><span class="string">4 删除</span></span><br><span class="line"><span class="string">5 退出</span></span><br><span class="line"><span class="string">请选择相应操作序号:3</span></span><br><span class="line"><span class="string">请输入充值金额：100</span></span><br><span class="line"><span class="string">你已成功充值，余额10100</span></span><br><span class="line"><span class="string">************欢迎来到商场************</span></span><br><span class="line"><span class="string">1 查询</span></span><br><span class="line"><span class="string">2 购买</span></span><br><span class="line"><span class="string">3 充值</span></span><br><span class="line"><span class="string">4 删除</span></span><br><span class="line"><span class="string">5 退出</span></span><br><span class="line"><span class="string">请选择相应操作序号:2</span></span><br><span class="line"><span class="string">*************欢迎购买*************</span></span><br><span class="line"><span class="string">商品编号:1      商品名称:电脑   商品价格:7999</span></span><br><span class="line"><span class="string">商品编号:2      商品名称:鼠标   商品价格:100</span></span><br><span class="line"><span class="string">商品编号:3      商品名称:游艇   商品价格:5000</span></span><br><span class="line"><span class="string">商品编号:4      商品名称:手机   商品价格:1998</span></span><br><span class="line"><span class="string">请输入购买的商品编号(返回请按F/f)：1</span></span><br><span class="line"><span class="string">你已添加电脑到购物车，余额2001</span></span><br><span class="line"><span class="string">[&#123;'</span>name<span class="string">': '</span>电脑<span class="string">', '</span>price<span class="string">': 7999&#125;]</span></span><br><span class="line"><span class="string">请输入购买的商品编号(返回请按F/f)：2</span></span><br><span class="line"><span class="string">你已添加鼠标到购物车，余额1901</span></span><br><span class="line"><span class="string">[&#123;'</span>name<span class="string">': '</span>电脑<span class="string">', '</span>price<span class="string">': 7999&#125;, &#123;'</span>name<span class="string">': '</span>鼠标<span class="string">', '</span>price<span class="string">': 100&#125;]</span></span><br><span class="line"><span class="string">请输入购买的商品编号(返回请按F/f)：f</span></span><br><span class="line"><span class="string">************欢迎来到商场************</span></span><br><span class="line"><span class="string">1 查询</span></span><br><span class="line"><span class="string">2 购买</span></span><br><span class="line"><span class="string">3 充值</span></span><br><span class="line"><span class="string">4 删除</span></span><br><span class="line"><span class="string">5 退出</span></span><br><span class="line"><span class="string">请选择相应操作序号:d</span></span><br><span class="line"><span class="string">输入不符合规定</span></span><br><span class="line"><span class="string">************欢迎来到商场************</span></span><br><span class="line"><span class="string">1 查询</span></span><br><span class="line"><span class="string">2 购买</span></span><br><span class="line"><span class="string">3 充值</span></span><br><span class="line"><span class="string">4 删除</span></span><br><span class="line"><span class="string">5 退出</span></span><br><span class="line"><span class="string">请选择相应操作序号:4</span></span><br><span class="line"><span class="string">*************购物车**************</span></span><br><span class="line"><span class="string">编号：1 商品:电脑       价格：7999</span></span><br><span class="line"><span class="string">编号：2 商品:鼠标       价格：100</span></span><br><span class="line"><span class="string">请输入要删除的商品编号：2</span></span><br><span class="line"><span class="string">删除成功</span></span><br><span class="line"><span class="string">************欢迎来到商场************</span></span><br><span class="line"><span class="string">1 查询</span></span><br><span class="line"><span class="string">2 购买</span></span><br><span class="line"><span class="string">3 充值</span></span><br><span class="line"><span class="string">4 删除</span></span><br><span class="line"><span class="string">5 退出</span></span><br><span class="line"><span class="string">请选择相应操作序号:5</span></span><br><span class="line"><span class="string">你购买了电脑</span></span><br><span class="line"><span class="string">结算7999</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">C:\Users\Administrator&gt;</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写一个购物车&quot;&gt;&lt;a href=&quot;#写一个购物车&quot; class=&quot;headerlink&quot; title=&quot;写一个购物车&quot;&gt;&lt;/a&gt;写一个购物车&lt;/h3&gt;&lt;p&gt;购物车&lt;br&gt;功能要求：&lt;br&gt;要求用户输入总资产，例如：2000&lt;br&gt;显示商品列表，让用户根据序号选择商品，加入购物车&lt;br&gt;购买，如果商品总额大于总资产，提示账户余额不足，否则，购买成功。&lt;br&gt;充值功能，删除功能，退出功能&lt;br&gt;
    
    </summary>
    
    
      <category term="fighting" scheme="http://yoursite.com/tags/fighting/"/>
    
  </entry>
  
  <entry>
    <title>省市级三级菜单</title>
    <link href="http://yoursite.com/2018/10/16/ti-03/"/>
    <id>http://yoursite.com/2018/10/16/ti-03/</id>
    <published>2018-10-16T11:14:33.856Z</published>
    <updated>2018-07-26T12:43:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="要求-打印省、市、县三级菜单-可返回上一级-可随时退出程序"><a href="#要求-打印省、市、县三级菜单-可返回上一级-可随时退出程序" class="headerlink" title="要求: 打印省、市、县三级菜单,可返回上一级,可随时退出程序"></a>要求: 打印省、市、县三级菜单,可返回上一级,可随时退出程序</h3><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">map=&#123;</span><br><span class="line">    <span class="string">'山东'</span>:&#123;</span><br><span class="line">        <span class="string">'青岛'</span> : [<span class="string">'四方'</span>,<span class="string">'黄岛'</span>,<span class="string">'崂山'</span>,<span class="string">'李沧'</span>,<span class="string">'城阳'</span>],</span><br><span class="line">        <span class="string">'济南'</span> : [<span class="string">'历城'</span>,<span class="string">'槐荫'</span>,<span class="string">'高新'</span>,<span class="string">'长青'</span>,<span class="string">'章丘'</span>],</span><br><span class="line">        <span class="string">'烟台'</span> : [<span class="string">'龙口'</span>,<span class="string">'莱山'</span>,<span class="string">'牟平'</span>,<span class="string">'蓬莱'</span>,<span class="string">'招远'</span>]&#125;,</span><br><span class="line">     <span class="string">'江苏'</span>:&#123;</span><br><span class="line">         <span class="string">'苏州'</span> : [<span class="string">'沧浪'</span>,<span class="string">'相城'</span>,<span class="string">'平江'</span>,<span class="string">'吴中'</span>,<span class="string">'昆山'</span>],</span><br><span class="line">         <span class="string">'南京'</span> : [<span class="string">'白下'</span>,<span class="string">'秦淮'</span>,<span class="string">'浦口'</span>,<span class="string">'栖霞'</span>,<span class="string">'江宁'</span>],</span><br><span class="line">       <span class="string">'无锡'</span> : [<span class="string">'崇安'</span>,<span class="string">'南长'</span>,<span class="string">'北塘'</span>,<span class="string">'锡山'</span>,<span class="string">'江阴'</span>]&#125;,</span><br><span class="line">     <span class="string">'浙江'</span>:&#123;</span><br><span class="line">         <span class="string">'杭州'</span> : [<span class="string">'西湖'</span>,<span class="string">'江干'</span>,<span class="string">'下城'</span>,<span class="string">'上城'</span>,<span class="string">'滨江'</span>],</span><br><span class="line">         <span class="string">'宁波'</span> : [<span class="string">'海曙'</span>,<span class="string">'江东'</span>,<span class="string">'江北'</span>,<span class="string">'镇海'</span>,<span class="string">'余姚'</span>],</span><br><span class="line">         <span class="string">'温州'</span> : [<span class="string">'鹿城'</span>,<span class="string">'龙湾'</span>,<span class="string">'乐清'</span>,<span class="string">'瑞安'</span>,<span class="string">'永嘉'</span>]&#125;,</span><br><span class="line">     <span class="string">'安徽'</span>:&#123;</span><br><span class="line">         <span class="string">'合肥'</span> : [<span class="string">'蜀山'</span>,<span class="string">'庐阳'</span>,<span class="string">'包河'</span>,<span class="string">'经开'</span>,<span class="string">'新站'</span>],</span><br><span class="line">         <span class="string">'芜湖'</span> : [<span class="string">'镜湖'</span>,<span class="string">'鸠江'</span>,<span class="string">'无为'</span>,<span class="string">'三山'</span>,<span class="string">'南陵'</span>],</span><br><span class="line">         <span class="string">'蚌埠'</span> : [<span class="string">'蚌山'</span>,<span class="string">'龙子湖'</span>,<span class="string">'淮上'</span>,<span class="string">'怀远'</span>,<span class="string">'固镇'</span>]&#125;,</span><br><span class="line">     <span class="string">'广东'</span>:&#123;</span><br><span class="line">         <span class="string">'深圳'</span> : [<span class="string">'罗湖'</span>,<span class="string">'福田'</span>,<span class="string">'南山'</span>,<span class="string">'宝安'</span>,<span class="string">'布吉'</span>],</span><br><span class="line">         <span class="string">'广州'</span> : [<span class="string">'天河'</span>,<span class="string">'珠海'</span>,<span class="string">'越秀'</span>,<span class="string">'白云'</span>,<span class="string">'黄埔'</span>],</span><br><span class="line">         <span class="string">'东莞'</span> : [<span class="string">'莞城'</span>,<span class="string">'长安'</span>,<span class="string">'虎门'</span>,<span class="string">'万江'</span>,<span class="string">'大朗'</span>]&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">province=list(map.keys())   <span class="comment">#省列表</span></span><br><span class="line">flag=True</span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'省'</span>.center(30,<span class="string">'*'</span>))</span><br><span class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(province,1): </span><br><span class="line">        <span class="built_in">print</span>(i,j)</span><br><span class="line">    sheng=input(<span class="string">'请选择要查看的省份相对应序号（退出按Q/q)：'</span>)</span><br><span class="line">    <span class="keyword">if</span> sheng.isdigit():</span><br><span class="line">        sheng=int(sheng)</span><br><span class="line">        <span class="keyword">if</span> sheng&lt;=len(province):</span><br><span class="line">            shi=list(map[province[sheng-1]].keys())  <span class="comment">#获取市级列表</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'输入超出编号范围'</span>)</span><br><span class="line">            <span class="built_in">continue</span></span><br><span class="line">          </span><br><span class="line">    <span class="keyword">elif</span> sheng.upper()==<span class="string">'Q'</span>:  <span class="comment">#退出</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'exit'</span>)</span><br><span class="line">        flag=False</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'输入错误，请重新输入'</span>)</span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">while</span> flag:  <span class="comment">#进入市级菜单</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'市'</span>.center(30,<span class="string">'*'</span>))</span><br><span class="line">        shi=list(map[province[sheng-1]].keys())</span><br><span class="line">        <span class="keyword">for</span> k,l <span class="keyword">in</span> enumerate(shi,1): </span><br><span class="line">            <span class="built_in">print</span>(k,l)</span><br><span class="line">        xian=input(<span class="string">'请选择要查看的市对应的序号（返回上一级按F/f,退出按Q/q):'</span>)</span><br><span class="line">        <span class="keyword">if</span> xian.isdigit():</span><br><span class="line">            xian=int(xian)</span><br><span class="line">            <span class="keyword">if</span> xian&lt;=len(shi):</span><br><span class="line">                town=list(map[province[sheng-1]][shi[xian-1]]) <span class="comment">#获取县级列表</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'编号超出范围，请重新输入'</span>)</span><br><span class="line">                <span class="built_in">continue</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">elif</span> xian.upper()==<span class="string">'F'</span>:  <span class="comment">#返回到省级菜单</span></span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">        <span class="keyword">elif</span> xian.upper()==<span class="string">'Q'</span>:  <span class="comment">#退出程序</span></span><br><span class="line">            flag=False</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'输入错误，请重新输入'</span>)</span><br><span class="line">            <span class="built_in">continue</span></span><br><span class="line">        <span class="keyword">while</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'县'</span>.center(30,<span class="string">'*'</span>))  <span class="comment">#进入县级菜单</span></span><br><span class="line">            town=list(map[province[sheng-1]][shi[xian-1]])</span><br><span class="line">            <span class="keyword">for</span> j,q <span class="keyword">in</span> enumerate(town,1): </span><br><span class="line">                <span class="built_in">print</span>(j,q)</span><br><span class="line">            s=input(<span class="string">'返回上一级按F/f:'</span>)</span><br><span class="line">            <span class="keyword">if</span> s.upper()==<span class="string">'F'</span>:  <span class="comment">#返回到市级菜单</span></span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">            <span class="keyword">elif</span> s.upper()==<span class="string">'Q'</span>: <span class="comment">#退出程序</span></span><br><span class="line">                flag=False</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'输入非法'</span>)</span><br><span class="line"><span class="comment">#执行结果</span></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">**************省***************</span></span><br><span class="line"><span class="string">1 山东</span></span><br><span class="line"><span class="string">2 江苏</span></span><br><span class="line"><span class="string">3 浙江</span></span><br><span class="line"><span class="string">4 安徽</span></span><br><span class="line"><span class="string">5 广东</span></span><br><span class="line"><span class="string">请选择要查看的省份相对应序号（退出按Q/q)：w</span></span><br><span class="line"><span class="string">输入错误，请重新输入</span></span><br><span class="line"><span class="string">**************省***************</span></span><br><span class="line"><span class="string">1 山东</span></span><br><span class="line"><span class="string">2 江苏</span></span><br><span class="line"><span class="string">3 浙江</span></span><br><span class="line"><span class="string">4 安徽</span></span><br><span class="line"><span class="string">5 广东</span></span><br><span class="line"><span class="string">请选择要查看的省份相对应序号（退出按Q/q)：3</span></span><br><span class="line"><span class="string">**************市***************</span></span><br><span class="line"><span class="string">1 杭州</span></span><br><span class="line"><span class="string">2 宁波</span></span><br><span class="line"><span class="string">3 温州</span></span><br><span class="line"><span class="string">请选择要查看的市对应的序号（返回上一级</span></span><br><span class="line"><span class="string">按F/f,退出按Q/q):1</span></span><br><span class="line"><span class="string">**************县***************</span></span><br><span class="line"><span class="string">1 西湖</span></span><br><span class="line"><span class="string">2 江干</span></span><br><span class="line"><span class="string">3 下城</span></span><br><span class="line"><span class="string">4 上城</span></span><br><span class="line"><span class="string">5 滨江</span></span><br><span class="line"><span class="string">返回上一级按F/f:f</span></span><br><span class="line"><span class="string">**************市***************</span></span><br><span class="line"><span class="string">1 杭州</span></span><br><span class="line"><span class="string">2 宁波</span></span><br><span class="line"><span class="string">3 温州</span></span><br><span class="line"><span class="string">请选择要查看的市对应的序号（返回上一级</span></span><br><span class="line"><span class="string">按F/f,退出按Q/q):q</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">C:\Users\Administrator&gt;</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure><h3 id="另一种写法："><a href="#另一种写法：" class="headerlink" title="另一种写法："></a>另一种写法：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">province=list(map.keys())</span><br><span class="line">flag=True</span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'省'</span>.center(30,<span class="string">'*'</span>))</span><br><span class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(province,1): </span><br><span class="line">        <span class="built_in">print</span>(i,j)</span><br><span class="line">    sheng=input(<span class="string">'请选择要查看的省份相对应序号（退出按Q/q)：'</span>)</span><br><span class="line">    <span class="keyword">if</span> sheng.isdigit():</span><br><span class="line">        sheng=int(sheng)</span><br><span class="line">        <span class="keyword">if</span> sheng&lt;=len(province):</span><br><span class="line">            <span class="keyword">while</span> flag:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'市'</span>.center(30,<span class="string">'*'</span>))</span><br><span class="line">                shi=list(map[province[sheng-1]].keys())</span><br><span class="line">                <span class="keyword">for</span> k,l <span class="keyword">in</span> enumerate(shi,1): </span><br><span class="line">                    <span class="built_in">print</span>(k,l)</span><br><span class="line">                xian=input(<span class="string">'请选择要查看的市对应的序号（返回上一级按F/f,退出按Q/q):'</span>)</span><br><span class="line">                <span class="keyword">if</span> xian.isdigit():</span><br><span class="line">                    xian=int(xian)</span><br><span class="line">                    <span class="keyword">if</span> xian&lt;=len(shi):</span><br><span class="line">                        <span class="keyword">while</span> flag:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">'县'</span>.center(30,<span class="string">'*'</span>))</span><br><span class="line">                            town=list(map[province[sheng-1]][shi[xian-1]])</span><br><span class="line">                            <span class="keyword">for</span> j,q <span class="keyword">in</span> enumerate(town,1): </span><br><span class="line">                                <span class="built_in">print</span>(j,q)</span><br><span class="line">                            s=input(<span class="string">'返回上一级按F/f,退出按Q/q:'</span>)</span><br><span class="line">                            <span class="keyword">if</span> s.upper()==<span class="string">'F'</span>:</span><br><span class="line">                                <span class="built_in">break</span></span><br><span class="line">                            <span class="keyword">elif</span> s.upper()==<span class="string">'Q'</span>:</span><br><span class="line">                                flag=False</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                <span class="built_in">print</span>(<span class="string">'输入错误，请重新输入'</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">'编号超出范围，请重新输入'</span>)</span><br><span class="line">                <span class="keyword">elif</span> xian.upper()==<span class="string">'F'</span>:</span><br><span class="line">                    <span class="built_in">break</span></span><br><span class="line">                <span class="keyword">elif</span> xian.upper()==<span class="string">'Q'</span>:</span><br><span class="line">                    flag=False</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">'输入不合法'</span>)</span><br><span class="line">                    <span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'输入超出编号范围'</span>)</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">elif</span> sheng.upper()==<span class="string">'Q'</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'exit'</span>)</span><br><span class="line">        flag=False</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'输入错误，请重新输入'</span>)</span><br><span class="line">        <span class="built_in">continue</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;要求-打印省、市、县三级菜单-可返回上一级-可随时退出程序&quot;&gt;&lt;a href=&quot;#要求-打印省、市、县三级菜单-可返回上一级-可随时退出程序&quot; class=&quot;headerlink&quot; title=&quot;要求: 打印省、市、县三级菜单,可返回上一级,可随时退出程序&quot;&gt;&lt;/a&gt;要求: 打印省、市、县三级菜单,可返回上一级,可随时退出程序&lt;/h3&gt;
    
    </summary>
    
    
      <category term="fighting" scheme="http://yoursite.com/tags/fighting/"/>
    
  </entry>
  
  <entry>
    <title>网络爬虫基础03——BeautifulSoup</title>
    <link href="http://yoursite.com/2018/10/16/python_p3/"/>
    <id>http://yoursite.com/2018/10/16/python_p3/</id>
    <published>2018-10-16T11:14:33.825Z</published>
    <updated>2018-08-27T13:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BeautifulSoup-基本使用"><a href="#BeautifulSoup-基本使用" class="headerlink" title="BeautifulSoup 基本使用"></a>BeautifulSoup 基本使用</h2><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于解析HTML文档内容的第三方库</span></span><br><span class="line">from bs4 import BeautifulSoup as bs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化html内容</span></span><br><span class="line"><span class="string">''</span><span class="string">'BeautifulSoup 基本使用'</span><span class="string">''</span></span><br><span class="line"><span class="string">''</span><span class="string">'用于解析 HTML文档内容的第三方库'</span><span class="string">''</span></span><br><span class="line">from bs4 import BeautifulSoup as bs</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'初始化 html 内容'</span><span class="string">''</span></span><br><span class="line">html = <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;这是标题The Dormouse'</span>s story&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p class=<span class="string">""</span>&gt;</span><br><span class="line">       </span><br><span class="line">            &lt;a href=<span class="string">"baid"</span>&gt;百度1下&lt;/a&gt;</span><br><span class="line">            &lt;a href=<span class="string">"baid"</span>&gt;百度2下&lt;/a&gt;</span><br><span class="line">            &lt;a href=<span class="string">"baid"</span>&gt;百度3下&lt;/a&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!--这就是注释--&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;p class=<span class="string">"title title1"</span> style=<span class="string">""</span>&gt;1234567&lt;b&gt;The Dormouse<span class="string">'s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">    &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">    &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">    &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">    and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;p class="story title"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-abc='</span>abc<span class="string">' class="item item1"&gt;第1项&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item item1 item2"&gt;第2项sisters&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-123='</span>abc<span class="string">' class="item item1 item3"&gt;第3项&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item item2 item1"&gt;第4项&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-abc='</span>abcd<span class="string">' class="item"&gt;第5项&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item"&gt;第6项sisters&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item"&gt;第7项&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item"&gt;第8项&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item"&gt;第9项&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li class="item"&gt;第10项&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'初始化 bs4 的对象'</span><span class="string">''</span></span><br><span class="line">soup = bs(html, <span class="string">'html.parser'</span>)</span><br><span class="line"><span class="string">''</span><span class="string">'通过 .prettify() 可以得到一个整理之后规范的标准的HTML文档'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(soup.prettify())</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'实例化后的 BeautifulSoup 对象将 HTML文档装换成一个 虚拟DOM树</span></span><br><span class="line"><span class="string">树的分支点称之为 节点，每一个节点都是一个python对象</span></span><br><span class="line"><span class="string">一共有4种对象'</span><span class="string">''</span></span><br><span class="line"><span class="string">''</span><span class="string">'1.Tag 标签对象</span></span><br><span class="line"><span class="string">Tag 与HTML 原生文档中的 标签名字相同  tag==标签'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(soup.title)</span><br><span class="line"><span class="built_in">print</span>(soup.p)</span><br><span class="line"><span class="built_in">print</span>(soup.a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(soup.a))</span><br><span class="line"><span class="string">''</span><span class="string">'首先通过BS类的实例 soup.tag的形式 选取 对应的标签的名称</span></span><br><span class="line"><span class="string">只能选中对应标签中的 第一个</span></span><br><span class="line"><span class="string">Tag 中重要的属性有2个  name，attributes'</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'Name 每一个Tag都有自己的名字，通过 .name 进行获取'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(soup.p.name)</span><br><span class="line"><span class="string">''</span><span class="string">'bs也可以通过 name 修改对应的 name  无意义'</span><span class="string">''</span></span><br><span class="line">soup.p.name = <span class="string">'div'</span></span><br><span class="line"><span class="built_in">print</span>(soup.prettify())</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'Attributes 属性 对等的是 HTML元素的 行内属性 比如 id class'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(soup.p[<span class="string">'class'</span>])</span><br><span class="line"><span class="built_in">print</span>(soup.p.attrs)</span><br><span class="line"><span class="built_in">print</span>(soup.a.sttrs)</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'2.NavigableString  获取标签的内容'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(soup.head.string)</span><br><span class="line"><span class="built_in">print</span>(soup.title.string)</span><br><span class="line"><span class="built_in">print</span>(soup.p.string)</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'3.遍历文档树'</span><span class="string">''</span></span><br><span class="line"><span class="string">''</span><span class="string">'3.1字节点</span></span><br><span class="line"><span class="string">通过 Tag 的name 来遍历'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(soup.head.title)</span><br><span class="line"><span class="built_in">print</span>(soup.p.b)</span><br><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="string">'a'</span>))</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> soup.find_all(<span class="string">'li'</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(item))</span><br><span class="line">    <span class="built_in">print</span>(item.attrs)</span><br><span class="line">    <span class="built_in">print</span>(item.string)</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'3.2 .contents 和 .children</span></span><br><span class="line"><span class="string">这2个属性仅包括tag 的直接子节点'</span><span class="string">''</span></span><br><span class="line"><span class="string">''</span><span class="string">'.contents 属性可以将tag的子节点以列表的方式输出'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(soup.html.contents)</span><br><span class="line"><span class="string">''</span><span class="string">'.children 属性可以将tag 的子节点以迭代器的方式输出'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(soup.html.children)</span><br><span class="line"><span class="keyword">for</span> index, child <span class="keyword">in</span> enumerate(soup.html.children):</span><br><span class="line">    <span class="built_in">print</span>(index, child)</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'.descendants 属性可以对 tag 下所有的子孙节点进行递归遍历'</span><span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> index, child <span class="keyword">in</span> enumerate(soup.html.descendants):</span><br><span class="line">    <span class="built_in">print</span>(index, child)</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'3.3 .parents 父辈节点'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.parents)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> soup.a.parents:</span><br><span class="line">    <span class="keyword">if</span> item is None:</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(item.name)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(soup.name)</span><br><span class="line"><span class="string">''</span><span class="string">'.parent 父节点'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(soup.a.parent)</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'3.4 兄弟节点'</span><span class="string">''</span></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">.next_sibling 和 .previous_sibling</span></span><br><span class="line"><span class="string">都是 往下 或者往上 各找一个</span></span><br><span class="line"><span class="string">.next_siblings 和 .previous_siblings</span></span><br><span class="line"><span class="string">都会生成一个迭代器，分别对遍历的方向的元素进行迭代 直到找不到为止</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> soup.li.next_siblings:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'item'</span>, repr(item))</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'4 过滤器'</span><span class="string">''</span></span><br><span class="line"><span class="string">''</span><span class="string">'4.1 字符串过滤'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(soup.div.p.find_all(<span class="string">'a'</span>))</span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(soup.div.p.find_all(<span class="string">'a'</span>)):</span><br><span class="line">    <span class="built_in">print</span>(index, item)</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'4.2 正则表达式'</span><span class="string">''</span></span><br><span class="line">import re</span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(re.compile(<span class="string">"^b"</span>)):</span><br><span class="line">    <span class="built_in">print</span>(tag.name)</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'对文档中所有的文字内容进行正则匹配'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(soup.find(text=re.compile(<span class="string">'sisters'</span>)))</span><br><span class="line"><span class="built_in">print</span>(soup.find_all(text=re.compile(<span class="string">'sisters'</span>)))</span><br><span class="line"><span class="string">''</span><span class="string">'对文档中所有的属性中指定的属性进行正则'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(href=re.compile(<span class="string">'elsie'</span>), id=<span class="string">'link1'</span>, class_=<span class="string">'sister'</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'对特殊的属性的匹配 例如： html5的新属性 data-*'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(attrs=&#123;<span class="string">'data-abc'</span>: <span class="string">'abc'</span>&#125;))</span><br><span class="line"><span class="built_in">print</span>(soup.find_all(attrs=&#123;<span class="string">'data-abc'</span>: re.compile(<span class="string">'^abc+'</span>)&#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'4.3 列表方式'</span><span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all([<span class="string">'a'</span>, <span class="string">'b'</span>]):</span><br><span class="line">    <span class="built_in">print</span>(tag.name, tag.string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(<span class="string">'p'</span>, <span class="string">'title'</span>):</span><br><span class="line">    <span class="built_in">print</span>(tag.name, tag.string)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(<span class="string">'p'</span>, <span class="string">'story'</span>, <span class="built_in">limit</span>=1):</span><br><span class="line">    <span class="built_in">print</span>(tag.name, tag.string)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> tag.find_all(<span class="string">'a'</span>):</span><br><span class="line">        <span class="built_in">print</span>(item.name, item.string)</span><br><span class="line"></span><br><span class="line"><span class="string">''</span><span class="string">'find() 查找当前 匹配条件满足的第一个元素'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(soup.find(id=<span class="string">'link1'</span>))</span><br><span class="line"><span class="string">''</span><span class="string">'id=True 表示 找到带有 id 属性 的元素，并且id值是有效的'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(soup.find(id=True))</span><br><span class="line"><span class="built_in">print</span>(soup.find_all(id=True))</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">''</span><span class="string">'4.4 按CSS 的属性进行过滤</span></span><br><span class="line"><span class="string">此方式是bs4 版本之后的方式 引入一个关键字 class_'</span><span class="string">''</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(class_=<span class="string">'item item1'</span>))</span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span><span class="string">'获取百度词条'</span><span class="string">''</span></span><br><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup as bs</span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64)'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url_string = r<span class="string">'http://www.baidu.com'</span></span><br><span class="line">response = requests.get(url_string, headers=header)</span><br><span class="line">html = response.content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">soup = bs(html, <span class="string">'html.parser'</span>)</span><br><span class="line"><span class="comment">#print(soup.prettify())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(soup.find_all('a'))</span></span><br><span class="line"><span class="built_in">print</span>(soup.find(id=<span class="string">'u1'</span>))</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> soup.find(id=<span class="string">'u1'</span>):</span><br><span class="line">    <span class="built_in">print</span>(item.string)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import xlwt</span><br><span class="line">from bs4 import BeautifulSoup as bs</span><br><span class="line"></span><br><span class="line">def get_data(url_string, header):</span><br><span class="line">    response = requests.get(url_string, headers=header)</span><br><span class="line">    html = response.content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    soup = bs(html, <span class="string">'html.parser'</span>)</span><br><span class="line">    <span class="comment">#print(soup.prettify())</span></span><br><span class="line"></span><br><span class="line">    title = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> soup.find_all(<span class="string">'th'</span>, <span class="built_in">limit</span>=4):</span><br><span class="line">        title.append(item.string)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> soup.find(id=<span class="string">"select-indicator-type"</span>):</span><br><span class="line">        <span class="keyword">if</span> item.string != <span class="string">'\n'</span>:</span><br><span class="line">            title.append(item.string)</span><br><span class="line">    <span class="comment">#print(title)</span></span><br><span class="line"></span><br><span class="line">    data_list = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> soup.find_all(<span class="string">'tr'</span>, <span class="string">'alt'</span>):</span><br><span class="line">        listz = []</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> item.find_all(<span class="string">'td'</span>):</span><br><span class="line">            listz.append(data.string)</span><br><span class="line">        data_list.append(listz)</span><br><span class="line">    <span class="comment">#print(data_list)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    workbook = xlwt.Workbook()</span><br><span class="line">    data_sheet = workbook.add_sheet(<span class="string">'college600.xls'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(title)):</span><br><span class="line">        data_sheet.write(0, i, title[i])</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> range(len(data_list)):</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> range(len(data_list[m])):</span><br><span class="line">            data_sheet.write(m+1, n, data_list[m][n])</span><br><span class="line">    workbook.save(<span class="string">'college600.xls'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64)'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    url_string = r<span class="string">'http://www.zuihaodaxue.cn/zuihaodaxuepaiming2018.html'</span></span><br><span class="line">    get_data(url_string, header)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;BeautifulSoup-基本使用&quot;&gt;&lt;a href=&quot;#BeautifulSoup-基本使用&quot; class=&quot;headerlink&quot; title=&quot;BeautifulSoup 基本使用&quot;&gt;&lt;/a&gt;BeautifulSoup 基本使用&lt;/h2&gt;
    
    </summary>
    
    
      <category term="pachong" scheme="http://yoursite.com/tags/pachong/"/>
    
  </entry>
  
  <entry>
    <title>网络爬虫基础02——url和requests的基本用法</title>
    <link href="http://yoursite.com/2018/10/16/python_p2/"/>
    <id>http://yoursite.com/2018/10/16/python_p2/</id>
    <published>2018-10-16T11:14:33.804Z</published>
    <updated>2018-08-27T12:52:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="url-的基本用法"><a href="#url-的基本用法" class="headerlink" title="url 的基本用法"></a>url 的基本用法</h2><p>urllib 是python自带的请求类库，方便开发者进行HTTP/HTTPS请求<br>功能比较简单，用法单一，<br>目前最新的版本是urllib3 = urllib1 + urllib2<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入urllib库</span></span><br><span class="line">import urllib</span><br><span class="line">from urllib import request</span><br><span class="line"><span class="built_in">print</span>(dir(urllib))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(urllib))</span><br><span class="line"><span class="built_in">print</span>(dir(request))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(request))</span><br><span class="line"></span><br><span class="line">url_sstring = r<span class="string">'http://www.baidu.com'</span></span><br><span class="line"><span class="comment"># urlopen() 完成http请求的方法</span></span><br><span class="line"><span class="comment"># url参数必填</span></span><br><span class="line">response = request.urlopen(url_sstring)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response))</span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dir(response):</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="comment"># getcode() 获取状态响应码</span></span><br><span class="line"><span class="built_in">print</span>(response.getcode())</span><br><span class="line"><span class="comment"># reason 获取状态刷新标识</span></span><br><span class="line"><span class="built_in">print</span>(response.reason, response.status)</span><br><span class="line"><span class="comment"># getheaders() 获取响应报文中的首部信息</span></span><br><span class="line"><span class="comment"># print(response.getheaders())  #获得响应头</span></span><br><span class="line"><span class="comment"># print(response.getheader('server'))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line"><span class="comment"># info() 以字典的形式 获取响应报文中首部信息</span></span><br><span class="line">info = response.info()</span><br><span class="line"><span class="built_in">print</span>(info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="comment"># read() 获取响应数据中的body(数据内容)</span></span><br><span class="line">data = response.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">baidu = open(<span class="string">'index.html'</span>,<span class="string">'w+'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">baidu.write(data)</span><br><span class="line">baidu.close()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure></p><h2 id="urllib-进阶"><a href="#urllib-进阶" class="headerlink" title="urllib 进阶"></a>urllib 进阶</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request,parse,error</span><br><span class="line">import json</span><br><span class="line"><span class="comment"># 引入超时机制</span></span><br><span class="line">import socket</span><br><span class="line"><span class="comment"># 认证处理 HTTPS SSL 认证</span></span><br><span class="line">import ssl</span><br><span class="line">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line">url_string = r<span class="string">'http://httpbin.org'</span></span><br><span class="line"><span class="comment"># GET</span></span><br><span class="line">with request.urlopen(url_string + <span class="string">'/headers'</span>) as f:</span><br><span class="line">    <span class="keyword">if</span> f.status == 200:</span><br><span class="line">        data = f.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line">        <span class="built_in">print</span>(json.loads(data))</span><br><span class="line">        <span class="comment"># 响应的头部信息</span></span><br><span class="line">        <span class="built_in">print</span>(f.info())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带参数的GET</span></span><br><span class="line">with request.urlopen(<span class="string">'http://baidu.com/s?wd=docker'</span>) as f1:</span><br><span class="line">    <span class="keyword">if</span> f1.status == 200:</span><br><span class="line">        data = f1.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># POST</span></span><br><span class="line"><span class="comment"># 配置参数</span></span><br><span class="line">parmes = parse.urlencode(&#123;<span class="string">'uname'</span>:<span class="string">'弘历'</span>&#125;).encode(<span class="string">'utf-8'</span>)</span><br><span class="line">with request.urlopen(url_string + <span class="string">'/post'</span>, data=parmes, timeout=1) as f2:</span><br><span class="line">    <span class="keyword">if</span> f2.status == 200:</span><br><span class="line">        data = f2.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        json_obj = json.loads(data)</span><br><span class="line">        <span class="built_in">print</span>(json_obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误处理机制</span></span><br><span class="line">try:</span><br><span class="line">    with request.urlopen(url_string + <span class="string">'/post'</span>, data=parmes, timeout=0.1) as f:</span><br><span class="line">        <span class="keyword">if</span> f.status == 200:</span><br><span class="line">            data = f.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">            <span class="built_in">print</span>(data)</span><br><span class="line">except error.URLError as err:</span><br><span class="line">    <span class="keyword">if</span> isinstance(err.reason, socket.timeout):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Time out'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬虫伪装</span></span><br><span class="line">url_string = r<span class="string">'http://httpbin.org'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Host'</span>:<span class="string">'httpbin.org'</span>,</span><br><span class="line">&#125;</span><br><span class="line">req = request.Request(url_string + <span class="string">'/headers'</span>, headers=headers)</span><br><span class="line">with request.urlopen(req) as f:</span><br><span class="line">    data = f.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="built_in">print</span>(json.loads(data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url_string = r<span class="string">'https://www.python.org'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Host'</span>:<span class="string">'www.python.org'</span>,</span><br><span class="line">&#125;</span><br><span class="line">req = request.Request(url_string, headers=headers)</span><br><span class="line">with request.urlopen(req) as f:</span><br><span class="line">    data = f.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># robots.txt</span></span><br><span class="line">from urllib import robotparser</span><br><span class="line">url_string = r<span class="string">'https://www.douban.com'</span></span><br><span class="line">user_agent = <span class="string">'Other Spider'</span></span><br><span class="line">rp = robotparser.RobotFileParser()</span><br><span class="line">wsp_info = rp.can_fetch(user_agent,url_string)</span><br><span class="line"><span class="built_in">print</span>(wsp_info)</span><br></pre></td></tr></table></figure><h2 id="requests-基本使用方式"><a href="#requests-基本使用方式" class="headerlink" title="requests 基本使用方式"></a>requests 基本使用方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"><span class="comment"># GET请求</span></span><br><span class="line">response = requests.get(r<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response))</span><br><span class="line"><span class="comment"># print(dir(response))</span></span><br><span class="line"><span class="comment"># 服务器返回的状态码  状态信息</span></span><br><span class="line"><span class="built_in">print</span>(response.status_code, response.reason)</span><br><span class="line"><span class="comment"># cookie 信息</span></span><br><span class="line"><span class="built_in">print</span>(response.cookies)</span><br><span class="line"><span class="comment"># text 获取到的响应数据</span></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># requests 各种请求方式</span></span><br><span class="line"><span class="comment"># requests.post()</span></span><br><span class="line"><span class="comment"># requests.put()</span></span><br><span class="line"><span class="comment"># requests.delete()</span></span><br><span class="line"><span class="comment"># requests.head()</span></span><br><span class="line"><span class="comment"># requests.options()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GET 基本请求</span></span><br><span class="line">url_string = r<span class="string">'http://httpbin.org'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带参数</span></span><br><span class="line">url_string = url_string + <span class="string">'/get?uname=IG.wxz&amp;usex=男'</span></span><br><span class="line">response = requests.get(url_string)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带参数的第二种写法</span></span><br><span class="line">url_string = r<span class="string">'http://httpbin.org'</span></span><br><span class="line">parms = &#123;</span><br><span class="line">    <span class="string">'uname'</span>:<span class="string">'王者荣耀'</span>,</span><br><span class="line">    <span class="string">'usex'</span>:4</span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url_string + <span class="string">'/get'</span>,params=parms)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line">url_string = r<span class="string">'https://douban.uieee.com/v2/movie/in_theaters'</span></span><br><span class="line">response = requests.get(url_string)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="built_in">print</span>(response.json())</span><br><span class="line">obj = response.json()</span><br><span class="line">move_list = obj[<span class="string">'subjects'</span>]</span><br><span class="line"><span class="built_in">print</span>(move_list)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> move_list:</span><br><span class="line">    <span class="built_in">print</span>(item[<span class="string">'title'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取二进制数据流</span></span><br><span class="line"><span class="comment"># http://www.baidu.com/favicon.ico</span></span><br><span class="line">response = requests.get(r<span class="string">'http://www.baidu.com/favicon.ico'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># .text 不能用来保存，因为 .text 是是普通的字符数据，只用作数据分析</span></span><br><span class="line"><span class="comment"># print(response.text)</span></span><br><span class="line"><span class="comment"># .content 才是真正的字节流数据，才是保存文件的内容</span></span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br><span class="line">with open(<span class="string">'favicon.ico'</span>,<span class="string">'wb'</span>) as f:</span><br><span class="line">    f.write(response.content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加headers</span></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">url_string = r<span class="string">'http://httpbin.org'</span></span><br><span class="line">response = requests.get(url_string + <span class="string">'/headers'</span>, headers=header)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># POST</span></span><br><span class="line">parms = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'Jack Ma'</span>,</span><br><span class="line">    <span class="string">'work'</span>: <span class="string">'CEO'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url_string + <span class="string">'/post'</span>, data = parms, headers = header)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 响应response属性</span></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(r<span class="string">'http://www.jianshu.com'</span>, headers = header)</span><br><span class="line"><span class="built_in">print</span>(response.status_code, response.reason)</span><br><span class="line"><span class="built_in">print</span>(response.headers)</span><br><span class="line"><span class="built_in">print</span>(response.cookies)</span><br><span class="line"><span class="built_in">print</span>(response.url)</span><br><span class="line"><span class="built_in">print</span>(response.history)</span><br><span class="line"></span><br><span class="line"><span class="comment"># requests 异常处理机制</span></span><br><span class="line"><span class="comment"># 异常1： 非HTTP错误 (1xx - 5xx)</span></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(r<span class="string">'http://www.jianshu.com/404.html'</span>, headers=header)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="keyword">if</span> not response.status_code == requests.codes.ok:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"404-1"</span>)</span><br><span class="line"></span><br><span class="line">response = requests.get(r<span class="string">'http://www.jianshu.com'</span>, headers = header)</span><br><span class="line"><span class="keyword">if</span> response.status_code == requests.codes.ok:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'200'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异常2：请求超时，连接失败，代码错误</span></span><br><span class="line">from requests.exceptions import ReadTimeout, ConnectionError, RequestException</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    response = requests.get(r<span class="string">'http://httpbin.org/get2'</span>, timeout=1)</span><br><span class="line">    <span class="built_in">print</span>(response.status_code)</span><br><span class="line">except ReadTimeout:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Time Out"</span>)</span><br><span class="line">except ConnectionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Connection Error"</span>)</span><br><span class="line">except RequestException:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Request Error"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件上传</span></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">url_string = r<span class="string">'http://httpbin.org'</span></span><br><span class="line">file = &#123;</span><br><span class="line">    <span class="string">'file'</span>: open(<span class="string">'favicon.ico'</span>, <span class="string">'rb'</span>)</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url_string + <span class="string">'/post'</span>, headers = header, files = file)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 证书验证</span></span><br><span class="line"><span class="comment"># 无证书验证</span></span><br><span class="line">response = requests.get(r<span class="string">'http://www.12306.cn'</span>, headers = header)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="comment"># 关闭证书验证 就算关闭了还是会警告</span></span><br><span class="line">response = requests.get(r<span class="string">'http://www.12306.cn'</span>, headers = header, verify=False)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="comment"># 消除关闭证书验证的警告</span></span><br></pre></td></tr></table></figure><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import urllib</span><br><span class="line">from urllib import request</span><br><span class="line">import json</span><br><span class="line">import xlwt</span><br><span class="line">url_string = r<span class="string">'https://douban.uieee.com/v2/movie/in_theaters'</span></span><br><span class="line">response = request.urlopen(url_string)</span><br><span class="line">data = response.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">obj = json.loads(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">move_list = obj[<span class="string">'subjects'</span>]</span><br><span class="line"></span><br><span class="line">excel_list = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> move_list:</span><br><span class="line">    list1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> item[<span class="string">'casts'</span>]:</span><br><span class="line">        list1.append(i[<span class="string">'name'</span>])</span><br><span class="line">    excel_list.append([item[<span class="string">'title'</span>], item[<span class="string">'directors'</span>][0][<span class="string">'name'</span>], item[<span class="string">'rating'</span>][<span class="string">'average'</span>],</span><br><span class="line">                               item[<span class="string">'genres'</span>], item[<span class="string">'durations'</span>], item[<span class="string">'mainland_pubdate'</span>],</span><br><span class="line">                               list1])</span><br><span class="line"><span class="comment">#print(excel_list)</span></span><br><span class="line"></span><br><span class="line">title = [<span class="string">'片名'</span>, <span class="string">'导演'</span>, <span class="string">'评分'</span>, <span class="string">'类型'</span>, <span class="string">'片长'</span>, <span class="string">'上映日期'</span>, <span class="string">'主演'</span>]</span><br><span class="line">workbook = xlwt.Workbook()</span><br><span class="line">data_sheet = workbook.add_sheet(<span class="string">'douban.xls'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(title)):</span><br><span class="line">    data_sheet.write(0, i, title[i])</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> range(len(excel_list)):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(excel_list[m])):</span><br><span class="line">        data_sheet.write(m+1, n, excel_list[m][n])</span><br><span class="line">workbook.save(<span class="string">'douban.xls'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;url-的基本用法&quot;&gt;&lt;a href=&quot;#url-的基本用法&quot; class=&quot;headerlink&quot; title=&quot;url 的基本用法&quot;&gt;&lt;/a&gt;url 的基本用法&lt;/h2&gt;&lt;p&gt;urllib 是python自带的请求类库，方便开发者进行HTTP/HTTPS请求&lt;br&gt;功能比较简单，用法单一，&lt;br&gt;目前最新的版本是urllib3 = urllib1 + urllib2&lt;br&gt;
    
    </summary>
    
    
      <category term="pachong" scheme="http://yoursite.com/tags/pachong/"/>
    
  </entry>
  
  <entry>
    <title>网络爬虫基础01——HTML网页结构</title>
    <link href="http://yoursite.com/2018/10/16/python_p1/"/>
    <id>http://yoursite.com/2018/10/16/python_p1/</id>
    <published>2018-10-16T11:14:33.673Z</published>
    <updated>2018-08-27T12:53:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="什么是HTML？"><a href="#什么是HTML？" class="headerlink" title="什么是HTML？"></a>什么是HTML？</h3><p>HTML = Hyper Text Markup Language<br>超文本标记语言<br>标记是用来告诉 浏览器（Browser）标记的内容是什么类型<br>这种标记形式 是通过 &lt; 标记语言 &gt; 的形式<br>标记语言又称之位 标签 tag/ Element<br><a id="more"></a></p><h2 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line">DOCTYPE = document <span class="built_in">type</span> 文档类型</span><br><span class="line">&lt;!DOCTYPE html&gt; 如果文档类型不是HTML 就不予解析</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--html标记 所标记的内容都是 html的内容</span><br><span class="line">lang 属性 是用来设置当前页面的内容</span><br><span class="line">当加载页面的时候 浏览器会自动配置语言，如果和当前属地不符合的时候会提示翻译</span><br><span class="line">en 表示英语 zh-cn 表示中文简体</span><br><span class="line">--&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</span><br><span class="line">&lt;!--页面的相关信息--&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;!--页面的编码的设置--&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;!--页面的标题内容--&gt;</span><br><span class="line">    &lt;title&gt;我的第一个页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!--页面内容--&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    Hello Python</span><br><span class="line">    &lt;!--学习 html中常用的 标记语言--&gt;</span><br><span class="line">    &lt;b&gt;这是文字加粗&lt;/b&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    超链接标签</span><br><span class="line">    herf = 链接的地址 可以是本地的html 也可以是外部链接</span><br><span class="line">    herf 属性必填</span><br><span class="line">    如果不想跳转 使用 herf = <span class="string">'#'</span></span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href=<span class="string">"http://baidu.com"</span>&gt;百度一下就知道&lt;/a&gt;</span><br><span class="line">    &lt;i&gt;这是一个斜体标签&lt;/i&gt;</span><br><span class="line">    &lt;!--标签分为 单标签和双标签 H5中单标签不多 大部分都是双标签--&gt;</span><br><span class="line">    &lt;!--换行--&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;mark&gt;这是显示的标记&lt;/mark&gt;</span><br><span class="line">    &lt;!--换行 加条横线--&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;span&gt;普通文字标签&lt;/span&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;!--a^2 + b^2 = c^2--&gt;</span><br><span class="line">    &lt;!--sup 表示上标--&gt;</span><br><span class="line">    a&lt;sup&gt;2&lt;/sup&gt; + b&lt;sup&gt;2&lt;/sup&gt; = c&lt;sup&gt;2&lt;/sup&gt;</span><br><span class="line">    &lt;!--今天的天气 26o--&gt;</span><br><span class="line">    今天的天气26&lt;sup&gt;o&lt;/sup&gt;</span><br><span class="line">    &lt;!--sub 表示下标--&gt;</span><br><span class="line">    氧气0&lt;sub&gt;2&lt;/sub&gt;</span><br><span class="line">    &lt;big&gt;这是大号字体&lt;/big&gt;</span><br><span class="line">    &lt;!--以上都是 HTML中的文字标签 修饰文字样式--&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;!--文本结构标签--&gt;</span><br><span class="line">    &lt;h1&gt;这是最大号的标题&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;这是2号标题&lt;/h2&gt;</span><br><span class="line">    &lt;h3&gt;这是3号标题&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;这是4号标题&lt;/h4&gt;</span><br><span class="line">    &lt;h5&gt;这是5号标题&lt;/h5&gt;</span><br><span class="line">    &lt;h6&gt;这是6号标题&lt;/h6&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--p 这是段落标签--&gt;</span><br><span class="line">    &lt;p&gt;这是一段段落1&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;这是一段段落2&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;这是一段段落3&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--div 超级容器--&gt;</span><br><span class="line">    &lt;div style=<span class="string">"background-color:red;color:white;text-align:center;height:100px;line-height:100px;font-size:50px;"</span>&gt;这是一个容器标签&lt;/div&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--嵌入标签--&gt;</span><br><span class="line">    &lt;img src=<span class="string">"https://i0.hdslb.com/bfs/archive/ae3139885ce5f950a921440888464defb3776cbb.jpg"</span> alt=<span class="string">"这是logo"</span> title=<span class="string">"这是标题"</span>&gt;</span><br><span class="line">    &lt;img src=<span class="string">"./190.jpg"</span> alt=<span class="string">"这是图片"</span> width=<span class="string">'440'</span> height=<span class="string">"220"</span>&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;!--表单标签--&gt;</span><br><span class="line">    &lt;!--文本输入框 用来输入数据的</span><br><span class="line">    <span class="built_in">type</span> 表示当前input的类型</span><br><span class="line">    txte 是文本类型--&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> placeholder=<span class="string">"输入手机号"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;!--展示一个表格--&gt;</span><br><span class="line">    &lt;!--table 标签是表格标签</span><br><span class="line">    border 设置边框--&gt;</span><br><span class="line">    &lt;table border=<span class="string">"1"</span> style=<span class="string">"color:red"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td style=<span class="string">"background-color:yellow;width:100px;"</span>&gt;姓名&lt;/td&gt;</span><br><span class="line">            &lt;td style=<span class="string">"height:100px;"</span>&gt;手机号&lt;/td&gt;</span><br><span class="line">            &lt;td style=<span class="string">"text-align:center;width:100px;"</span>&gt;年龄&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;IG.wxz&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;12345654321&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;30&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;!--cellpadding 内容间距  cellspacing 表格间距--&gt;</span><br><span class="line">    &lt;table border=<span class="string">"1"</span> cellpadding=<span class="string">"10"</span> cellspacing=<span class="string">"0"</span> width=<span class="string">"600"</span> bordercolor=<span class="string">"green"</span>&gt;</span><br><span class="line">        &lt;!--表头--&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th colspan=<span class="string">"6"</span> bgcolor=<span class="string">"red"</span>&gt;课程表&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th width=<span class="string">"200"</span>&gt;时间&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;星期一&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;星期二&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;星期三&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;星期四&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;星期五&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;!--表数据--&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td rowspan=<span class="string">"2"</span> style=<span class="string">"text-align:center"</span>&gt;内容&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">        &lt;!--页脚--&gt;</span><br><span class="line">        &lt;tfoot align=<span class="string">"center"</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;合计&lt;/td&gt;</span><br><span class="line">                &lt;td colspan=<span class="string">"5"</span>&gt;10000&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/tfoot&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;!--列表标签--&gt;</span><br><span class="line">    &lt;!--无序列表--&gt;</span><br><span class="line">    &lt;!--ul&gt;li&#123;第$名&#125;*4--&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;第1名</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;张三</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        &lt;li&gt;a1&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;a2&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;a3&lt;/li&gt;</span><br><span class="line">                    &lt;/ul&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;李四&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;第2名&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;第3名&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;第4名&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">    ol 有序列表</span><br><span class="line">    <span class="built_in">type</span> 表示有序列表 是以什么方式进行列显示 有 1, A, a, I, i 默认数字排序</span><br><span class="line">    start 表示 排序的起始位置</span><br><span class="line">    reversed 表示倒叙排列</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">        &lt;li&gt;红色&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;黄色&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;紫色&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;白色&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">    &lt;ol reversed&gt;</span><br><span class="line">        &lt;li&gt;红色&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;黄色&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;紫色&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;白色&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">    &lt;ol start=<span class="string">"10"</span>&gt;</span><br><span class="line">        &lt;li&gt;红色&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;黄色&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;紫色&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;白色&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ol <span class="built_in">type</span>=<span class="string">"I"</span>&gt;</span><br><span class="line">        &lt;li&gt;第1名&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;第2名&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;第3名&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;第4名&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dl&gt;</span><br><span class="line">        &lt;dt&gt;这是说明标题1&lt;/dt&gt;</span><br><span class="line">        &lt;dd&gt;这是文件内容&lt;/dd&gt;</span><br><span class="line">        &lt;dd&gt;这是文件内容&lt;/dd&gt;</span><br><span class="line">        &lt;dt&gt;这是说明标题2&lt;/dt&gt;</span><br><span class="line">        &lt;dd&gt;这是文件内容&lt;/dd&gt;</span><br><span class="line">        &lt;dd&gt;这是文件内容&lt;/dd&gt;</span><br><span class="line">    &lt;/dl&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;表单标签&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!--form 提交表单--&gt;</span><br><span class="line">    &lt;!--action 属性 是用来指明 form表单提交数据的url地址</span><br><span class="line">    默认值时当前页面</span><br><span class="line">    method 属性 是用来知名当前表单提交的 请求方式 默认是get，</span><br><span class="line">    目前form只支持 get 和 post</span><br><span class="line">    切记，如果想在form提交的时候 带上用户输入的数据</span><br><span class="line">    必须指明input的name属性</span><br><span class="line">    提交行为的触发 必须使用 <span class="built_in">type</span>为 submit 的表单标签（input， button）</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        &lt;!--label 标签 用于提示input</span><br><span class="line">        <span class="keyword">for</span> 属性要和 input 的 id 属性进行对应，否则会报错</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">""</span>&gt;用户名：&lt;/label&gt;</span><br><span class="line">        &lt;!--id 是唯一标识 值必须是唯一的</span><br><span class="line">        value 是当前input输入的有效值</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"uname"</span> id=<span class="string">""</span> value=<span class="string">"萨尔"</span>&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">""</span>&gt;密码：&lt;/label&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"upassword"</span>&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">""</span>&gt;性别&lt;/label&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> placeholder=<span class="string">"可选"</span>&gt;</span><br><span class="line">        &lt;!--checked 表示选中状态 disabled 表示不能选中 禁止交互 可用于所有标签--&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"m"</span> checked&gt;男</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"f"</span> disabled&gt;女</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span>&gt;</span><br><span class="line">        &lt;!--reset 表示重置--&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"reset"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;form action=<span class="string">"http://baidu.com/s"</span>&gt;</span><br><span class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> placeholder=<span class="string">"关键字"</span> name=<span class="string">"wd"</span>&gt;</span><br><span class="line">        &lt;!--&lt;input <span class="built_in">type</span>=<span class="string">"submit"</span>&gt;--&gt;</span><br><span class="line">        &lt;button <span class="built_in">type</span>=<span class="string">"submit"</span>&gt;搜索&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--多选列表--&gt;</span><br><span class="line">    &lt;input list=<span class="string">"footlist"</span>/&gt;</span><br><span class="line">    &lt;datalist id=<span class="string">"footlist"</span>&gt;</span><br><span class="line">        &lt;option value=<span class="string">"苹果"</span>&gt;&lt;/option&gt;</span><br><span class="line">        &lt;option value=<span class="string">"香蕉"</span>&gt;&lt;/option&gt;</span><br><span class="line">        &lt;option value=<span class="string">"橘子"</span>&gt;&lt;/option&gt;</span><br><span class="line">    &lt;/datalist&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--input 的类型</span><br><span class="line">    <span class="built_in">type</span> 是指明 input的类型</span><br><span class="line">    text 文本类型 String类型</span><br><span class="line"></span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"password"</span> placeholder=<span class="string">"密码"</span>&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"search"</span>&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"color"</span>&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"checkbox"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"radio"</span>&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;!--性别的选中--&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"radio"</span> name=<span class="string">"sex"</span>&gt;男</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"radio"</span> name=<span class="string">"sex"</span>&gt;女</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"radio"</span> name=<span class="string">"sex"</span>&gt;其它</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"date"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"month"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"time"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"datetime-local"</span>&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;!--文件上传--&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"file"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--城市列表--&gt;</span><br><span class="line">    &lt;select name=<span class="string">""</span>&gt;</span><br><span class="line">        &lt;option value=<span class="string">"郑州"</span>&gt;郑州&lt;/option&gt;</span><br><span class="line">        &lt;option value=<span class="string">"上海"</span>&gt;上海&lt;/option&gt;</span><br><span class="line">        &lt;optgroup label=<span class="string">"河南"</span>&gt;</span><br><span class="line">            &lt;option value=<span class="string">"郑州"</span>&gt;郑州&lt;/option&gt;</span><br><span class="line">            &lt;option value=<span class="string">"汝州"</span>&gt;汝州&lt;/option&gt;</span><br><span class="line">        &lt;/optgroup&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--对话框 多行文本框--&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">"message"</span>&gt;留言/评论/建议&lt;/label&gt;</span><br><span class="line">    &lt;textarea name=<span class="string">""</span> id=<span class="string">"message"</span> cols=<span class="string">"30"</span> rows=<span class="string">"10"</span> placeholder=<span class="string">"留下宝贵的意见"</span>&gt;&lt;/textarea&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;!--块级标签 ： 独占一行--&gt;</span><br><span class="line">    &lt;div style=<span class="string">"height:100px;background-color:purple;color:red"</span>&gt;</span><br><span class="line">        这是一个块级元素</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- h1-h6  p  table  ul  li  ol  tr form--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--行内块级元素 input img button lable textarea--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> style=<span class="string">"width:400px;height:100px;"</span>&gt;</span><br><span class="line">    &lt;!--盒模型--&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;div style=<span class="string">"sidth:300px;height:200px;background-color:red;margin-left:100px;margin-top:100px;border:10px solid pink;padding-left:50px"</span>&gt;</span><br><span class="line">        &lt;a href=<span class="string">"http://baidu.com"</span>&gt;百度一下&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;课程表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;table cellpadding=<span class="string">"10"</span> cellspacing=<span class="string">"0"</span> border=<span class="string">"1"</span> width=<span class="string">"600"</span> style=<span class="string">"background-color:yellow;"</span>&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th colspan=<span class="string">"7"</span>&gt;课程表&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th colspan=<span class="string">"2"</span>&gt;&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;星期一&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;星期二&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;星期三&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;星期四&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;星期五&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody align=<span class="string">"center"</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td width=<span class="string">"70"</span> rowspan=<span class="string">"2"</span>&gt;上&lt;br /&gt;午&lt;/td&gt;</span><br><span class="line">                &lt;td width=<span class="string">"30"</span>&gt;1&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;英语&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;数学&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;政治&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;自习&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td width=<span class="string">"30"</span>&gt;2&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;英语&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;数学&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;政治&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td width=<span class="string">"70"</span> rowspan=<span class="string">"2"</span>&gt;下&lt;br /&gt;午&lt;/td&gt;</span><br><span class="line">                &lt;td width=<span class="string">"30"</span>&gt;1&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;英语&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;数学&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;政治&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td width=<span class="string">"30"</span>&gt;2&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;英语&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;数学&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;政治&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;table cellspacing=<span class="string">"0"</span> border=<span class="string">"1"</span> width=<span class="string">"600"</span> cellpadding=<span class="string">"10"</span>&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th colspan=<span class="string">"7"</span> style=<span class="string">"color:purple"</span>&gt;&lt;u&gt;课程表&lt;/u&gt;&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th colspan=<span class="string">"2"</span>&gt;&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;星期一&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;星期二&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;星期三&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;星期四&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;星期五&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody align=<span class="string">"center"</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td width=<span class="string">"70"</span> rowspan=<span class="string">"2"</span>&gt;上&lt;br /&gt;午&lt;/td&gt;</span><br><span class="line">                &lt;td width=<span class="string">"30"</span>&gt;1&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;英语&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;数学&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">                &lt;td colspan=<span class="string">"2"</span>&gt;休息&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td width=<span class="string">"30"</span>&gt;2&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;地理&lt;/td&gt;</span><br><span class="line">                &lt;td rowspan=<span class="string">"3"</span>&gt;美术&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;化学&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;政治&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;政治&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td width=<span class="string">"70"</span> rowspan=<span class="string">"2"</span>&gt;下&lt;br /&gt;午&lt;/td&gt;</span><br><span class="line">                &lt;td width=<span class="string">"30"</span>&gt;1&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;英语&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;马克思&lt;/td&gt;</span><br><span class="line">                &lt;td rowspan=<span class="string">"2"</span> colspan=<span class="string">"2"</span>&gt;家长会&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td width=<span class="string">"30"</span>&gt;2&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;体育&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;语文&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;水果</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;葡萄</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        &lt;li&gt;红葡萄&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;绿葡萄&lt;/li&gt;</span><br><span class="line">                    &lt;/ul&gt;</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">                &lt;li&gt;香蕉&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;西瓜&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;蔬菜&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;肉类&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;饮料&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;个人信息&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">""</span>&gt;同户名：&lt;/label&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"uname"</span> id=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">""</span>&gt;密码：&lt;/label&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"upassword"</span>&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"radio"</span> name=<span class="string">"sex"</span>&gt;男</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"radio"</span> name=<span class="string">"sex"</span>&gt;女</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">""</span>&gt;喜好：&lt;/label&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"checkbox"</span>&gt;电脑</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"checkbox"</span>&gt;户外</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"checkbox"</span>&gt;睡觉</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">""</span>&gt;地址：&lt;/label&gt;</span><br><span class="line">    &lt;input list=<span class="string">"address"</span>&gt;</span><br><span class="line">    &lt;datalist id=<span class="string">"address"</span>&gt;</span><br><span class="line">        &lt;option value=<span class="string">"郑州"</span>&gt;&lt;/option&gt;</span><br><span class="line">        &lt;option value=<span class="string">"汝州"</span>&gt;&lt;/option&gt;</span><br><span class="line">    &lt;/datalist&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">"message"</span>&gt;留言：&lt;/label&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;textarea id=<span class="string">"message"</span> name=<span class="string">""</span> cols=<span class="string">"30"</span> rows=<span class="string">"10"</span>&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"reset"</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;h3 id=&quot;什么是HTML？&quot;&gt;&lt;a href=&quot;#什么是HTML？&quot; class=&quot;headerlink&quot; title=&quot;什么是HTML？&quot;&gt;&lt;/a&gt;什么是HTML？&lt;/h3&gt;&lt;p&gt;HTML = Hyper Text Markup Language&lt;br&gt;超文本标记语言&lt;br&gt;标记是用来告诉 浏览器（Browser）标记的内容是什么类型&lt;br&gt;这种标记形式 是通过 &amp;lt; 标记语言 &amp;gt; 的形式&lt;br&gt;标记语言又称之位 标签 tag/ Element&lt;br&gt;
    
    </summary>
    
    
      <category term="pachong" scheme="http://yoursite.com/tags/pachong/"/>
    
  </entry>
  
  <entry>
    <title>Python基础1-数据类型</title>
    <link href="http://yoursite.com/2018/10/16/Python_01/"/>
    <id>http://yoursite.com/2018/10/16/Python_01/</id>
    <published>2018-10-16T11:14:33.639Z</published>
    <updated>2018-07-23T09:50:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h2><p>1.1<br>开发工具：<br>IDLE：Python内置IDE (随python安装包提供)<br>Vscode：图形化界面，比之前的好看<br>PyCharm：有调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制。此外，该IDE提供了一些高级功能，以用于支持Django框架下的专业Web开发。<br>Vim: 最新7.3版编译时可以加入python支持，提供python代码自动提示支持<br>Visual Studio：仅适用Windows，已停止维护，功能较差<br>Sublime、Notepad++、EditPlus、UltraEdit等<br><a id="more"></a><br>1.2<br>Python文件的创建：<br>文件名称部分：<br>可以使用英文，不要使用中文<br>可以使用数字，但是不要使用全数字<br>可以使用_或者-等分隔文件名<br>文件名要有意义方便维护<br>文件后缀部分：<br>常用后缀名为.py或.pyc</p><p>1.3<br>Python文件的注释：<br>注释就是注解，解释，主要用于在代码中进行代码相关的文字提示或者程序调试功能<br>（1）单行注释</p><pre><code>#注释内容</code></pre><p>（2）多行注释<br>    ‘’’ 多行注释 ‘’’<br>    “”” 多行注释 “””</p><p>1.4<br>变量<br>变量名称=值<br>Python 中的变量赋值不需要类型声明<br>每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。<br>每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。<br>等号（=）用来给变量赋值。</p><p>多个变量赋值：<br>例1：a = b = c = 1<br>例2：a, b, c = 1, 2, “john”</p><p>1.5<br>变量的命名规则：<br>不能不用数字开头<br>小写字母，后面可以跟数字<br>单词和单词之间用<em>隔开（模块名，包名）<br>单词首字母大写（类名）<br>以</em>开头，其他和普通变量一样（实例变量）<br>标识符和关键词不能作为变量名使用</p><p>1.6<br>命名规则<br>标识符是计算机语言中允许作为名字的有效字符串集合。Python 标识符字符串规则和其他大部分用C 编写的高级语言相似，有以下一些命名规则：<br>（1）名字必须以字母或者下划线<em>开始。数字不能作为首字符。当名字包含多个单词时，可以使用下划线</em>来连接，例如monty_Python。<br>（2）除了首字符，名称可以包含任何字母、数字和下划线的组合。名字不能是关键字。名字不能出现分隔符、标点符号或者运算符。<br>（3）名字长度不限。<br>（4）名字是区分大小写的。比如myClass、MyClass、myclass是不同的。<br>Python标识符还遵循以下一些约定：<br>第一条约定：不要使用Python预定义的标识符名对自定义的标识符进行命名。<br>第二条约定：应该避免名称开头和结尾都使用下划线（_）。</p><p>1.7<br>标识符与关键字<br>关键字在Python中是特殊单词，不能用来进行命名操作。<br>获取关键词方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import keyword</span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist)</span><br><span class="line">   [<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></table></figure></p><p>1.8<br>注释<br>（1）单行注释#，多行单行注释选中Ctrl加问号键<br>（2）单引号’’’  ‘’’,双引号”””  “””<br>   ‘’’<br>   这是多行注释，用三个单引号<br>   ‘’’<br>   “””<br>   这是多行注释，用三个单引号<br>   “””<br>   print(“Hello, World!”)</p><h2 id="Python的数据类型"><a href="#Python的数据类型" class="headerlink" title="Python的数据类型"></a>Python的数据类型</h2><p>Python可以自定义数据类型，所以Python有无数种数据类型<br>Python提供6个标准数据类型（Object）<br>Nuber  数值类型<br>String   字符类型<br>List       列表类型<br>Tuple    元组类型<br>Dict      字典类型<br>Set        集合类型</p><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>在Python中整数类型被指定为Integral(int)类型。可执行的算法有+、-、*、/ 以及一些其他操作。默认情况下，整数采用的是十进制<br>整形可以存储二进制（0b），八进制，十进制（0o），十六进制（0x）<br>num = 126;// 十进制数<br>num = 0b1111110;// 二进制数<br>num = -123 // 负数<br>num = 0o176 // 八进制数<br>num = 0x7e // 十六进制数<br>进制转换：<br>（1）将一个整数变为其，二进制、八进制、十六进制的数字字符串<br>关键词 bin,oct,hex<br> (2)int(‘数值’,进制),其他进制转为十进制<br>（3）用字符串格式表达式转换成八进制、十六进制的字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(bin(100))  <span class="comment">#0b1100100</span></span><br><span class="line"><span class="built_in">print</span>(oct(100))  <span class="comment">#0o144</span></span><br><span class="line"><span class="built_in">print</span>(hex(100))  <span class="comment">#0x64</span></span><br><span class="line"><span class="built_in">print</span>(int(<span class="string">'100'</span>,8))  <span class="comment">#64</span></span><br><span class="line"><span class="built_in">print</span>(int(<span class="string">'100'</span>,16))  <span class="comment">#256</span></span><br><span class="line"><span class="comment">#字符串格式表达式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"%d%o%X"</span>%(64, 64, 255)) <span class="comment">#64100FF</span></span><br></pre></td></tr></table></figure></p><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p>（1）浮点数就是小数<br>（2）浮点数有两种表示方式<br>小数 ：3.1415926<br>科学计数法 ：3.14e2  </p><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>计算机专用的数据类型，只有两个值：True和False（区分大小写）<br>true表示肯定的答案<br>    有，是，好，没错，真的，ok<br>false表示否定的答案<br>    没有，不是，错，加的<br>主要用于判断<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=True</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))  <span class="comment">#&lt;class 'bool'&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。<br>实数：现实存在的所有数值都是实数（例：1，0.5,0.00001）<br>虚数：<br>算数中：不存在的数字（假定一个数的平方=-1，那这个数是虚数的基本单位）<br>计算机中：用j表示虚数的基本单位<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(3+2j))</span><br><span class="line"><span class="built_in">print</span>(complex(2,3))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(complex(2.5,3.3)))</span><br></pre></td></tr></table></figure></p><h3 id="字符串-字符串的定义"><a href="#字符串-字符串的定义" class="headerlink" title="字符串-字符串的定义"></a>字符串-字符串的定义</h3><p>字符串是 Python 中最常用的数据类型。我们可以使用引号(‘或”)来创建字符串，创建字符串很简单，只要为变量分配一个值即可<br>Python中的字符串可以如下表示：<br>单引号（’）：可以用单引号指示字符串，就如同’Quote me on this‘这样。所有的空白，即空格和制表符都照原样保留。<br>双引号（“）：测试数据显示在双引号中的字符串与单引号中的字符串的使用完全相同，例如”What‘s your name?“。<br>三引号（’’’)：不需要行属转义，它们已经包含在字符串中。<br>单引号：内容中包含双引号时使用单引号<br>双引号：内容中包含单引号时使用双引号<br>三引号：多内容，单双引号都存在的情况<br>注意：单引号和双引号不可以换行，换行用续行符</p><p>在需要在字符中使用特殊字符时，python用反斜杠()转义字符，转义符号是右斜杠（反斜杠）<br>不加\的转义字符只是一个普通的字母，加上\之后代表特殊含义<br>\    反斜线<br>\’    单引号<br>\”    双引号<br>\000    空<br>\n    换行<br>\r    回车<br>\t    横向制表符<br>(在行尾时)    续行符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">str1=<span class="string">"miss look\</span></span><br><span class="line"><span class="string"> miss look\</span></span><br><span class="line"><span class="string"> miss look\</span></span><br><span class="line"><span class="string">miss look"</span></span><br><span class="line"><span class="built_in">print</span>(str1) <span class="comment">#miss look miss look miss lookmiss look</span></span><br><span class="line"></span><br><span class="line">str2=<span class="string">'my eye\'</span>s python<span class="string">'</span></span><br><span class="line"><span class="string">print(str2)     # my eye'</span>s python</span><br><span class="line">```      </span><br><span class="line">元字符：元字符（R|r）就是字符串中的转义字符格式不进行任何转义操作的字符串，能够使转义字符失效</span><br><span class="line">格式：R<span class="string">'字符串'</span>  或者  r<span class="string">'字符串'</span></span><br><span class="line">```bash</span><br><span class="line">trval5=<span class="string">'贱人\t你\r\n怎么这么矫情\\n呢？'</span></span><br><span class="line">strval5=r<span class="string">'贱人\t你\r\n怎么这么矫情\\n呢？'</span></span><br><span class="line"><span class="built_in">print</span>(strval)    <span class="comment">#原型输出</span></span><br><span class="line">strval1=<span class="string">'贱人\n你\n怎么这么矫情呢'</span></span><br><span class="line">strval2=<span class="string">'贱人\r你\r怎么这么矫情呢'</span></span><br><span class="line">strval3=<span class="string">'贱人\t你\t怎么这么矫情呢'</span></span><br><span class="line"><span class="built_in">print</span>(strval1)</span><br><span class="line"><span class="built_in">print</span>(strval2)<span class="comment">#怎么这么矫情呢</span></span><br><span class="line"><span class="built_in">print</span>(strval3) <span class="comment">#贱人    你      怎么这么矫情呢</span></span><br></pre></td></tr></table></figure></p><h3 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h3><p>List（列表）用 [ ] 标识， 是 Python 中使用最频繁的数据类型。<br>列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）<br>list是一种最具灵活性的有序集合对象类型，可以随时添加和删除其中的元素。<br>    格式：变量=[值1,值2,值3….]<br>调用列表中的一个值<br>可以进行重新赋值<br>标识符：[]<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列表list[]能通过下标输出，能通过直接赋值改值，能用+方法和切片输出,用del,remove删除</span></span><br><span class="line"><span class="comment">#pop,insert.append函数,能用+添加元素</span></span><br><span class="line">list=[<span class="string">'小蓝'</span>,<span class="string">'21'</span>,[<span class="string">'sting'</span>,<span class="string">'paths'</span>],[<span class="string">'ssss'</span>]]</span><br><span class="line"><span class="built_in">print</span>(list[2])</span><br><span class="line"><span class="built_in">print</span>(list[2]+list[3])</span><br><span class="line"><span class="built_in">print</span>(list[2:4])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(list))</span><br><span class="line">list[0]=<span class="string">'小黑'</span>  <span class="comment">#添加</span></span><br><span class="line"><span class="built_in">print</span>(list)</span><br><span class="line">del list[1]   <span class="comment">#删除</span></span><br><span class="line"><span class="built_in">print</span>(list)</span><br><span class="line">list=[1]</span><br><span class="line">list=list+[<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line"><span class="built_in">print</span>(list)  <span class="comment">#[1, 'a', 'b']</span></span><br></pre></td></tr></table></figure></p><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组（tuple）是另一个数据类型，类似于List（列表）。<br>元组用”()”标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表<br>    格式：变量=（值1,值2,值3….）<br>注：()可以省略，省略之后还是元组类型<br>标识符：，     (tuple(1,),tuple=1,但是tuple=(,)不行)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#元组tuple(),元组不能二次赋值，相当于只读列表,括号可省略，可获取数据，不可修改。订单列表</span></span><br><span class="line">tuple=(1,2,3,4,5)</span><br><span class="line"><span class="built_in">print</span>(tuple)</span><br><span class="line">tuple1=(<span class="string">'小白'</span>,<span class="string">'小蓝'</span>,<span class="string">'小橙'</span>,<span class="string">'小粉'</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1)</span><br><span class="line"><span class="built_in">print</span>(tuple1[0])</span><br></pre></td></tr></table></figure></p><h3 id="字典类型"><a href="#字典类型" class="headerlink" title="字典类型"></a>字典类型</h3><p>字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。<br>两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。<br>    格式：变量={‘键1’:’值1’,’键2’:’值2’,’键3’:’值3’….}<br>键值对：字典由索引(key)和它对应的值(value)组成<br>标识符：{}<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dic=dict(name=<span class="string">'张三'</span>,sex=<span class="string">'男'</span>,height=<span class="string">'180'</span>,clas=<span class="string">'python'</span>)</span><br><span class="line"><span class="built_in">print</span>(dic[<span class="string">'name'</span>])</span><br><span class="line"></span><br><span class="line">dic=(&#123;<span class="string">'name'</span>:<span class="string">'张三'</span>,<span class="string">'sex'</span>:<span class="string">'男'</span>,<span class="string">'height'</span>:<span class="string">'180'</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line">dic[<span class="string">'name'</span>]=<span class="string">'李四'</span>   <span class="comment">#修改</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line">dic[<span class="string">'age'</span>]=20  <span class="comment">#添加</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"><span class="comment">#创建字典的多种方式</span></span><br><span class="line">d1=dict(&#123;<span class="string">"id"</span>:19,<span class="string">"name"</span>:<span class="string">"Marry"</span>,<span class="string">"city"</span>:<span class="string">"chongqing"</span>&#125;)</span><br><span class="line">d2=dict(id=19,name=<span class="string">"Marry"</span>,city=<span class="string">"chongqing"</span>)</span><br><span class="line">d3=dict([(<span class="string">"id"</span>,19),(<span class="string">"nmae"</span>,<span class="string">"Marry"</span>),(<span class="string">"city"</span>,<span class="string">"chongqing"</span>)])</span><br><span class="line">d4=dict(zip((<span class="string">"id"</span>,<span class="string">"name"</span>,<span class="string">"city"</span>),(19,<span class="string">"Marry"</span>,<span class="string">"chongqing"</span>)))</span><br><span class="line">d5=&#123;<span class="string">"id"</span>:19,<span class="string">"name"</span>:<span class="string">"Marry"</span>,<span class="string">"city"</span>:<span class="string">"chongqing"</span>&#125;</span><br></pre></td></tr></table></figure></p><h3 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h3><p>集合（set）是一个无序不重复元素的序列，可以使用{}也可以使用set<br>    格式：变量={值，值，值…..}<br>注意：集合没有标识符号<br>若集合中有重复的元素，输出时则自动去除<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1=&#123;<span class="string">'苹果'</span>,<span class="string">'oppo'</span>,<span class="string">'华为'</span>,<span class="string">'小米'</span>,<span class="string">'oppo'</span>,<span class="string">'华为'</span>,<span class="string">'小米'</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(set1)        <span class="comment">#&#123;'华为', '苹果', 'oppo', '小米'&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(set1))</span><br></pre></td></tr></table></figure></p><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python基础&quot;&gt;&lt;a href=&quot;#python基础&quot; class=&quot;headerlink&quot; title=&quot;python基础&quot;&gt;&lt;/a&gt;python基础&lt;/h2&gt;&lt;p&gt;1.1&lt;br&gt;开发工具：&lt;br&gt;IDLE：Python内置IDE (随python安装包提供)&lt;br&gt;Vscode：图形化界面，比之前的好看&lt;br&gt;PyCharm：有调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制。此外，该IDE提供了一些高级功能，以用于支持Django框架下的专业Web开发。&lt;br&gt;Vim: 最新7.3版编译时可以加入python支持，提供python代码自动提示支持&lt;br&gt;Visual Studio：仅适用Windows，已停止维护，功能较差&lt;br&gt;Sublime、Notepad++、EditPlus、UltraEdit等&lt;br&gt;
    
    </summary>
    
    
      <category term="calm" scheme="http://yoursite.com/tags/calm/"/>
    
  </entry>
  
  <entry>
    <title>python基础十七————面向对象(一)</title>
    <link href="http://yoursite.com/2018/10/16/python17/"/>
    <id>http://yoursite.com/2018/10/16/python17/</id>
    <published>2018-10-16T11:14:33.627Z</published>
    <updated>2018-08-09T09:57:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向过程与面向对象"><a href="#面向过程与面向对象" class="headerlink" title="面向过程与面向对象"></a>面向过程与面向对象</h2><p>需要了解的定义性文字:<br>面向对象(object-oriented ;简称: OO) 至今还没有统一的概念 我这里把它定义为: 按人们 认识客观世界的系统思维方式,采用基于对象(实体) 的概念建立模型,模拟客观世界分析、设 计、实现软件的办法。</p><p>面向对象编程(Object Oriented Programming-OOP) 是一种解决软件复用的设计和编程方法。 这种方法把软件系统中相近相似的操作逻辑和操作 应用数据、状态,以类的型式描述出来,以对象实例的形式在软件系统中复用,以达到提高软件开发效率的作用。<br><a id="more"></a></p><p>理解性文字：<br>面向过程(Procedure Oriented Programming)：<br>    以事件为中心，分析出解决问题的步骤，然后用函数将这些步骤一步步实现，使用的时候依次调用<br>步骤1：做饭<br>步骤2：收拾房间<br>步骤3：做饭<br>步骤4：洗衣服<br>步骤5：做饭<br>面向对象(Object Oriented Programming)：<br>以事物为中心，万物皆对象，由实体引发事件，更贴近现实世界，更易于扩展<br>如上述步骤可以交给一个人来做，不用自己按步骤做<br>用面向对象的思维解决问题的重点<br>当遇到一个需求的时候不用自己去实现，如果自己一步步实现那就是面向过程<br>应该找一个专门做这个事的人来做<br>面向对象是基于面向过程的</p><p>面向过程：根据业务逻辑从上到下写代码<br>面向对象：将数据与函数绑定到一起，进行封装，这样能够更快速的开发程序，减少了重复代码的重写过程<br>面向过程编程最易被初学者接受，其往往用一长段代码来实现指定功能，开发过程的思路是将数据与函数按照执行的逻辑顺序组织在一起，数据与函数分开考虑。</p><p>面向对象的概念（OOP）：<br>OOP(Object-Oriented Programming, 面向对象的编程)技术为编程人员敞开了一扇大门，使其编程的代码更简洁、更易于维护，并且具有更强的可重用性。<br>OOP达到了软件工程的三个目标：<br>重用性、灵活性、扩展性<br>OOP面向对象编程的特点：<br>封装、继承、多态</p><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>面向对象编程的2个非常重要的概念：类和对象<br>对象是面向对象编程的核心，在使用对象的过程中，为了将具有共同特征和行为的一组对象抽象定义，提出了另外一个新的概念——类<br>类就相当于制造飞机时的图纸，用它来进行创建的飞机就相当于对象<br>1、类<br>人以类聚 物以群分。<br>具有相似内部状态和运动规律的实体的集合(或统称为抽象)。<br>具有相同属性和行为事物的统称<br>类是抽象的,在使用的时候通常会找到这个类的一个具体的存在,使用这个具体的存在。一个类可以找到多个对象</p><p>2、 对象<br>某一个具体事物的存在 ,在现实世界中可以是看得见摸得着的。<br>可以是直接使用的<br>3、类和对象之间的关系<br>类就是创建对象的模板</p><p>举例：区分类和对象<br>奔驰汽车 类<br>奔驰smart 类<br>张三的那辆奔驰smart 对象<br>狗 类<br>大黄狗 类<br>李四家那只大黄狗 对象<br>水果 类<br>苹果 类<br>红苹果 类 红富士苹果 类<br>我手里拿着的的苹果 对象</p><h3 id="类的构成"><a href="#类的构成" class="headerlink" title="类的构成"></a>类的构成</h3><p>类(Class) 由3个部分构成<br>类的名称:类名<br>类的属性:一组数据<br>类的方法:允许对进行操作的方法 (行为)</p><p>如：<br>狗类的设计<br>类名:狗(Dog)<br>属性:品种 、毛色、性别、名字、 腿儿的数量<br>方法(行为/功能):叫 、跑、咬人、吃、摇尾巴</p><h3 id="理解self"><a href="#理解self" class="headerlink" title="理解self"></a>理解self</h3><p>所谓的self，可以理解为自己<br>可以把self当做C++中类里面的this指针一样理解，就是对象自身的意思<br>某个对象调用其方法时，python解释器会把这个对象作为第一个参数传递给self，所以开发者只需要传递后面的参数即可<br>如定义一个猫类：<br>后面的调用Tom，执行的时候self=tom<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Cat:</span><br><span class="line">    <span class="comment">#如果函数定义在class里面 方法</span></span><br><span class="line">    <span class="comment">#定义在class外面  函数</span></span><br><span class="line"><span class="comment">#tom.name='汤姆'</span></span><br><span class="line">    <span class="comment">#tom.age=65</span></span><br><span class="line">    def eat(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'猫在吃鱼...'</span>)</span><br><span class="line">    def drink(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"猫在喝可乐...."</span>)</span><br><span class="line">    def speak(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s的年龄是：%d'</span>%(self.name,self.age)) <span class="comment">#this.name</span></span><br><span class="line"><span class="comment">#class类 概念</span></span><br><span class="line"><span class="comment">#概念-实物（对象）    </span></span><br><span class="line"><span class="comment"># 创建一个对象</span></span><br><span class="line">tom=Cat()</span><br><span class="line">tom.eat()</span><br><span class="line">tom.drink()</span><br><span class="line">tom.name=<span class="string">'汤姆'</span></span><br><span class="line">tom.age=65</span><br><span class="line">tom.speak()</span><br><span class="line"></span><br><span class="line">sanqian=Cat()</span><br><span class="line">sanqian.name=<span class="string">'三千'</span></span><br><span class="line">sanqian.age=3</span><br><span class="line">sanqian.speak()</span><br></pre></td></tr></table></figure></p><h3 id="init和str"><a href="#init和str" class="headerlink" title="init和str"></a><strong>init</strong>和<strong>str</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Cat:</span><br><span class="line">    <span class="comment">#属性</span></span><br><span class="line">    <span class="comment">#初始化方法</span></span><br><span class="line">    def __init__(self,new_name,new_age):</span><br><span class="line">        self.name=new_name</span><br><span class="line">        self.age=new_age</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取对象的描述信息。</span></span><br><span class="line">    def __str__(self):</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'%s的年龄是：%d'</span>%(self.name,self.age)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#方法</span></span><br><span class="line">    def eat(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'猫在吃鱼...'</span>)</span><br><span class="line">    def drink(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"猫在喝可乐...."</span>)</span><br><span class="line"></span><br><span class="line">tom=Cat(<span class="string">'Tom'</span>,20)</span><br><span class="line"><span class="built_in">print</span>(tom)</span><br><span class="line"></span><br><span class="line">sanqian=Cat(<span class="string">'三千'</span>,3)</span><br><span class="line"><span class="built_in">print</span>(sanqian)</span><br><span class="line"><span class="comment">#Tom的年龄是：20</span></span><br><span class="line"><span class="comment">#三千的年龄是：3</span></span><br></pre></td></tr></table></figure><p>总结<br>在python中方法名如果是<strong>xxxx</strong>()的，那么就有特殊的功能，因此叫做“魔法”方法<br>当使用print输出对象的时候，只要自己定义了<strong>str</strong>(self)方法，那么就会打印从在这个方法中return的数据</p><p>全局变量，函数和属性，方法的联系和区别<br>总结：<br>相同点：原来共享数据用的全局变量，现在用的是属性；<br>不同：全局变量改变，各个函数中的值都会改变；属性改变不会影响其他对象中的值</p><p>函数：相当于把一些独立的功能封装起来了；<br>对象：把一些函数的功能和一些全局变量的功能又封装在一起了</p><p>全局变量原来怎么用，现在属性就怎么用，不过加上一个self</p><h3 id="烤地瓜案例"><a href="#烤地瓜案例" class="headerlink" title="烤地瓜案例"></a>烤地瓜案例</h3><p>1、分析“烤地瓜”的属性和方法<br>示例属性如下:<br>cookedLevel : 这是数字；0~3表示还是生的，超过3表示半生不熟，超过5表示已经烤好了，超过8表示已经烤成木炭了！我们的地瓜开始时时生的<br>cookedString : 这是字符串；描述地瓜的生熟程度<br>condiments : 这是地瓜的配料列表，比如番茄酱、芥末酱等<br>示例方法如下:<br>cook() : 把地瓜烤一段时间<br>addCondiments() : 给地瓜添加配料<br><strong>init</strong>() : 设置默认的属性<br><strong>str</strong>() : 让print的结果看起来更好一些<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Potato:</span><br><span class="line">    def __init__(self):</span><br><span class="line">       self.cookedString=<span class="string">'生的'</span></span><br><span class="line">       self.condiments=[]</span><br><span class="line">       self.cookedLevel=0</span><br><span class="line">    def __str__(self):</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'地瓜烤了：&#123;&#125;，地瓜状态:&#123;&#125;,加的佐料：&#123;&#125;'</span>.format(self.cookedLevel,self.cookedString,self.condiments)</span><br><span class="line">    def cook(self,cooktime):</span><br><span class="line">        self.cookedLevel+=cooktime</span><br><span class="line">        <span class="keyword">if</span> self.cookedLevel&gt;0 and self.cookedLevel&lt;=3:</span><br><span class="line">            self.cookedString=<span class="string">'生的'</span></span><br><span class="line">        <span class="keyword">elif</span> self.cookedLevel&gt;3 and self.cookedLevel&lt;=5:</span><br><span class="line">            self.cookedString=<span class="string">'半生不熟'</span></span><br><span class="line">        <span class="keyword">elif</span> self.cookedLevel&gt;5 and self.cookedLevel&lt;=8:</span><br><span class="line">            self.cookedString=<span class="string">'烤好了'</span></span><br><span class="line">        <span class="keyword">elif</span> self.cookedLevel&gt;8:</span><br><span class="line">            self.cookedString=<span class="string">'烤成木炭了'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'出现异常'</span>)</span><br><span class="line">    def add_condiments(self,condiment):</span><br><span class="line">        self.condiments.append(condiment)</span><br><span class="line">dd=Potato()</span><br><span class="line">dd.cook(2)</span><br><span class="line">dd.add_condiments(<span class="string">'番茄酱'</span>)</span><br><span class="line"><span class="built_in">print</span>(dd)</span><br><span class="line">dd.cook(2)</span><br><span class="line">dd.add_condiments(<span class="string">'孜然'</span>)</span><br><span class="line"><span class="built_in">print</span>(dd)</span><br></pre></td></tr></table></figure></p><h3 id="类与类的调用"><a href="#类与类的调用" class="headerlink" title="类与类的调用"></a>类与类的调用</h3><p>两种方法，第一种方法是参数为另一个类的名字，引入另一个类的全部变量，在自己的类中做处理。<br>第二种时参数写另一类中需要用到的参数如下面例子中的（bed.area）<br>例子：<br>买家具<br>房子（大小，户型，位置）-装修-买家具<br>买家具，床，类型，大小<br>原面积：128  剩下面积：124<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">class Home:</span><br><span class="line">    def __init__(self,new_area,new_info,new_add):</span><br><span class="line">        self.area=new_area</span><br><span class="line">        self.info=new_info</span><br><span class="line">        self.add=new_add</span><br><span class="line">        self.rest_area=new_area</span><br><span class="line">    def __str__(self):</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'房子的面积是：%s,剩余面积是:%s,户型是：%s,地址是：%s'</span>%(self.area,self.rest_area,self.info,self.add)</span><br><span class="line">    def rest(self,mj):</span><br><span class="line">        <span class="comment">#第一种方法</span></span><br><span class="line">        self.rest_area=int(self.area)-int(mj)</span><br><span class="line">        <span class="comment">#第二种方法</span></span><br><span class="line">        self.rest_area=int(self.area)-int(mj.area) </span><br><span class="line">       </span><br><span class="line">    </span><br><span class="line">fangzi=Home(<span class="string">'128'</span>,<span class="string">'三室一厅'</span>,<span class="string">'郑州市'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Bed:</span><br><span class="line">    def __init__(self,new_name,new_area):</span><br><span class="line">        self.name=new_name</span><br><span class="line">        self.area=new_area</span><br><span class="line">    def __str__(self):</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'%s的面积是：%d'</span>%(self.name,self.area)</span><br><span class="line"></span><br><span class="line">fangzi=Home(<span class="string">'128'</span>,<span class="string">'三室一厅'</span>,<span class="string">'郑州市'</span>)</span><br><span class="line"><span class="built_in">print</span>(fangzi)</span><br><span class="line">bed=Bed(<span class="string">'床'</span>,4)</span><br><span class="line"><span class="built_in">print</span>(bed)</span><br><span class="line"><span class="comment">#方法一</span></span><br><span class="line">fangzi.rest(bed.area)</span><br><span class="line"><span class="built_in">print</span>(fangzi)</span><br><span class="line"><span class="comment">#方法二</span></span><br><span class="line">fangzi.rest(bed)</span><br><span class="line"><span class="built_in">print</span>(fangzi)</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">房子的面积是：128,剩余面积是:128,户型是</span></span><br><span class="line"><span class="string">：三室一厅,地址是：郑州市</span></span><br><span class="line"><span class="string">床的面积是：4</span></span><br><span class="line"><span class="string">房子的面积是：128,剩余面积是:124,户型是</span></span><br><span class="line"><span class="string">：三室一厅,地址是：郑州市</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面向过程与面向对象&quot;&gt;&lt;a href=&quot;#面向过程与面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向过程与面向对象&quot;&gt;&lt;/a&gt;面向过程与面向对象&lt;/h2&gt;&lt;p&gt;需要了解的定义性文字:&lt;br&gt;面向对象(object-oriented ;简称: OO) 至今还没有统一的概念 我这里把它定义为: 按人们 认识客观世界的系统思维方式,采用基于对象(实体) 的概念建立模型,模拟客观世界分析、设 计、实现软件的办法。&lt;/p&gt;
&lt;p&gt;面向对象编程(Object Oriented Programming-OOP) 是一种解决软件复用的设计和编程方法。 这种方法把软件系统中相近相似的操作逻辑和操作 应用数据、状态,以类的型式描述出来,以对象实例的形式在软件系统中复用,以达到提高软件开发效率的作用。&lt;br&gt;
    
    </summary>
    
    
      <category term="calm" scheme="http://yoursite.com/tags/calm/"/>
    
  </entry>
  
  <entry>
    <title>python基础5——Python高级特性</title>
    <link href="http://yoursite.com/2018/10/16/python05/"/>
    <id>http://yoursite.com/2018/10/16/python05/</id>
    <published>2018-10-16T11:14:33.504Z</published>
    <updated>2018-07-23T09:44:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><p>列表生成式通常是结合range()函数一起使用的，所以在介绍列表生成式前，我们先介绍Python的内置函数range()的使用方法。<br>Python 的内置函数range() 函数可创建一个整数序列，一般和 for 循环连用。<br>语法格式： range(start,end[,step])。<br>start：起始下标（可选）。默认为0，例如range(5)等价于range(0，5)等价于[0,1,2,3,4]。<br>end：终止下标。例如range(0,5)等价于[0,1,2,3,4]，注意不包括终止下标5。<br>step：步长（可选）。默认为1，例如range(0,3,1)等价于range(0,3)；range(0,6,2)等价于[0,2,4,6]。<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#range类型，range打印的是下标，range(,,步长)，可打印间隔数</span></span><br><span class="line"><span class="built_in">print</span>(range(5))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(range(5))) <span class="comment">#&lt;class 'range'&gt;</span></span><br><span class="line"></span><br><span class="line">lists=[<span class="string">'jack'</span>,<span class="string">'Rose'</span>,<span class="string">'Bigbang'</span>,<span class="string">'郭麒麟'</span>]</span><br><span class="line"><span class="built_in">print</span>(lists[3])</span><br><span class="line"><span class="built_in">print</span>(len(lists)) <span class="comment">#len打印列表长度</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(lists)):</span><br><span class="line">    <span class="built_in">print</span>(i)     <span class="comment">#0 1 2 3 打印长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(2,14,2): <span class="comment">#相当于每隔一个数取一个数</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="comment"># i+=2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(14,2,-1): <span class="comment">#倒着打印</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">listNum=[1,2,3,4,5,6]</span><br><span class="line"><span class="built_in">print</span>(len(listNum))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(listNum)-1,-1,-1): <span class="comment">#654321,len=6,下标到5，从0开始，range                                      不包后，所以取-1，倒着打印</span></span><br><span class="line">    <span class="built_in">print</span>(listNum[i])</span><br><span class="line"></span><br><span class="line">listNum=[1,2,3,4,5,6]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> listNum:</span><br><span class="line">    <span class="built_in">print</span>(i*i)</span><br></pre></td></tr></table></figure></p><p>通过表达式的形式来使用列表生成式，同时如果列表是数字且有规律，可以通过range()函数来生成的，这样我们就能用下面的一行代码，实现上述代码的所有功能。<br>                   [x*x for x in range(1,5)]<br>                   [1, 4, 9, 16]<br>利用列表生成式可以用一行语句代替循环生成上面的list。<br>（2）for循环后面还可以加上if判断<br>（3）两层循环[m + n for m in ‘ABC’ for n in ‘XYZ’]<br>（4）通过列表生成式，可以很容易生成有规律的序列。<br>语法格式：<br>[function(x) for x in list]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; data = [1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; def func(x):</span><br><span class="line">...     <span class="built_in">return</span> x*x</span><br><span class="line">&gt;&gt;&gt; [func(x) <span class="keyword">for</span> x <span class="keyword">in</span> data]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列表生成式[代码段 for 变量 in 对象  代码]</span></span><br><span class="line">str1=[<span class="string">'jack'</span>,<span class="string">'rose'</span>,<span class="string">'bigbang'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="built_in">print</span>(i.upper()) <span class="comment">#循环遍历，把所有字母都变成大写</span></span><br><span class="line"><span class="built_in">print</span>([i.upper() <span class="keyword">for</span> i <span class="keyword">in</span> str1])  <span class="comment">#列表生成式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[1×1, 2×2, 3×3,…, 10×10]</span></span><br><span class="line">l=[]</span><br><span class="line">l=[i*i <span class="keyword">for</span> i <span class="keyword">in</span> range(1,11)]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"></span><br><span class="line">l=[]</span><br><span class="line">l=[i*i <span class="keyword">for</span> i <span class="keyword">in</span> range(1,11) <span class="keyword">if</span> i%2==0]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'ABC'</span>:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">'abc'</span>:</span><br><span class="line">        <span class="built_in">print</span>(i+j)</span><br><span class="line"></span><br><span class="line">l=[i+j <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">'abc'</span>]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment">#使用函数def</span></span><br><span class="line">def sum(m,n=1):</span><br><span class="line">    a=n+m</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">sum(5)    <span class="comment">#调用参数时，如果没有定义实参，按照形参计算，如果定义了实参，按实参执行</span></span><br><span class="line">sum(5,3)  </span><br><span class="line"></span><br><span class="line">list1=[1,2,3,4]</span><br><span class="line">def funs(n):</span><br><span class="line">    <span class="built_in">return</span> n*n</span><br><span class="line"><span class="built_in">print</span>(funs(5))</span><br><span class="line"><span class="built_in">print</span>([funs(m) <span class="keyword">for</span> m <span class="keyword">in</span> list1]) </span><br><span class="line"></span><br><span class="line">range(1,5)==range <span class="comment">#str  int </span></span><br><span class="line"><span class="built_in">print</span>(range)</span><br><span class="line"><span class="built_in">print</span>(list(range(1,5)))  <span class="comment">#可将range类型转为list</span></span><br></pre></td></tr></table></figure><p>总结：内置函数range()可以生成一个有规律的数字序列，我们可以通过列表表达式很方便的生成一个列表（可以是数字列表，字符串列表等）。<br>Python最大的优势和特点就在于它的简洁性，能用最短的代码实现更多的功能。</p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>Python提供切片（Slice）操作符来截取指定索引范围的序列（列表/元组），可以很方便地获取序列的子序列。<br>L[a:b]表示从索引a开始取，直到索引b为止，但不包括索引b。<br>取前3个元素，用一行代码就可以完成切片。<br>从索引1开始，取出2个元素：<br>支持倒数切片。L[-1]取倒数第一个元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切片，截取列表对应的值</span></span><br><span class="line">lists=[<span class="string">'jack'</span>,<span class="string">'Rose'</span>,<span class="string">'Bigbang'</span>,<span class="string">'郭麒麟'</span>,<span class="string">'周杰伦'</span>,<span class="string">'王力宏'</span>,<span class="string">'胡歌'</span>,<span class="string">'靳东'</span>]</span><br><span class="line"><span class="built_in">print</span>(lists[2])   <span class="comment">#按下标取</span></span><br><span class="line"><span class="built_in">print</span>(lists[0:])     <span class="comment">#取全部值</span></span><br><span class="line"><span class="built_in">print</span>(lists[::2])    <span class="comment">#取奇数值</span></span><br><span class="line"><span class="built_in">print</span>(lists[::-2])   <span class="comment">#取偶数值倒着</span></span><br><span class="line"><span class="built_in">print</span>(lists[2::-1])  </span><br><span class="line"><span class="built_in">print</span>(lists[-2:-9:-2]) <span class="comment">#取奇数值倒着</span></span><br><span class="line"><span class="built_in">print</span>(lists[-5:-2])</span><br><span class="line"></span><br><span class="line">listTwo=list(range(100))</span><br><span class="line"></span><br><span class="line">(listTwo[-10::-1])</span><br><span class="line"><span class="built_in">print</span>(listTwo[-10:-1])</span><br><span class="line"><span class="built_in">print</span>(listTwo[:-10])  <span class="comment">#取到-10,0-89</span></span><br><span class="line"><span class="built_in">print</span>(listTwo[-10:])  <span class="comment">#从-10取到-1,90-99</span></span><br><span class="line"><span class="built_in">print</span>(listTwo[11:21]) </span><br><span class="line"><span class="built_in">print</span>(listTwo[:11:2])</span><br><span class="line"><span class="built_in">print</span>(listTwo[5::5])  <span class="comment">#取5的倍数</span></span><br></pre></td></tr></table></figure><h3 id="元组，字符串-列表"><a href="#元组，字符串-列表" class="headerlink" title="元组，字符串,列表"></a>元组，字符串,列表</h3><p>tuple切片、字符串切片<br>tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple。<br>字符串’xxx’也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串。<br>字典和集合都是无序的，不能使用切片<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串，列表，元组，字典，集合</span></span><br><span class="line">str=<span class="string">'hello world'</span></span><br><span class="line"><span class="built_in">print</span>(str[::-1])  <span class="comment">#倒着</span></span><br><span class="line"><span class="built_in">print</span>(str[2:7])</span><br><span class="line"></span><br><span class="line">lists=[<span class="string">'jack'</span>,<span class="string">'Rose'</span>,<span class="string">'Bigbang'</span>,<span class="string">'郭麒麟'</span>,<span class="string">'周杰伦'</span>,<span class="string">'王力宏'</span>,<span class="string">'胡歌'</span>,<span class="string">'靳东'</span>]</span><br><span class="line"><span class="built_in">print</span>(lists[-2:-5:-1])</span><br><span class="line"><span class="built_in">print</span>(lists[-5:-2])  </span><br><span class="line"><span class="comment"># big,sml,-1</span></span><br><span class="line"><span class="comment"># sml,big,1</span></span><br><span class="line">tuples=<span class="string">'jack'</span>,<span class="string">'Rose'</span>,<span class="string">'Bigbang'</span>,<span class="string">'郭麒麟'</span>,<span class="string">'周杰伦'</span>,<span class="string">'王力宏'</span>,<span class="string">'胡歌'</span>,<span class="string">'靳东'</span></span><br><span class="line"><span class="built_in">print</span>(tuples[::-1])</span><br><span class="line"></span><br><span class="line"><span class="comment">#字典不能使用切片，集合也不能使用切片</span></span><br><span class="line">dicts=&#123;<span class="string">'uname'</span>:<span class="string">'Jack'</span>,<span class="string">'age'</span>:<span class="string">'16'</span>,<span class="string">'sex'</span>:<span class="string">'女'</span>,<span class="string">'hei'</span>:<span class="string">'25kg'</span>&#125;</span><br><span class="line"><span class="comment"># print(dicts[::-1])   no</span></span><br></pre></td></tr></table></figure></p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>Python迭代器（Iterator）可以记住遍历的位置的对象，从第一个元素开始访问，然后依次访问直到所有的元素都被遍历。<br>迭代器只能往前不会后退，有两个基本方法：iter()和next()。<br>iter()用来创建迭代器，next()用来访问迭代器的下一个元素。<br>字符串、列表或元组对象都能用来创建迭代器，同时也支持for循环遍历。</p><p>一个一个读取列表、元组迭代器中的值<br>iter(object[, sentinel])函数用来生成迭代器<br>    object – 支持迭代的集合对象。<br>    sentinel – 如果传递了第二个参数，则参数 object 必须是一个可调用的对象（如，函数），此时，iter 创建了一个迭代器对象，每次调用这个迭代器对象的<strong>next</strong>()方法时，都会调用 object。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#迭代器,迭代器只能往前不会后退，有两个基本方法：iter()和next()</span></span><br><span class="line"><span class="comment"># iter()用来创建迭代器，next()用来访问迭代器的下一个元素。</span></span><br><span class="line"><span class="comment"># 字符串、列表或元组对象都能用来创建迭代器，同时也支持for循环遍历</span></span><br><span class="line">list1=[<span class="string">'奥迪'</span>,<span class="string">'凯迪拉克'</span>,<span class="string">'法拉利'</span>,<span class="string">'林肯'</span>]</span><br><span class="line">iter_list=iter(list1)</span><br><span class="line"><span class="built_in">print</span>(next(iter_list))</span><br><span class="line"><span class="built_in">print</span>(next(iter_list))</span><br><span class="line"><span class="built_in">print</span>(next(iter_list))</span><br><span class="line"><span class="built_in">print</span>(next(iter_list))</span><br></pre></td></tr></table></figure></p><p>字典的迭代：<br>由于字典是无序的，因此迭代出的结果顺序可能与上述结果不一样。<br>默认情况下，dict迭代的是key。如果要迭代value，可以用for value in d.values()，如果要同时迭代key和value，可以用for k, v in d.items()。<br>集合的迭代：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="built_in">set</span>([1,2,3,4])</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> s:</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure></p><p>判断是否为Iterable类型:<br>对于一个对象，通常是通过collections模块的Iterable类型判断该对象是否是一个可迭代的对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from collections import Iterable</span><br><span class="line"><span class="built_in">print</span>(isinstance(<span class="string">'abc'</span>, Iterable))<span class="comment"># str是否可迭代</span></span><br><span class="line"><span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(isinstance([1,2,3], Iterable))<span class="comment"># list是否可迭代</span></span><br><span class="line"><span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(isinstance(123, Iterable))<span class="comment"># 整数是否可迭代</span></span><br><span class="line"><span class="comment">#False</span></span><br></pre></td></tr></table></figure></p><h3 id="迭代器—列表实现下标循环"><a href="#迭代器—列表实现下标循环" class="headerlink" title="迭代器—列表实现下标循环"></a>迭代器—列表实现下标循环</h3><p>如果要对list实现类似Java那样的下标循环，要怎么办呢？<br>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。<br>Python内置的enumerate函数可以把一个list变成索引—元素对，这样就可以在for循环中同时迭代索引和元素本身。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中</span></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">for i, value in enumerate(['</span>A<span class="string">', '</span>B<span class="string">', '</span>C<span class="string">']):</span></span><br><span class="line"><span class="string">    print(i, value)      #0A 1B 2C</span></span><br></pre></td></tr></table></figure></p><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>生成器（generator）：生成器是一次生成一个值的特殊类型函数<br>当列表元素很多，而列表后续元素可以通过某种算法推导出来，我们就不用存储完整的列表，从而节省大量的空间。生成器可以利用for循环访问，也可以利用next()来一次访问元素。<br>创建生成器的两种方法：</p><ol><li>把一个列表生成式的[]改成()</li><li>在函数代码中添加yield关键字，在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回yield的值。并在下一次执行 next()方法时从当前位置继续运行。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一种是把一个列表生成式的[]改成()。例如：</span></span><br><span class="line">list = [2*x <span class="keyword">for</span> x <span class="keyword">in</span> range(3)]                    </span><br><span class="line"><span class="comment">#创建列表List=[0,2,4], range(3)=[0,1,2]</span></span><br><span class="line"><span class="built_in">print</span>(list)</span><br><span class="line"><span class="comment">#将列表生成时改为生成器</span></span><br><span class="line">gene=(2*x <span class="keyword">for</span> x <span class="keyword">in</span> range(3))</span><br><span class="line"><span class="built_in">print</span>(next(gene))</span><br><span class="line"><span class="built_in">print</span>(next(gene))</span><br><span class="line"><span class="built_in">print</span>(next(gene))</span><br><span class="line"><span class="built_in">print</span>(next(gene))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> gene:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">def fib(max):</span><br><span class="line">    n, a, b = 0, 0, 1</span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="comment">#print(b)</span></span><br><span class="line">        yield b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + 1</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'done'</span></span><br><span class="line">num=fib(5)</span><br><span class="line"><span class="built_in">print</span>(next(num))</span><br><span class="line"><span class="built_in">print</span>(next(num))</span><br><span class="line"><span class="built_in">print</span>(next(num))</span><br></pre></td></tr></table></figure></li></ol><h2 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a>迭代器与生成器</h2><p>迭代器（Iterator）就是具有next方法（这个方法在调用时不需要任何参数）的对象。在调用next方法时，迭代器会返回它的下一个值。如果next方法被调用，但迭代器没有值可以返回，就会引发一个StopIteration异常。<br>生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。<br>把list、dict、str等Iterable变成Iterator，可以使用iter()函数。</p><p>你可能会问，为什么list、dict、str等数据类型不是Iterator？<br>迭代的关键是什么？为什么不使用列表？<br>这是因为Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。<br>可以把这个数据流看作是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。</p><p>Iterator甚至可以表示一个无限大的数据流，例如全体自然数。<br>使用list是永远不可能存储全体自然数的。<br>迭代器可以计算一个值时获取一个值，而列表只能一次性获取所有值。<br>如果有很多值，列表就会占用太多的内存。<br>使用迭代器更加简单、更优雅。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;列表生成式&quot;&gt;&lt;a href=&quot;#列表生成式&quot; class=&quot;headerlink&quot; title=&quot;列表生成式&quot;&gt;&lt;/a&gt;列表生成式&lt;/h2&gt;&lt;p&gt;列表生成式通常是结合range()函数一起使用的，所以在介绍列表生成式前，我们先介绍Python的内置函数range()的使用方法。&lt;br&gt;Python 的内置函数range() 函数可创建一个整数序列，一般和 for 循环连用。&lt;br&gt;语法格式： range(start,end[,step])。&lt;br&gt;start：起始下标（可选）。默认为0，例如range(5)等价于range(0，5)等价于[0,1,2,3,4]。&lt;br&gt;end：终止下标。例如range(0,5)等价于[0,1,2,3,4]，注意不包括终止下标5。&lt;br&gt;step：步长（可选）。默认为1，例如range(0,3,1)等价于range(0,3)；range(0,6,2)等价于[0,2,4,6]。&lt;br&gt;
    
    </summary>
    
    
      <category term="calm" scheme="http://yoursite.com/tags/calm/"/>
    
  </entry>
  
  <entry>
    <title>python基础2——数据类型转换</title>
    <link href="http://yoursite.com/2018/10/16/python02/"/>
    <id>http://yoursite.com/2018/10/16/python02/</id>
    <published>2018-10-16T11:14:33.484Z</published>
    <updated>2018-07-23T09:50:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>数据类型转换分为两种：自动转换和强制转换<br>自动转换<br>    自动转换不需要人工干预<br>    自动类型转换多发生在运算或者判断过程中<br>    转换时向着更加精确的类型转换<br>强制转换<br>    根据程序需要，由程序员人为改变数据类型的方式就叫做强制转换。例：int()、float()、str()等等。<br><a id="more"></a></p><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p>整型说自动转换：<br>布尔型True转换成数字1,False转换成数字0<br>整型数据只有使用+ － * ** //运算符，并且不与浮点数进行运算，才能继续保持为整型数<br>整形进行除法（/）运算，会自动转为浮点型<br>整形强制转换：<br>int()函数可以将浮点数转换为整数，返回其整数部分，舍弃其小数部分。<br>整型字符串可以转换成整型，浮点数字符串不能转换成整型<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#整型自动转换：（1）布尔型True转换成数字1,False转换成数字0（2)整型数据只有使用+ － * ** //运算符，并且不与浮#点数进行运算，才能继续保持为整型数(3)整形进行除法（/）运算，会自动转为浮点型</span></span><br><span class="line">num=10</span><br><span class="line">num1=True</span><br><span class="line"><span class="built_in">print</span>(num+num1) <span class="comment">#11</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num+num1)) <span class="comment">#int   </span></span><br><span class="line">num2=.5</span><br><span class="line"><span class="built_in">print</span>(num+num2) <span class="comment">#10.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num+num2)) <span class="comment">#float</span></span><br><span class="line">num3=2</span><br><span class="line"><span class="built_in">print</span>(num/num3) <span class="comment">#5.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num/num3)) <span class="comment">#float</span></span><br><span class="line"><span class="comment">#整型强制转换：（1）int()函数可以将浮点数转换为整数，返回其整数部分，舍弃其小数部分。</span></span><br><span class="line"><span class="comment">#(2)整型字符串可以转换成整型，浮点数字符串不能转换成整型</span></span><br><span class="line"><span class="built_in">print</span>(int(3.14159))<span class="comment">#3</span></span><br><span class="line"><span class="built_in">print</span>(int(False))<span class="comment">#1</span></span><br><span class="line"><span class="built_in">print</span>(int(True))<span class="comment">#0</span></span><br><span class="line"><span class="built_in">print</span>(int(<span class="string">'250'</span>))<span class="comment">#250</span></span><br><span class="line"><span class="built_in">print</span>(int(<span class="string">'250.5'</span>))<span class="comment">#错误</span></span><br><span class="line"><span class="built_in">print</span>(int(<span class="string">'10k'</span>))<span class="comment">#错误</span></span><br><span class="line"><span class="built_in">print</span>(int(<span class="string">'abc123'</span>))<span class="comment">#错误</span></span><br></pre></td></tr></table></figure></p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><p>自动转换<br>    整形和浮点型进行运算获得的都是浮点型<br>强制转换转换规则<br>    整形转换之后为浮点型，后面+.0<br>    浮点数不需要转换，转换之后保持原状<br>    布尔值转换 True转为1.0，False转为0.0<br>    字符串中纯整数和浮点数字符串可以转换，其他不能转换<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#浮点型自动转换：整形和浮点型进行运算获得的都是浮点型</span></span><br><span class="line">num=10</span><br><span class="line">f=3.14</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num+f)) <span class="comment">#float</span></span><br><span class="line"><span class="comment">#浮点型强制转换：（1）整形转换之后为浮点型，后面+.0（2）浮点数不需要转换，转换之后保持原状（3）布尔值转换True#转为1.0，False转为0.0（4）字符串中纯整数和浮点数字符串可以转换，其他不能转换（5）round()函数可以将小数部分四舍五入。（6）使用float.hex()方法，可以将浮点数以十六进制形式表示为字符串，相反的转换可以#float.fromhex()实现。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(10))  <span class="comment">#10.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(3.14)) <span class="comment">#3.14</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(True))  <span class="comment">#1.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(False))  <span class="comment">#0.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="string">'100'</span>))  <span class="comment">#100.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">float</span>(<span class="string">'100'</span>))) <span class="comment">#float</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="string">'3.14'</span>))  <span class="comment"># 3.14</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">float</span>(<span class="string">'3.14'</span>)))  <span class="comment">#flaot</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="string">'100k'</span>)) <span class="comment">#错误</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="string">'3.14e'</span>)) <span class="comment">#错误</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="string">'3.14e2'</span>)) <span class="comment">#314.0</span></span><br><span class="line"></span><br><span class="line">num=3.157</span><br><span class="line"><span class="built_in">print</span>(round(num)) <span class="comment">#四舍五入</span></span><br><span class="line"></span><br><span class="line">n=10</span><br><span class="line"><span class="built_in">print</span>((n/3).is_integer()) <span class="comment">#？判断n/3是不是integer类型</span></span><br><span class="line"><span class="built_in">print</span>(float.as_integer_ratio(0.25)) <span class="comment">#(1,4)float转为元组类型</span></span><br><span class="line"><span class="built_in">print</span>(float.as_integer_ratio(0.7)) <span class="comment">#计算机的浮点数不一样，比如0.1+0.2=0.30000000000000004</span></span><br><span class="line"><span class="built_in">print</span>(float.hex(4.2)) <span class="comment">#0x1.0cccccccccccdp+2将浮点数转为十六进制的字符串</span></span><br><span class="line"><span class="built_in">print</span>(float.fromhex(0x1.2000000000000p+1)) <span class="comment">#？</span></span><br></pre></td></tr></table></figure></p><p>round()函数可以将小数部分四舍五入。<br>将浮点数转换为最近邻的整数<br>（floor()：仅保留整数。ceil()：将小数部分一律向整数部分进位）<br>浮点数的小数表示可以使用float.as_integer_ratio()方法获取，比如，给定浮点数x=0.25，则调用float.as_integer_ratio(x)将返回(1,4) 。<br>使用float.hex()方法，可以将浮点数以十六进制形式表示为字符串，相反的转换可以使用float.fromhex()实现。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import math <span class="comment">#需引进math函数</span></span><br><span class="line"><span class="built_in">print</span>(math.floor(3.8)) <span class="comment">#3</span></span><br><span class="line"><span class="built_in">print</span>(math.ceil(3.2))  <span class="comment">#4</span></span><br></pre></td></tr></table></figure></p><h2 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h2><p>将其他数据转换为复数<br>    整形转换之后变为（整数+0j）<br>    浮点型转换之后变成（浮点数+0j）<br>    布尔值转换之后 True-&gt;（1+0j）False-&gt;（0j）<br>    字符串的纯整型和浮点型都可以转换，其他不能转换<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#复数，将其他数据转换为复数：（1）整型转换之后变为（整数+0j）（2）浮点型转换之后变成（浮点数+0j）（3）布尔值转#换之后 True-&gt;（1+0j）False-&gt;（0j）（4）字符串，纯整型和浮点型都可以转换，其他不能转换</span></span><br><span class="line"><span class="built_in">print</span>(complex(5))</span><br><span class="line"><span class="built_in">print</span>(complex(2.5))</span><br><span class="line"><span class="built_in">print</span>(complex(True))</span><br><span class="line"><span class="built_in">print</span>(complex(False))</span><br><span class="line"><span class="built_in">print</span>(complex(<span class="string">'3'</span>))</span><br><span class="line"><span class="built_in">print</span>(complex(<span class="string">'3.14'</span>))</span><br><span class="line"><span class="built_in">print</span>(complex(<span class="string">'3k'</span>)) <span class="comment">#错误</span></span><br><span class="line"><span class="built_in">print</span>(complex(<span class="string">'3abc'</span>)) <span class="comment">#错误</span></span><br><span class="line"><span class="built_in">print</span>(complex(<span class="string">'abc3'</span>)) <span class="comment">#错误</span></span><br><span class="line">```</span><br><span class="line"><span class="comment">## 布尔型</span></span><br><span class="line">自动转换：</span><br><span class="line">转为整数，True自动转为1，False转为0</span><br><span class="line">转为浮点数，True自动转为1.0，False转为0.0</span><br><span class="line">强制转换：转为False的情况是有限的</span><br><span class="line">整形 0</span><br><span class="line">浮点型 0.0</span><br><span class="line">复数 0+0j</span><br><span class="line">布尔值 <span class="literal">false</span></span><br><span class="line">字符串 ‘’空字符串</span><br><span class="line">列表  []空列表</span><br><span class="line">元组  ()空元组</span><br><span class="line">字典  &#123;&#125;空字典</span><br><span class="line">集合  <span class="built_in">set</span>()空集合</span><br><span class="line">转为True的情况是无限的，除了False的情况，其他都为True</span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#布尔值——自动：（1）转为整数，True自动转为1（2）False转为0转为浮点数，True自动转为1.0，False转为0.0</span></span><br><span class="line">b=True</span><br><span class="line">b1=False</span><br><span class="line">num=2</span><br><span class="line">f=3.14</span><br><span class="line"><span class="built_in">print</span>(b+num) <span class="comment">#3 </span></span><br><span class="line"><span class="built_in">print</span>(b1+f) <span class="comment">#3.14</span></span><br><span class="line"><span class="comment">#布尔强制转换：（1）转为False有限，有整形0、浮点型0.0、复数0+0j、布尔值false、字符串‘’空字符串、列表[]空列表、元组()空元组(特殊）、字典&#123;&#125;空字典、集合set()空集合。（2）转为True是有限的，除了False的情况，其他都为True</span></span><br><span class="line"><span class="built_in">print</span>(bool(0))  </span><br><span class="line"><span class="built_in">print</span>(bool(0.0))</span><br><span class="line"><span class="built_in">print</span>(bool(0+0j))</span><br><span class="line"><span class="built_in">print</span>(bool(<span class="string">''</span>))  <span class="comment">#以上都为False</span></span><br><span class="line">list=[]</span><br><span class="line"><span class="built_in">print</span>(bool(list)) <span class="comment">#False</span></span><br><span class="line">dict=&#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(bool(dict))  <span class="comment">#False</span></span><br><span class="line">dict=&#123;0&#125;</span><br><span class="line"><span class="built_in">print</span>(bool(dict)) <span class="comment">#True</span></span><br><span class="line"><span class="built_in">set</span>=&#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(bool(<span class="built_in">set</span>)) <span class="comment">#False</span></span><br><span class="line"><span class="built_in">set</span>=&#123;0&#125;</span><br><span class="line"><span class="built_in">print</span>(bool(<span class="built_in">set</span>)) <span class="comment">#True</span></span><br><span class="line">tuple=()</span><br><span class="line"><span class="built_in">print</span>(bool(tuple))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>((tuple))) <span class="comment">#False  tuple</span></span><br><span class="line">tuple=(0)</span><br><span class="line"><span class="built_in">print</span>(bool(tuple))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>((tuple))) <span class="comment">#依然为False,类型为int</span></span><br><span class="line"><span class="comment">#判断中的自动转换</span></span><br><span class="line"><span class="keyword">if</span> 120 :(bool  120num-&gt;bool)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'true'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'false'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>自动转换：如果字符串中包含.或e或E，则转换成浮点型；否则转换成整型<br>其他类型只要加上单引号（’）、双引号（“）、三引号（’’’）就可以转换为字符串类型<br>强制转换：str(x)将对象 x 转换为字符串<br>repr(x)将对象 x 转换为表达式字符串(原样输出)<br>加号 (+) 是字符串的连接符， 星号 (*) 表示复制当前字符串，紧跟的数字为复制的次数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串强制转换：（1）str(x)将对象 x 转换为字符串（2）repr(x)将对象 x 转换为表达式字符串(原样输出)</span></span><br><span class="line"><span class="comment">#（3）加号 (+) 是字符串的连接符， 星号 (*) 表示复制当前字符串，紧跟的数字为复制的次数</span></span><br><span class="line">var=<span class="string">'one two thr'</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(var)) <span class="comment">#str</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(str(var))) <span class="comment">#str</span></span><br><span class="line"><span class="built_in">print</span>(str(var)) <span class="comment">#str输出one two thr</span></span><br><span class="line"><span class="built_in">print</span>(var)</span><br><span class="line"><span class="built_in">print</span>(repr(var)) <span class="comment">#repr输出'one two thr'</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'hello'</span>+<span class="string">'world'</span>)  <span class="comment">#连接字符串</span></span><br><span class="line">str1=<span class="string">'nice'</span></span><br><span class="line"><span class="built_in">print</span>(str1*2)</span><br></pre></td></tr></table></figure></p><p>eval用法，字符串转为其他类型<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">str=<span class="string">'pow(2,3)'</span></span><br><span class="line">newstr=<span class="built_in">eval</span>(str)</span><br><span class="line"><span class="built_in">print</span>(newstr) <span class="comment">#2^3=8,eval用法</span></span><br><span class="line"></span><br><span class="line">str1=<span class="string">"['one','two','thr']"</span>       <span class="comment"># 如果str1="'one'",用eval不能转换为list类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(str1))  <span class="comment">#str，在引号里面</span></span><br><span class="line">newstr=<span class="built_in">eval</span>(str1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(newstr)) <span class="comment">#list  把str类型转为列表类型</span></span><br><span class="line"><span class="built_in">print</span>(newstr)</span><br><span class="line">str1=<span class="string">"&#123;'one','two','thr'&#125;"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(str1))  <span class="comment">#str，在引号里面</span></span><br><span class="line">newstr=<span class="built_in">eval</span>(str1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(newstr))  <span class="comment">#可通过eval把字符串类型转为列表、元组、集合类型</span></span><br></pre></td></tr></table></figure></p><h2 id="列表、元组、字典、集合相互转换"><a href="#列表、元组、字典、集合相互转换" class="headerlink" title="列表、元组、字典、集合相互转换"></a>列表、元组、字典、集合相互转换</h2><p>数字类型不能转；字典，集合，元组，字符串，这四个是可以来回进行转换的<br>字符串转换时每个字符变成列表中的一个值<br>list(s) 将序列 s 转换为一个列表<br>tuple（s）将序列 s 转换为一个元组<br>set（s）将s转为集合类型<br>dict（s）将s转为字典类型：(1)单独一个数据是不能转为字典类型的(2)其他类型转为字典是需要按照指定的格式才可以转化(3)字典类型转换时，仅将字典的键部分转换为列表，忽略值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">stu=&#123;<span class="string">'name'</span>:<span class="string">'小蓝'</span>,<span class="string">'age'</span>:<span class="string">'18'</span>,<span class="string">'sex'</span>:<span class="string">'男'</span>,<span class="string">'height'</span>:<span class="string">'180'</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(list(stu))</span><br><span class="line"><span class="built_in">print</span>(tuple(stu))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(stu))</span><br><span class="line">str=<span class="string">'abcde'</span></span><br><span class="line"><span class="built_in">print</span>(list(str))</span><br><span class="line"><span class="built_in">print</span>(tuple(str))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(str))</span><br><span class="line"><span class="built_in">print</span>(dict())    <span class="comment">#&#123;&#125;空值，单独数据不能转为字典</span></span><br></pre></td></tr></table></figure></p><p>#作业<br>获取19-180之间的随机数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import math</span><br><span class="line">num=random.random()*160+19</span><br><span class="line"><span class="built_in">print</span>(math.floor(num))</span><br></pre></td></tr></table></figure></p><p>将list1=[‘one’,’two’,’thr’]拼接成一个字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'thr'</span>]</span><br><span class="line">s=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    s+=i</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure></p><p>将当前字典user = {‘姓名’:’张三’,’年龄’:’18’,’性别’:’男’}输出字典user的key,以’,’ 连接，如 ‘姓名，年龄，性别’。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一种</span></span><br><span class="line">user = &#123;<span class="string">'姓名'</span>:<span class="string">'张三'</span>,<span class="string">'年龄'</span>:<span class="string">'18'</span>,<span class="string">'性别'</span>:<span class="string">'男'</span>&#125;</span><br><span class="line">key=list(user.keys())</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line">uk=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    <span class="keyword">if</span> i!=key[2]:</span><br><span class="line">        uk+=i+<span class="string">','</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        uk+=i</span><br><span class="line"><span class="built_in">print</span>(repr(uk))</span><br><span class="line"><span class="comment">#第二种</span></span><br><span class="line">user = &#123;<span class="string">'姓名'</span>:<span class="string">'张三'</span>,<span class="string">'年龄'</span>:<span class="string">'18'</span>,<span class="string">'性别'</span>:<span class="string">'男'</span>&#125;</span><br><span class="line">i = 0</span><br><span class="line"><span class="keyword">for</span> str2 <span class="keyword">in</span> user: </span><br><span class="line">    i+=1</span><br><span class="line">    <span class="keyword">if</span> i &lt; len(user):</span><br><span class="line">        <span class="built_in">print</span>(str2,end =<span class="string">','</span>)  </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(str2,end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据类型转换分为两种：自动转换和强制转换&lt;br&gt;自动转换&lt;br&gt;    自动转换不需要人工干预&lt;br&gt;    自动类型转换多发生在运算或者判断过程中&lt;br&gt;    转换时向着更加精确的类型转换&lt;br&gt;强制转换&lt;br&gt;    根据程序需要，由程序员人为改变数据类型的方式就叫做强制转换。例：int()、float()、str()等等。&lt;br&gt;
    
    </summary>
    
    
      <category term="calm" scheme="http://yoursite.com/tags/calm/"/>
    
  </entry>
  
  <entry>
    <title>python基础九（二）——函数</title>
    <link href="http://yoursite.com/2018/10/16/python-9(2)/"/>
    <id>http://yoursite.com/2018/10/16/python-9(2)/</id>
    <published>2018-10-16T11:14:33.474Z</published>
    <updated>2018-07-26T09:54:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>python 使用 lambda 来创建匿名函数。<br>lambda只是一个表达式，函数体比def简单很多。<br>lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。<br>lambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。<br>虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。<br>语法：<br>lambda [arg1 [,arg2,…..argn]]:expression<br><a id="more"></a><br>匿名函数的优缺点：<br>优点<br>    书写简单，不需要def关键词<br>    不需要费脑子想函数名（匿名函数）<br>    看起来高大上<br>缺点<br>    bambda表达式功能受限，无法使用循环和功能分支<br>    复杂的操作，不适合bambda表达式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sums=lambda a,b:a+b</span><br><span class="line"><span class="built_in">print</span>(sums(1,2)) <span class="comment">#实现加法</span></span><br><span class="line"></span><br><span class="line">def fun():</span><br><span class="line">    <span class="built_in">return</span> True</span><br><span class="line"><span class="built_in">print</span>(fun())</span><br><span class="line"></span><br><span class="line">funs=lambda :True</span><br><span class="line"><span class="built_in">print</span>(funs)  <span class="comment">#&lt;function &lt;lambda&gt; at 0x0000000001E799D8&gt;</span></span><br><span class="line"><span class="built_in">print</span>(funs())  <span class="comment">#实现返回True</span></span><br><span class="line"></span><br><span class="line">asum=lambda a:a*a</span><br><span class="line"><span class="built_in">print</span>(asum(3))  <span class="comment">#实现求i*i</span></span><br><span class="line"></span><br><span class="line">asum=lambda a=5:a*a</span><br><span class="line"><span class="built_in">print</span>(asum())  <span class="comment">#25</span></span><br><span class="line"><span class="built_in">print</span>(asum(3))  <span class="comment">#9  #实参和形参</span></span><br><span class="line"></span><br><span class="line">bsum=lambda a,b:a-b</span><br><span class="line"><span class="built_in">print</span>(bsum(b=20,a=10))  <span class="comment">#-10</span></span><br><span class="line"></span><br><span class="line">str1=<span class="string">'this is\nan\tisland'</span></span><br><span class="line">new=lambda a:<span class="string">' '</span>.join(a.split())</span><br><span class="line"><span class="built_in">print</span>(new(str1))</span><br></pre></td></tr></table></figure></p><h3 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h3><p>map() 会根据提供的函数对指定序列做映射。<br>第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def mul(a):</span><br><span class="line">    <span class="built_in">return</span> a*a</span><br><span class="line"><span class="built_in">print</span>(list(map(mul,[1,2,3,4,5]))) <span class="comment">#[1,4,9,16,25]</span></span><br><span class="line"></span><br><span class="line">mul=lambda a:a*a</span><br><span class="line"><span class="built_in">print</span>(list(map(mul,[1,2,3,4,5])))</span><br></pre></td></tr></table></figure></p><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>一个程序的所有的变量并不是在哪个位置都可以访问的。访问权限决定于这个变量是在哪里赋值的。</p><p>变量的作用域决定了在哪一部分程序你可以访问哪个特定的变量名称。两种最基本的变量作用域如下：<br>    全局变量<br>    局部变量</p><p>定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。<br>局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#局部变量，全局变量</span></span><br><span class="line"></span><br><span class="line">name=<span class="string">'生如夏花'</span> <span class="comment">#全局</span></span><br><span class="line">def fun():</span><br><span class="line">    name=<span class="string">'清白之年'</span>  <span class="comment">#局部</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line"><span class="built_in">print</span>(name)  <span class="comment">#生如夏花</span></span><br><span class="line">fun()        <span class="comment">#清白之年</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#全局的变量可以在局部进行使用，局部的变量不能在全局使用</span></span><br><span class="line">name=<span class="string">'生如夏花'</span></span><br><span class="line">def fun():</span><br><span class="line">    <span class="built_in">print</span>(name)  <span class="comment">#在局部可以使用全局变量</span></span><br><span class="line">fun()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def fun():</span><br><span class="line">    name=<span class="string">'生如夏花'</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line"><span class="comment"># print(name)  #报错，name没有定义</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">'生如夏花'</span></span><br><span class="line">def fun():</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    two()</span><br><span class="line">def two():</span><br><span class="line">    name=<span class="string">'清白之年'</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">fun()    <span class="comment">#生如夏花</span></span><br><span class="line">         <span class="comment">#清白之年</span></span><br><span class="line"></span><br><span class="line">name=<span class="string">'生如夏花'</span></span><br><span class="line">def fun():</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">def two():</span><br><span class="line">    name=<span class="string">'清白之年'</span></span><br><span class="line">    fun()</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">two()</span><br><span class="line">       </span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">#全局变量-局部变量</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">name=<span class="string">'生如夏花'</span></span><br><span class="line">def one(name):</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">one(name)</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#局部变量-全局变量</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">def one():</span><br><span class="line">    name=<span class="string">'清白之年'</span></span><br><span class="line">    <span class="comment">#print(name)</span></span><br><span class="line">    <span class="built_in">return</span> name</span><br><span class="line">dname=one()</span><br><span class="line"><span class="built_in">print</span>(dname)</span><br></pre></td></tr></table></figure><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>函数可以调用其他函数，令人惊讶的是函数还可以调用自身。递归这个词对于没有接触过程序设计的人来说可能会比较陌生。简单说来就是引用（或者调用）自身的意思。<br>一个类似递归的定义如下。<br>def recursion():<br>    return recursion()<br>理论上讲此递归会永远运行下去。<br>注意：每次调用函数都会用掉一点内存，在足够多次数的函数调用发生后（在之前的调用返回后），空间就不够了，程序会以一个“超过最大递归深度”的错误信息结束。</p><p>在使用递归时，需要注意以下几点：<br>递归就是在过程或函数里调用自身<br>必须有一个明确的递归结束条件，称为递归出口。<br>注意： 切勿忘记递归出口，避免函数无限调用。</p><p>递归的优缺点：<br>优点：<br>递归使代码看起来更加整洁、优雅<br>可以用递归将复杂任务分解成更简单的子问题<br>使用递归比使用一些嵌套迭代更容易<br>缺点:<br>递归的逻辑很难调试、跟进<br>递归调用的代价高昂（效率低），因为占用了大量的内存和时间。</p><h3 id="题-理解"><a href="#题-理解" class="headerlink" title="题 理解"></a>题 理解</h3><p>求和<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sum=0</span><br><span class="line">def sums(num,sum):</span><br><span class="line">    sum+=num</span><br><span class="line">    num+=1</span><br><span class="line">    <span class="keyword">if</span> num&lt;=100:</span><br><span class="line">        sums(num,sum)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(sum)</span><br><span class="line">sums(1,sum)</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def sum1(n):</span><br><span class="line">    sum=0</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(1,n+1):</span><br><span class="line">        sum+=i</span><br><span class="line">    <span class="built_in">return</span> sum</span><br><span class="line"><span class="built_in">print</span>(sum1(10))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sum2(n):</span><br><span class="line">    <span class="keyword">if</span> n==0:</span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">return</span> n+sum2(n-1)</span><br><span class="line"><span class="built_in">print</span>(sum2(10))</span><br></pre></td></tr></table></figure><p>求1<em>1+2</em>2+…+n*n<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def sum3(n):</span><br><span class="line">    <span class="keyword">if</span> n==1:</span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">return</span> n*n+sum3(n-1)</span><br><span class="line"><span class="built_in">print</span>(sum3(3))</span><br></pre></td></tr></table></figure></p><p>4、一天小熊来到一片玉米地，兴奋的掰了若干个玉米，他发现太多了，<br>于是扔了其中一半，感觉还是有点多，于是又扔了一个后往家赶；<br>当它走了一米的时候感觉有点累，于是扔掉其中的一半加一个，<br>继续往前每走一米重复以往的动作，扔掉其中的一半加一个；<br>当它走到10米时候，发现手中就剩一个了，有点伤感，<br>也忘了开始自己摘了几个玉米了，那么你帮小熊算算，它开始掰了几个玉米？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def yumi(n,sum):</span><br><span class="line">    sum=2*sum+2</span><br><span class="line">    n-=1</span><br><span class="line">    <span class="keyword">if</span> n&gt;0:</span><br><span class="line">        yumi(n,sum)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(sum)</span><br><span class="line">yumi(10,1)</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def getyumi(length):</span><br><span class="line">    yumi=1</span><br><span class="line">    <span class="keyword">if</span> length==0:</span><br><span class="line">        yumi=1</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        yumi=2*(getyumi(length-1)+1)</span><br><span class="line">    <span class="built_in">return</span> yumi</span><br><span class="line"><span class="built_in">print</span>(getyumi(10))</span><br></pre></td></tr></table></figure><h2 id="递归函数-二元查找"><a href="#递归函数-二元查找" class="headerlink" title="递归函数-二元查找"></a>递归函数-二元查找</h2><p>假设提问者可能在想一个1~100的数字，提问者需要猜中它。当然，提问者可以耐心地猜上100次，但是真正需要猜多少次呢？<br>答案就是只需要问7次即可。第一个问题类似于“数字是否大于50？”，如果被提问者回答说数字大于50，那么就问“是否大于75”，然后继续将满足条件的值等分（排除不满足条件的值），直到找到正确答案。这个不需要太多考虑就能解答出来。这个就是所谓的二元查找。</p><p>这个递归例子的关键就是顺序，所以当找到中间元素的时候，只需要比较它和所查找的数字，如果要查找数字较大，那么该数字一定在右侧，反之在左侧。递归部分就是“继续查找数字所在的那半部分”，因为搜索的具体实现可能会和定义中完全相同。（注意搜索的算法返回的是数字应该在的位置—如果它本身不在序列中，那么所返回位置上的其实是其他数字。）</p><p>二元搜索案例</p><pre><code class="bash">def search(sequence,number,lower,upper):    <span class="keyword">if</span> lower == upper:        assert number == sequence[upper]        <span class="built_in">return</span> upper    <span class="keyword">else</span>:        middle = (lower + upper)//2        <span class="keyword">if</span> number &gt; sequence[middle]:            <span class="built_in">return</span> search(sequence,                    number,middle+1,upper)        <span class="keyword">else</span>:            <span class="built_in">return</span> search(sequence,                    number,lower,middle)</code></pre><h3 id="递归函数-循环语句VS递归"><a href="#递归函数-循环语句VS递归" class="headerlink" title="递归函数-循环语句VS递归"></a>递归函数-循环语句VS递归</h3><p>尽管递归对于前面求和的例子有效，但在那种环境中，它可能过于追求技巧了。实际上，递归在Python中并不像在prolog或Lisp这样更加深奥的语言中那样常用，因为Python强调像循环这样简单的过程式语句，循环语句通常更为自然。例如，while常常使得事情更为具体一些，并且它不需要定义一个支持递归调用的函数。<br>更好的情况，for循环为我们自动迭代，使得在大多数情况下不必使用递归（并且很可能，递归在内存空间和执行时间方面效率较低）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;匿名函数&quot;&gt;&lt;a href=&quot;#匿名函数&quot; class=&quot;headerlink&quot; title=&quot;匿名函数&quot;&gt;&lt;/a&gt;匿名函数&lt;/h2&gt;&lt;p&gt;python 使用 lambda 来创建匿名函数。&lt;br&gt;lambda只是一个表达式，函数体比def简单很多。&lt;br&gt;lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。&lt;br&gt;lambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。&lt;br&gt;虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。&lt;br&gt;语法：&lt;br&gt;lambda [arg1 [,arg2,…..argn]]:expression&lt;br&gt;
    
    </summary>
    
    
      <category term="calm" scheme="http://yoursite.com/tags/calm/"/>
    
  </entry>
  
  <entry>
    <title>python基础十七————面向对象(二)</title>
    <link href="http://yoursite.com/2018/10/16/python-19/"/>
    <id>http://yoursite.com/2018/10/16/python-19/</id>
    <published>2018-10-16T11:14:33.451Z</published>
    <updated>2018-08-10T10:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象三大特征：继承、多态、封装<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">## 继承</span></span><br><span class="line">继承是为代码重用而设计的，当我们设计一个新类时，为了代码重用可以继承一个已设计好的类。在继承关系中，原来设计好的类称为父类，新设计的类称为子类。</span><br><span class="line">子类继承父类时用class子类名（父类名）来表示。子类能继承父类的所有公有成员。在需要的时候，在子类中可通过super()来调用父类的构造函数，也可通过父类名来调用父类的构造函数。</span><br><span class="line">Python支持类的单继承，同时也支持多继承，其派生类定义如下：</span><br><span class="line">``` bash</span><br><span class="line">class son(father1,father2,father3)</span><br></pre></td></tr></table></figure></p><p>请注意基类的排列顺序，当子类调用自身没有定义的方法，也并没有指定具体的基类名称时，python会从左到右依次查找继承的基类中是否包含该方法，直到找到就停止，否则报错。</p><p>当然子类也可以添加自己新的属性或者在自己这里重新定义这种属性(不会影响到父类)，需要注意的是，一旦重新定义了自己的属性且与父类重名，那么调用新增的属性时，就以自己为准了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基础类 Animal  动物-狗类-哈士奇      小学-初中-高中</span></span><br><span class="line">class Animal:</span><br><span class="line">    <span class="built_in">type</span>=<span class="string">'活的'</span></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.eye=<span class="string">'两个'</span></span><br><span class="line">    def run(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Animal会跑'</span>)</span><br><span class="line"><span class="comment">#dog子类   cat子类</span></span><br><span class="line">class Dog(Animal):</span><br><span class="line">    def run(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'dog会跑'</span>)</span><br><span class="line">    def eat(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'狗会吃肉'</span>)</span><br><span class="line"></span><br><span class="line">class Cat(Animal):</span><br><span class="line">    def run(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'cat会跑'</span>)</span><br><span class="line"></span><br><span class="line">class hashiqi(Dog):</span><br><span class="line">    def demo(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'拆家'</span>)</span><br><span class="line"><span class="comment">#对象1</span></span><br><span class="line"><span class="comment"># dog=Dog()</span></span><br><span class="line"><span class="comment"># dog.run()</span></span><br><span class="line"><span class="comment"># dog.eat()</span></span><br><span class="line"><span class="comment"># print(dog.type)</span></span><br><span class="line"><span class="comment"># print(dog.eye)</span></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">dog会跑</span></span><br><span class="line"><span class="string">狗会吃肉</span></span><br><span class="line"><span class="string">活的</span></span><br><span class="line"><span class="string">两个</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"><span class="comment">#对象2</span></span><br><span class="line">cat=Cat()</span><br><span class="line">cat.run()</span><br><span class="line"><span class="comment">#cat会跑</span></span><br><span class="line"></span><br><span class="line">dog_h=hashiqi()</span><br><span class="line"><span class="built_in">print</span>(dog_h.type)</span><br><span class="line">dog_h.eat()</span><br><span class="line"><span class="comment">#活的</span></span><br><span class="line"><span class="comment">#狗会吃肉</span></span><br></pre></td></tr></table></figure><p>构造函数的继承，通过在自己的<strong>init</strong>方法中写父类名.<strong>init</strong>(self, , )，继承父类的构造方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#继承类的构造方法</span></span><br><span class="line"><span class="comment">#父类.__init__(self,name,age)</span></span><br><span class="line">class Person():</span><br><span class="line">    def __init__(self,name,age):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.weight=<span class="string">'50kg'</span></span><br><span class="line">    def speak(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'这个人会说....'</span>)</span><br><span class="line"></span><br><span class="line">class Chinese(Person):</span><br><span class="line">    def __init__(self,name,age,language): <span class="comment">#Chinese Person</span></span><br><span class="line">        Person.__init__(self,name,age)</span><br><span class="line">        self.language=language</span><br><span class="line">    def run(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'我会走路'</span>)</span><br><span class="line"></span><br><span class="line">c=Chinese(<span class="string">'马冬梅'</span>,35,<span class="string">'河南'</span>)</span><br><span class="line">c.run()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'我叫%s，今年%d岁，我会说%s话'</span>%(c.name,c.age,c.language))</span><br><span class="line"><span class="comment">#我会走路</span></span><br><span class="line"><span class="comment">#我叫马冬梅，今年35岁，我会说河南话</span></span><br></pre></td></tr></table></figure><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><p><strong>mro</strong>获取执行的先后顺序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#单继承  多继承</span></span><br><span class="line">class Father():</span><br><span class="line">    def test1(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Father---才华---test1'</span>)</span><br><span class="line">    def test2(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Father----test2'</span>)</span><br><span class="line"></span><br><span class="line">class Mother():</span><br><span class="line">    def demo1(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Mother---美貌---demo1'</span>)</span><br><span class="line">    def demo2(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Mother----demo2'</span>)</span><br><span class="line"></span><br><span class="line">class Daughter(Mother,Father):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">d=Daughter()</span><br><span class="line">d.test1()</span><br><span class="line">d.demo1()</span><br><span class="line"><span class="comment">#Father---才华---test1</span></span><br><span class="line"><span class="comment">#Mother---美貌---demo1</span></span><br><span class="line"><span class="built_in">print</span>(Daughter.__mro__)</span><br><span class="line"><span class="comment">#(&lt;class '__main__.Daughter'&gt;, &lt;class '__main__.Mother'&gt;, &lt;class '__main__.Father'&gt;, &lt;class 'object'&gt;)</span></span><br></pre></td></tr></table></figure></p><h3 id="继承与抽象"><a href="#继承与抽象" class="headerlink" title="继承与抽象"></a>继承与抽象</h3><p>抽象即抽取同一类事物类似的部分<br>抽象分为两个层次<br>将奥巴马和梅西这两对象比较像的部分抽取成类<br>将人,猪,狗这三个类比较像的部分抽取成父类<br>抽象最主要的作用是划分类别(可以隔离关注点，降低复杂度)</p><p>继承：是基于抽象的结果，通过编程语言去实现它，肯定是先经历抽象这个过程，才能通过继承的方式去表达出抽象的结构<br>抽象只是分析和设计的过程中，一个动作或者说一种技巧，通过抽象可以得到类</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>概念：隐藏对象的属性和实现细节，仅对外提供公共访问方式<br>优势：<br>1 将变化隔离<br>2 便于使用<br>3 提高复用性<br>4 提高安全性<br>封装原则：<br>1 将不需要对外提供的内容都隐藏起来<br>2 把属性都隐藏，提供公共方法对其访问</p><p>私有变量和私有方法：<br>在python中用双下划开头的方式将属性隐藏来(设置成私有的)<br>函数和属性装到了一个非全局的命名空间–封装</p><p>私有变量,错误示例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line">    __N=<span class="string">'aaa'</span></span><br><span class="line"><span class="built_in">print</span>(A.__N)</span><br><span class="line"><span class="comment">#报错，私有变量不能直接访问</span></span><br></pre></td></tr></table></figure></p><p>定义一个私有的名字:就是在私有的名字前面加两条下划线__N = ‘aaa’,所谓私有，就是不能在类的外面去引用它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line">    __N=<span class="string">'aaa'</span></span><br><span class="line">    def func(self):</span><br><span class="line">        <span class="built_in">print</span>(A.__N)<span class="comment">#在内部可以访问</span></span><br><span class="line">a=A()</span><br><span class="line">a.func()</span><br><span class="line"><span class="comment">#aaa</span></span><br><span class="line"><span class="built_in">print</span>(A.__dict__)</span><br><span class="line"><span class="comment">#&#123;'__module__': '__main__', '_A__N': 'aaa', 'func': &lt;function #A.func at 0x00000000027FBAE8&gt;, '__dict__': &lt;attribute '__dict__' of 'A' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'A' objects&gt;,'__doc__': None&#125;</span></span><br></pre></td></tr></table></figure><p>通过观察结果，可以看到类属性多了一个‘_A__N’:‘aaa’的属性，其实这个<em>A__N 就是<strong>N,这是python解释器自动做的一个变形操作。<br>类中所有双下划线开头的名称如：</strong>x都会自动变形成:</em>类名__x的形式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line">    __N=0</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.__X=10</span><br><span class="line">    def __foo(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'from A'</span>)</span><br><span class="line">    def bar(self):</span><br><span class="line">        self.__foo()</span><br><span class="line"><span class="built_in">print</span>(A._A__N)</span><br><span class="line"></span><br><span class="line">a=A()</span><br><span class="line"><span class="built_in">print</span>(a._A__X)</span><br><span class="line">a.bar()</span><br><span class="line"><span class="comment">#0</span></span><br><span class="line"><span class="comment">#10</span></span><br><span class="line"><span class="comment">#from A</span></span><br></pre></td></tr></table></figure><p>私有属性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class B:</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.__name=name</span><br><span class="line">    def func(self): <span class="comment">#外部调用func来获取私有属性</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'in func &#123;&#125;'</span>.format(self.__name))</span><br><span class="line">b=B(<span class="string">'Sam'</span>)</span><br><span class="line">b.func()</span><br><span class="line"><span class="comment">#in func Sam</span></span><br></pre></td></tr></table></figure></p><p>私有方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class C:</span><br><span class="line">    def __wahaha(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'wahaha'</span>)</span><br><span class="line">    def ACD(self):<span class="comment">#外部调用ACD执行私有方法</span></span><br><span class="line">        self.__wahaha()</span><br><span class="line">c=C()</span><br><span class="line">c.ACD()</span><br><span class="line"><span class="comment">#wahaha</span></span><br></pre></td></tr></table></figure></p><p>在类中，静态属性，方法，对象属性都可以变成私有的，只需要在这些名字之前加上<strong><br>下面代码中</strong>name不是私有变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class F:</span><br><span class="line">    pass</span><br><span class="line">F.__name=<span class="string">'Sam'</span></span><br><span class="line"><span class="built_in">print</span>(F.__name)</span><br><span class="line"><span class="built_in">print</span>(F.__dict__)</span><br><span class="line"><span class="comment">#Sam</span></span><br><span class="line"><span class="comment">#&#123;'__module__': '__main__', '__dict__': &lt;attribute '__dict__' of #'F' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'F' objects&gt;, '__doc__': None, '__name': 'Sam'&#125;</span></span><br></pre></td></tr></table></figure></p><p>可以很明确的看到__name并没有发生变形，变形只在类的内部发生，在类的外面创建的双下划线的属性，并不是私有属性</p><p>下面这段代码会报错，因为__func为D的私有方法，私有方面没在类中获取，不可以被继承调用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class D:</span><br><span class="line">    def __func(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'in func'</span>)</span><br><span class="line">class E(D):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.__func()</span><br><span class="line">e=E()</span><br></pre></td></tr></table></figure></p><p>正确写法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class D:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.__func()</span><br><span class="line">    def __func(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'in D'</span>)</span><br><span class="line">class E(D):</span><br><span class="line">    def __func(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'in E'</span>)</span><br><span class="line">e=E()</span><br><span class="line"><span class="comment">#in D</span></span><br></pre></td></tr></table></figure></p><h3 id="property方法"><a href="#property方法" class="headerlink" title="property方法"></a>property方法</h3><p>作用：将一个方法伪装成一个属性<br>1 并不会让你的代码有什么逻辑上的提高<br>2 只是从调用者的角度上换了一种方式，使之看起来更合理</p><p>property将方法伪装成属性，在调用时不用加（）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.__name=name</span><br><span class="line">    @property</span><br><span class="line">    def name(self):</span><br><span class="line">        <span class="built_in">return</span> self.__name</span><br><span class="line">p=Person(<span class="string">'lucy'</span>)</span><br><span class="line"><span class="built_in">print</span>(p.name)</span><br><span class="line"><span class="comment">#lucy</span></span><br></pre></td></tr></table></figure></p><p>@func.setter –&gt; func 对伪装的属性进行赋值的时候调用这个方法，一般情况下用来修改<br>示例：对方法伪装成的属性进行修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.__name=name</span><br><span class="line">    @property</span><br><span class="line">    def name(self):</span><br><span class="line">        <span class="built_in">return</span> self.__name</span><br><span class="line">    @name.setter</span><br><span class="line">    def name(self,newname):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(newname) is str:</span><br><span class="line">            self.__name=newname</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'你提供的姓名数据类型不合法'</span>)</span><br><span class="line">p=Person(<span class="string">'lucy'</span>)</span><br><span class="line"><span class="built_in">print</span>(p.name)</span><br><span class="line"><span class="comment">#lucy</span></span><br><span class="line">p.name=<span class="string">'jack'</span></span><br><span class="line"><span class="built_in">print</span>(p.name)</span><br><span class="line"><span class="comment">#jack    #修改成功</span></span><br></pre></td></tr></table></figure></p><p>@func.deleter –&gt; func 在执行del 对象.func的时候调用这个方法， 一般情况下用来做删除（基本不用）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.__name=name</span><br><span class="line">    @property</span><br><span class="line">    def name(self):</span><br><span class="line">        <span class="built_in">return</span> self.__name</span><br><span class="line">    @name.deleter</span><br><span class="line">    def name(self):</span><br><span class="line">        del self.__name    </span><br><span class="line">p=Person(<span class="string">'lucy'</span>)</span><br><span class="line"><span class="built_in">print</span>(p.name)</span><br><span class="line">del p.name  <span class="comment">#类中的del与类外的del必须都用，才能删除</span></span><br><span class="line"><span class="built_in">print</span>(p.name)</span><br><span class="line"><span class="comment">#报错，因为name已经被删除了</span></span><br></pre></td></tr></table></figure></p><p>将一些需要随着一部分属性的变化而变化的值的计算过程 从方法伪装成属性<br>将私有的属性保护起来，让修改的部分增加一些约束，来提高程序的稳定性和数据的安全性<br>示例：浏览商品：原价，折扣，当我要查看价格的时候，肯定只看折后的价格<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Goods:</span><br><span class="line">    def __init__(self,name,origin_price,discount):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.__price=origin_price</span><br><span class="line">        self.__discount=discount</span><br><span class="line">    @property</span><br><span class="line">    def price(self):</span><br><span class="line">        <span class="built_in">return</span> self.__price*self.__discount</span><br><span class="line">    @price.setter</span><br><span class="line">    def price(self,newprice):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(newprice) is int or <span class="built_in">type</span>(newprice) is <span class="built_in">float</span>:</span><br><span class="line">            self.__price=newprice</span><br><span class="line">apple=Goods(<span class="string">'apple'</span>,5,0.8)</span><br><span class="line"><span class="built_in">print</span>(apple.price)<span class="comment">#打折后的价格</span></span><br><span class="line">apple.price=10 <span class="comment">#苹果价格上涨</span></span><br><span class="line"><span class="built_in">print</span>(apple.price) <span class="comment">#打折后的价格</span></span><br></pre></td></tr></table></figure></p><p>待续。。。。。。。。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">``` bash</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">``` bash</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面向对象三大特征：继承、多态、封装&lt;br&gt;
    
    </summary>
    
    
      <category term="calm" scheme="http://yoursite.com/tags/calm/"/>
    
  </entry>
  
  <entry>
    <title>python基础十七————面向对象(二)</title>
    <link href="http://yoursite.com/2018/10/16/python-18/"/>
    <id>http://yoursite.com/2018/10/16/python-18/</id>
    <published>2018-10-16T11:14:33.415Z</published>
    <updated>2018-08-09T10:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>私有属性，私有方法，构建函数，析构函数，运算符的重载，<strong>getitem</strong>，<strong>iter</strong>,<strong>next</strong>，迭代</p><h2 id="私有属性与私有方法"><a href="#私有属性与私有方法" class="headerlink" title="私有属性与私有方法"></a>私有属性与私有方法</h2><h3 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h3><p>如果属性名以__（双下划线）开头则是私有属性，否则是公有属性。私有属性在类外不能直接访问。Python提供了访问私有属性的方式，可用于程序的测试和调试。<br>对象名._类名+私有成员名    </p><p>私有属性：在类外不能直接访问<br>在类外通过object._classname__私有属性名称可访问<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class People:</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.__name = name  <span class="comment">#私有属性</span></span><br><span class="line">xiaoming = People(<span class="string">"dongGe"</span>)</span><br><span class="line"><span class="built_in">print</span>(xiaoming.__name)</span><br><span class="line"><span class="comment">#print(xiaoming.__name)</span></span><br><span class="line"><span class="comment"># AttributeError: 'People' object has no</span></span><br><span class="line"><span class="comment"># attribute '__name'</span></span><br><span class="line"><span class="comment">#object._classname__私有属性名称</span></span><br><span class="line"><span class="built_in">print</span>(xiaoming._People__name)</span><br><span class="line"><span class="comment">#dongGe</span></span><br><span class="line">```</span><br><span class="line">获取私有属性在类内获取</span><br><span class="line">``` bash</span><br><span class="line">class People(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.__name = name  <span class="comment">#私有属性</span></span><br><span class="line">    def getName(self):</span><br><span class="line">        <span class="built_in">return</span> self.__name</span><br><span class="line">    def setName(self, newName):</span><br><span class="line">        <span class="keyword">if</span> len(newName) &gt;= 5:</span><br><span class="line">            self.__name = newName</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"error:名字长度需要大于或者等于5"</span>)</span><br><span class="line"></span><br><span class="line">xiaoming = People(<span class="string">"dongGe"</span>)</span><br><span class="line"><span class="comment"># xiaoming.setName("wanger")</span></span><br><span class="line"><span class="comment"># print(xiaoming.getName())</span></span><br><span class="line"><span class="comment">#wanger,把dongGe改为wanger</span></span><br><span class="line"></span><br><span class="line">xiaoming.setName(<span class="string">"lisi"</span>)</span><br><span class="line"><span class="built_in">print</span>(xiaoming.getName())</span><br><span class="line"><span class="comment">#error:名字长度需要大于或者等于5</span></span><br><span class="line"><span class="comment">#dongGe   按照要求没有改成功</span></span><br></pre></td></tr></table></figure></p><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p>类有3种方法：公有方法、私有方法和静态方法。<br>双下划线__开头则是私有方法， 上一行用<br>@ staticmethod 标识的方法是静态方法，<br>否则是公有方法。<br>公有方法、私有方法都属于对象，每个对象都有自己的公有方法和私有方法；公有方法通过对象名调用，私有方法不能通过对象名调用，只能在属于对象的方法中通过self调用；静态方法属于类，静态方法只能通过类名调用，静态方法中不能访问属于对象的成员，只能访问属于类的成员。</p><p>私有方法  方法名称前面加上__<br>发短信案例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Dog:</span><br><span class="line">    def __send_msg(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'------发送信息----'</span>)</span><br><span class="line">    def get_msg(self,money):</span><br><span class="line">        <span class="keyword">if</span> money&gt;1000:</span><br><span class="line">            self.__send_msg()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'------余额不足----'</span>)</span><br><span class="line">dog=Dog()</span><br><span class="line"><span class="comment">#dog.__send_msg()</span></span><br><span class="line">dog.get_msg(500)</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">class Fruit:</span><br><span class="line">    price=0</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.__color=<span class="string">'Red'</span>    <span class="comment">#定义和设置私有属性color</span></span><br><span class="line">        self.__city=<span class="string">'Kunming'</span> <span class="comment">#定义和设置私有属性city</span></span><br><span class="line"></span><br><span class="line">    def __outputColor(self):     <span class="comment">#定义私有方法outputColor</span></span><br><span class="line">        <span class="built_in">print</span>(self.__color)    <span class="comment">#访问私有属性color</span></span><br><span class="line"></span><br><span class="line">    def __outputCity(self):     <span class="comment">#定义私有方法outputCity</span></span><br><span class="line">        <span class="built_in">print</span>(self.__city) <span class="comment">#访问私有属性city</span></span><br><span class="line"></span><br><span class="line">    def output(self):<span class="comment">#定义公有方法output</span></span><br><span class="line">        self.__outputColor( ) <span class="comment">#调用私有方法outputColor</span></span><br><span class="line">        self.__outputCity( )<span class="comment">#调用私有方法outputCity</span></span><br><span class="line"></span><br><span class="line">    @ staticmethod</span><br><span class="line">    def getPrice():<span class="comment">#定义静态方法getPrice</span></span><br><span class="line">        <span class="built_in">return</span> Fruit.price</span><br><span class="line">        </span><br><span class="line">    @ staticmethod</span><br><span class="line">    def setPrice(p):<span class="comment">#定义静态方法setPrice</span></span><br><span class="line">        Fruit.price=p</span><br><span class="line"></span><br><span class="line"><span class="comment">#主程序</span></span><br><span class="line">apple=Fruit()</span><br><span class="line">apple.output() </span><br><span class="line"><span class="comment">#Red</span></span><br><span class="line"><span class="comment">#Kunming</span></span><br><span class="line"><span class="built_in">print</span>(Fruit.getPrice( ))</span><br><span class="line"><span class="comment">#0</span></span><br><span class="line">Fruit.setPrice(9)</span><br><span class="line"><span class="built_in">print</span>(Fruit.getPrice( ))</span><br><span class="line"><span class="comment">#9</span></span><br><span class="line">apple.__outputColor( )   <span class="comment">#是否可行?</span></span><br><span class="line"><span class="comment">#不可行，__outputColor( )是私有方法，不能再类外直接调用</span></span><br></pre></td></tr></table></figure><h2 id="构建函数"><a href="#构建函数" class="headerlink" title="构建函数"></a>构建函数</h2><p>类的构造函数定义<br>类的构造函数的形式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def  __init__(self):</span><br><span class="line">       superclass.__init__(self)            <span class="comment">#未绑定超类</span></span><br><span class="line">       super(subclass, self).__init__( )<span class="comment">#调用super( )</span></span><br></pre></td></tr></table></figure><p>类的构造函数与其它普通方法不同的地方在于，当一个对象被创建后，会立即调用构造方法，就有点类似于程序中的 init 的初始化方法。如果要继承构造方法，可以调用未绑定的超类构造方法，也可以用super函数调用超类构造函数。</p><p>Python在创建对象时，首先调用特殊方法<strong>new</strong>()创建该对象，之后调用特殊方法<strong>init</strong>()对其进行初始化。在实际的编程中，我们创建的几乎所有Python类都只需要重新实现<strong>init</strong>()方法，因为如果我们不提供自己的<strong>new</strong>()方法，Python会自动调用object.<strong>new</strong>()方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">def __init__(self,first=<span class="string">''</span>,last=<span class="string">''</span>,id=0):</span><br><span class="line">self.firstnamestr=first</span><br><span class="line">self.lastnamestr=last</span><br><span class="line">self.idint=id</span><br><span class="line">s1=Student()</span><br><span class="line"><span class="built_in">print</span>(s1.firstnamestr)</span><br><span class="line">s2=Student(last=<span class="string">'Python'</span>,first=<span class="string">'Hello'</span>)</span><br><span class="line"><span class="built_in">print</span>(s2.lastnamestr) </span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#python</span></span><br></pre></td></tr></table></figure></p><p>这里生成了Student类的两个实例—s1和s2。s1调用构造函数时生成，没有带任何参数，即Student()。生成第二个实例s2时，给出了参数中的两个，即Student(last=’Python’,first=’Hello’)。</p><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><p>Python中类的析构函数是<strong>del</strong>（开始和结束都是双下划线），用来释放对象占用的资源，在Python收回对象空间之前自动执行。如果用户未设计析构函数，Python将提供默认的析构函数。析构函数属于对象，每个对象都有自己的析构函数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">class Animal():</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'init被调用'</span>)</span><br><span class="line">        self.name=name</span><br><span class="line">    <span class="comment">#析构函数</span></span><br><span class="line">    def __del__(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'del被调用'</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s对象快要被删除了'</span>%self.name)</span><br><span class="line"></span><br><span class="line">dog=Animal(<span class="string">'哈士奇'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'%s还在么？'</span>%dog.name)</span><br><span class="line">del dog</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'%s被删除了'</span>%dog.name)</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">init被调用</span></span><br><span class="line"><span class="string">哈士奇还在么？</span></span><br><span class="line"><span class="string">del被调用</span></span><br><span class="line"><span class="string">哈士奇对象快要被删除了</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">dog1=Animal(<span class="string">'哈士奇'</span>)</span><br><span class="line">dog2=dog1</span><br><span class="line">dog3=dog1</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'--马上要删除dog1--'</span>)</span><br><span class="line">del dog1</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'--马上要删除dog2--'</span>)</span><br><span class="line">del dog2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'--马上要删除dog3--'</span>)</span><br><span class="line">del dog3</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">init被调用</span></span><br><span class="line"><span class="string">--马上要删除dog1--</span></span><br><span class="line"><span class="string">--马上要删除dog2--</span></span><br><span class="line"><span class="string">--马上要删除dog3--</span></span><br><span class="line"><span class="string">del被调用</span></span><br><span class="line"><span class="string">哈士奇对象快要被删除了</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure></p><h3 id="运算符的重载"><a href="#运算符的重载" class="headerlink" title="运算符的重载"></a>运算符的重载</h3><p>在Python中可通过重载运算符来实现对象之间的运算。Python把运算符与类的方法关联起来，每个运算符都对应一个函数。运算符重载就是让用类写成的对象可截取并响应用在内置类型上的运算（加法、切片、打印和点号运算符等）</p><p>例子，定义方法，出现-，+，=,自动捕捉做运算<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Programer():</span><br><span class="line">    def __init__(self,name,age):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    def __sub__(self,other): <span class="comment">#减法</span></span><br><span class="line">        <span class="built_in">return</span> self.age-other.age</span><br><span class="line"></span><br><span class="line">    def __add__(self,other):</span><br><span class="line">        <span class="built_in">return</span> self.age+other.age</span><br><span class="line">    </span><br><span class="line">    def __eq__(self,other):</span><br><span class="line">        <span class="keyword">if</span> self.age==other.age:</span><br><span class="line">            <span class="built_in">return</span> <span class="string">'%s和%s的年龄相等'</span>%(self.name,other.name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">return</span> <span class="string">'%s和%s的年龄不相等'</span>%(self.name,other.name)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    a=Programer(<span class="string">'张三'</span>,30)</span><br><span class="line">    b=Programer(<span class="string">'李四'</span>,30)</span><br><span class="line">    <span class="built_in">print</span>(b<span class="_">-a</span>)  <span class="comment">#0</span></span><br><span class="line">    <span class="built_in">print</span>(a+b)  <span class="comment">#60</span></span><br><span class="line">    <span class="built_in">print</span>(a==b) <span class="comment">#张三和李四的年龄相等</span></span><br></pre></td></tr></table></figure></p><h3 id="重载方法getitem和setitem"><a href="#重载方法getitem和setitem" class="headerlink" title="重载方法getitem和setitem"></a>重载方法<strong>getitem</strong>和<strong>setitem</strong></h3><p>索引和分片：<strong>getitem</strong>和<strong>setitem</strong><br>    如果类中定义了（或继承了）的话，则对于实例的索引运算，会自动调用<strong>getitem</strong>。<br>当实例x出现在x[i]这样的索引运算中，Python会调用这个实例继承的<strong>getitem</strong>方法，把x作为第一个参数传递，并将方括号内的索引值传给第二个参数。</p><p>2．索引迭代：<strong>getitem</strong><br>for语句的作用是从0到更大的索引值，重复对序列进行索引运算，直到检测到超出边界的异常。<br><strong>getitem</strong>也可以是Python中一种重载迭代的方式。如果定义了这个方法，for循环每次循环时都会调用类的<strong>getitem</strong>。并持续搭配有更高的偏移值。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Index:</span><br><span class="line">    def __getitem__(self,index):</span><br><span class="line">        <span class="built_in">return</span> index**2</span><br><span class="line">x=Index()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(6):</span><br><span class="line"><span class="built_in">print</span>(x[i],end=<span class="string">' '</span>)</span><br><span class="line"><span class="comment">#0 1 4 9 16 25</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Index:</span><br><span class="line">    data=<span class="string">'hello world'</span><span class="comment">#属性</span></span><br><span class="line">    def __getitem__(self,index):</span><br><span class="line">        <span class="comment">#return index**2</span></span><br><span class="line">        <span class="built_in">return</span> self.data[index]</span><br><span class="line">num=Index()</span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"><span class="built_in">print</span>(num[5])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(1,11):</span><br><span class="line">    <span class="built_in">print</span>(num[i],end=<span class="string">' '</span>)</span><br><span class="line"><span class="built_in">print</span>(num[1])</span><br><span class="line"><span class="string">''</span><span class="string">'&lt;__main__.Index object at 0x00000000028F8390&gt;</span></span><br><span class="line"><span class="string">e l l o   w o r l d e</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure><h3 id="迭代器对象：iter和next"><a href="#迭代器对象：iter和next" class="headerlink" title="迭代器对象：iter和next"></a>迭代器对象：<strong>iter</strong>和<strong>next</strong></h3><p><strong>getitem</strong>是有效的，但它是迭代退而求其次的方法。<br>Python所有的迭代环境会有优先尝试<strong>iter</strong>的方法，再尝试<strong>getitem</strong>。从技术角度上讲，迭代环境是通过iter去尝试寻找<strong>iter</strong>方法来实现，而这种方法返回一个迭代器对象。<br>如果已经提供了，python会重复调用迭代器对象的next()方法，直到发生StopIteration异常。如果没有找到<strong>iter</strong>，python会使用<strong>getitem</strong>机制。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class <span class="built_in">test</span>():</span><br><span class="line">    def __init__(self,data=1):</span><br><span class="line">        self.data = data</span><br><span class="line">    <span class="comment"># def __iter__(self): #返回迭代器对象本身</span></span><br><span class="line">    <span class="comment">#     return self</span></span><br><span class="line">    def __next__(self): <span class="comment">#返回迭代器的下一个元素</span></span><br><span class="line">        <span class="keyword">if</span> self.data &gt; 5:</span><br><span class="line">            raise StopIteration <span class="comment">#如果大于5，抛出一个异常</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.data+=1</span><br><span class="line">            <span class="built_in">return</span> self.data</span><br><span class="line">ite=<span class="built_in">test</span>(3)</span><br><span class="line"><span class="comment">#从3开始，next一下加一，大于5时报错</span></span><br><span class="line"><span class="built_in">print</span>(ite.__next__())</span><br><span class="line"><span class="built_in">print</span>(ite.__next__())  <span class="comment">#4</span></span><br><span class="line"><span class="built_in">print</span>(ite.__next__())  <span class="comment">#5</span></span><br><span class="line"><span class="built_in">print</span>(ite.__next__())  <span class="comment">#6</span></span><br><span class="line"><span class="built_in">print</span>(ite.__next__())  <span class="comment">#报错</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class <span class="built_in">test</span>():</span><br><span class="line">    def __init__(self,data=1):</span><br><span class="line">        self.data = data</span><br><span class="line">    def __iter__(self): <span class="comment">#返回迭代器对象本身</span></span><br><span class="line">        <span class="built_in">return</span> self</span><br><span class="line">    def __next__(self): <span class="comment">#返回迭代器的下一个元素</span></span><br><span class="line">        <span class="keyword">if</span> self.data &gt; 5:</span><br><span class="line">            raise StopIteration <span class="comment">#如果大于5，抛出一个异常</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.data+=1</span><br><span class="line">            <span class="built_in">return</span> self.data</span><br><span class="line">ite=<span class="built_in">test</span>(2)</span><br><span class="line"><span class="built_in">print</span>(list(ite))</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="comment">#[3, 4, 5, 6]</span></span><br><span class="line"><span class="comment">#2,3,4,5,6</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;私有属性，私有方法，构建函数，析构函数，运算符的重载，&lt;strong&gt;getitem&lt;/strong&gt;，&lt;strong&gt;iter&lt;/strong&gt;,&lt;strong&gt;next&lt;/strong&gt;，迭代&lt;/p&gt;
&lt;h2 id=&quot;私有属性与私有方法&quot;&gt;&lt;a href=&quot;#私有属性与私有方法&quot; class=&quot;headerlink&quot; title=&quot;私有属性与私有方法&quot;&gt;&lt;/a&gt;私有属性与私有方法&lt;/h2&gt;&lt;h3 id=&quot;私有属性&quot;&gt;&lt;a href=&quot;#私有属性&quot; class=&quot;headerlink&quot; title=&quot;私有属性&quot;&gt;&lt;/a&gt;私有属性&lt;/h3&gt;&lt;p&gt;如果属性名以__（双下划线）开头则是私有属性，否则是公有属性。私有属性在类外不能直接访问。Python提供了访问私有属性的方式，可用于程序的测试和调试。&lt;br&gt;对象名._类名+私有成员名    &lt;/p&gt;
&lt;p&gt;私有属性：在类外不能直接访问&lt;br&gt;在类外通过object._classname__私有属性名称可访问&lt;br&gt;
    
    </summary>
    
    
      <category term="calm" scheme="http://yoursite.com/tags/calm/"/>
    
  </entry>
  
  <entry>
    <title>python基础十六————Python异常与调试</title>
    <link href="http://yoursite.com/2018/10/16/python-16/"/>
    <id>http://yoursite.com/2018/10/16/python-16/</id>
    <published>2018-10-16T11:14:33.281Z</published>
    <updated>2018-08-06T13:40:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python中的异常类"><a href="#Python中的异常类" class="headerlink" title="Python中的异常类"></a>Python中的异常类</h2><p>在这一节，我们将要面对异常，这是一种可以改变程序中控制流程的程序结构。<br>在Python中，异常会根据错误自动地被触发，也能由代码触发和捕获。<br>异常由四个相关语句进行处理，分别为：try、except、else和finally</p><h3 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h3><p>当Python检测到一个错误时，解释器就会指出当前流已无法继续执行下去，这时候就出现了异常。<br>异常是指因为程序出错而在正常控制流以外采取的行为。异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。</p><a id="more"></a><p>异常分为两个阶段：<br>第一个阶段是引起异常发生的错误；<br>第二个阶段是检测并进行处理的阶段</p><p>异常的角色：<br>错误处理<br>事件通知<br>特殊情况处理<br>终止行为<br>非常规控制流程</p><h3 id="Python的一些内建异常类"><a href="#Python的一些内建异常类" class="headerlink" title="Python的一些内建异常类"></a>Python的一些内建异常类</h3><p>常见的几种<br>Exception       所有异常的基类<br>NameError       尝试访问一个没有申明的变量<br>ZeroDivisionError       除数为0<br>SyntaxError        语法错误<br>IndexError        索引超出序列范围<br>KeyError        请求一个不存在的字典关键字<br>IOError            输入输出错误（比如你要读的文件不存在）<br>AttributeError    尝试访问未知的对象属性<br>ValueError        传给函数的参数类型不正确<br>EOFError        发现一个不期望的文件尾</p><h2 id="捕获和处理异常"><a href="#捕获和处理异常" class="headerlink" title="捕获和处理异常"></a>捕获和处理异常</h2><h3 id="try…except…语句"><a href="#try…except…语句" class="headerlink" title="try…except…语句"></a>try…except…语句</h3><p>try子句中的代码块放置可能出现异常的语句，except子句中的代码块处理异常：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'China'</span>, <span class="string">'America'</span>, <span class="string">'England'</span>, <span class="string">'France'</span>]</span><br><span class="line">try:</span><br><span class="line">    <span class="built_in">print</span>(list[4])</span><br><span class="line">except  IndexError as e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'列表元素的下标越界'</span>)</span><br><span class="line"><span class="comment">#列表元素的下标越界</span></span><br></pre></td></tr></table></figure></p><h3 id="try…except…else语句"><a href="#try…except…else语句" class="headerlink" title="try…except…else语句"></a>try…except…else语句</h3><p>如果try范围内捕获了异常，就执行except块；如果try范围内没有捕获异常，就执行else块。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'---1---'</span>)</span><br><span class="line">except (NameError,FileNotFoundError):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"捕获到异常之后做处理...."</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'very good 没有异常'</span>)</span><br><span class="line"><span class="comment">#---1---</span></span><br><span class="line"><span class="comment">#very good 没有异常</span></span><br></pre></td></tr></table></figure></p><h3 id="带多个except的try语句"><a href="#带多个except的try语句" class="headerlink" title="带多个except的try语句"></a>带多个except的try语句</h3><p>请看下面的例子：输入两数，求两数相除的结果。在数值输入时应检测输入的被除数和除数是否是数值，如果输入的是字符则视为无效。在进行除操作时，应检测除数是否为零。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    x = <span class="built_in">float</span>(input(<span class="string">"请输入被除数："</span>))</span><br><span class="line">    y = <span class="built_in">float</span>(input(<span class="string">"请输入除数："</span>))</span><br><span class="line">    z = x / y</span><br><span class="line">except ZeroDivisionError as e1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"除数不能为零"</span>)</span><br><span class="line">except ValueError as e2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"被除数和除数应为数值类型"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line"><span class="comment">#请输入被除数：q</span></span><br><span class="line"><span class="comment">#被除数和除数应为数值类型</span></span><br><span class="line"><span class="comment">#请输入被除数：12</span></span><br><span class="line"><span class="comment">#请输入除数：0</span></span><br><span class="line"><span class="comment">#除数不能为零</span></span><br></pre></td></tr></table></figure></p><h3 id="捕获所有异常"><a href="#捕获所有异常" class="headerlink" title="捕获所有异常"></a>捕获所有异常</h3><p>BaseException是所有内建异常的基类，通过它可以捕获所有类型的异常，KeyboardInterrupt、SystemExit和Exception是从它直接派生出来的子类。按Ctrl+C会抛出KeyboardInterrupt类型的异常，sys模块的sys.exit()会抛出SystemExit类型的异常。其他所有的内建异常都是Exception的子类。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'---1---'</span>)</span><br><span class="line">except (NameError,FileNotFoundError):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"捕获到异常之后做处理...."</span>)</span><br><span class="line">except Exception as res:</span><br><span class="line"><span class="comment">#as给异常其别名，可以在下面的代码中输出异常的名称</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'如果使用了Exception，就以为这只要上面except没有捕获到异常，Exception一定能捕获到异常'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'very good 没有异常'</span>)</span><br><span class="line"></span><br><span class="line">finally:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----fianlly----'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="finally子句"><a href="#finally子句" class="headerlink" title="finally子句"></a>finally子句</h3><p>finally子句<br>下面的示例通过try…finally…语句使得无论文件打开是否正确或是readline()调用失败，都能够正常关闭文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">f = open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">line = f.readline( )</span><br><span class="line"><span class="built_in">print</span>(line)</span><br><span class="line">finally:</span><br><span class="line">f.close( )</span><br></pre></td></tr></table></figure></p><h3 id="统一try-except-finally"><a href="#统一try-except-finally" class="headerlink" title="统一try/except/finally"></a>统一try/except/finally</h3><p>现在，我们可以在同一个try语句中混合finally、except以及else子句。也就是说，我们现在可以编写下列形式的语句。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try：</span><br><span class="line">main-action</span><br><span class="line">except Exception1 as e1：</span><br><span class="line">handler1</span><br><span class="line">except Exception2 as e2：</span><br><span class="line">handler2</span><br><span class="line">…</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">else</span>-block</span><br><span class="line">finally:</span><br><span class="line">finally-block</span><br></pre></td></tr></table></figure></p><p>如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'---1---'</span>)</span><br><span class="line">except (NameError,FileNotFoundError):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"捕获到异常之后做处理...."</span>)</span><br><span class="line">except Exception as res:</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'如果使用了Exception，就以为这只要上面except没有捕获到异常，Exception一定能捕获到异常'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'very good 没有异常'</span>)</span><br><span class="line"></span><br><span class="line">finally:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----fianlly----'</span>)</span><br></pre></td></tr></table></figure></p><p>例子：关于捕获文件的例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">try:</span><br><span class="line">    fp=open(<span class="string">'info.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">    try:</span><br><span class="line">        <span class="keyword">while</span> True:</span><br><span class="line">            content=fp.readline()</span><br><span class="line">            <span class="keyword">if</span> len(content)==0:</span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">            <span class="comment"># time.sleep(10)</span></span><br><span class="line">            <span class="built_in">print</span>(content)</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br><span class="line">    finally:</span><br><span class="line">        fp.close()</span><br><span class="line">except Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'没有该文件'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="异常的传递"><a href="#异常的传递" class="headerlink" title="异常的传递"></a>异常的传递</h3><p>try 语句按如下方式工作。<br>（1）首先，执行 try 子句 （在 try 和 except 关键字之间的部分）。<br>（2）如果没有异常发生， except 子句 在 try 语句执行完毕后就被忽略了。<br>（3）如果在 try 子句执行过程中发生了异常，那么该子句其余的部分就会被忽略。<br>（4）如果异常匹配于 except 关键字后面指定的异常类型，就执行对应的except子句。然后继续执行 try 语句之后的代码。<br>（5）如果发生了一个异常，在 except 子句中没有与之匹配的分支，它就会传递到上一级 try 语句中。<br>（6）如果最终仍找不到对应的处理语句，它就成为一个 未处理异常，终止程序运行，显示提示信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">def test1():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----test1-----'</span>)</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----test1-2-----'</span>)</span><br><span class="line"></span><br><span class="line">def test2():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----test2-1-----'</span>)</span><br><span class="line">    test1()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----test2-2-----'</span>)</span><br><span class="line"></span><br><span class="line">def test3():</span><br><span class="line">    try:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'-----test3-1-----'</span>)</span><br><span class="line">        test1()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'-----test3-2-----'</span>)</span><br><span class="line">    except Exception as res:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'捕获到了异常，信息为:&#123;&#125;'</span>.format(res))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----test3-1-----'</span>)</span><br><span class="line"></span><br><span class="line">test3()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'------华丽的分割线-------'</span>)</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">-----test3-1-----</span></span><br><span class="line"><span class="string">-----test1-----</span></span><br><span class="line"><span class="string">捕获到了异常，信息为:name '</span>num<span class="string">' is not</span></span><br><span class="line"><span class="string">defined</span></span><br><span class="line"><span class="string">-----test3-1-----</span></span><br><span class="line"><span class="string">------华丽的分割线-------</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure><h2 id="抛出异常-raise"><a href="#抛出异常-raise" class="headerlink" title="抛出异常-raise"></a>抛出异常-raise</h2><p>raise 语句允许程序员强制抛出一个指定的异常。例如:<br>提示异常内容为自定义的异常内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">raise NameError(<span class="string">'HiThere'</span>)</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File "&lt;stdin&gt;", line 1, in ?</span></span><br><span class="line"><span class="comment"># NameError: HiThere</span></span><br></pre></td></tr></table></figure></p><p>要抛出的异常由 raise 的唯一参数标识。它必需是一个异常实例或异常类（继承自 Exception 的类）。<br>如果你需要明确一个异常是否抛出，但不想处理它，raise 语句可以让你很简单的重新抛出该异常:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    raise NameError(<span class="string">'HiThere'</span>)</span><br><span class="line">except NameError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'An exception flew by!'</span>)</span><br><span class="line">    raise <span class="comment">#如果没有raise，则不报错，输出这句话</span></span><br><span class="line"><span class="comment"># An exception flew by!</span></span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File "&lt;stdin&gt;", line 2, in ?</span></span><br><span class="line"><span class="comment"># NameError: HiThere</span></span><br></pre></td></tr></table></figure></p><h2 id="用户自定义异常"><a href="#用户自定义异常" class="headerlink" title="用户自定义异常"></a>用户自定义异常</h2><p>在程序中可以通过创建新的异常类型来命名自己的异常。异常类通常应该直接或间接的从 Exception 类派生，例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class ShortInputExcrption(Exception): </span><br><span class="line">    <span class="string">''</span><span class="string">'自定义的异常类'</span><span class="string">''</span></span><br><span class="line">    def __init__(self,length,maxnum):</span><br><span class="line">        self.length=length <span class="comment">#对象的属性</span></span><br><span class="line">        self.maxnum=maxnum</span><br><span class="line">def main():</span><br><span class="line">    try:</span><br><span class="line">        s=input(<span class="string">'请输入---&gt;'</span>)</span><br><span class="line">        <span class="keyword">if</span> len(s)&lt;3:</span><br><span class="line">            raise ShortInputExcrption(len(s),3)</span><br><span class="line">            <span class="comment">#类 调用类--对象  调用属性和方法 </span></span><br><span class="line">    except ShortInputExcrption as res:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'ShortInputExcrption:输入的长度是&#123;&#125;，长度至少应该是&#123;&#125;'</span>.format(res.length,res.maxnum))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'没有发生异常'</span>)</span><br><span class="line">main()</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">请输入---&gt;aaaaa</span></span><br><span class="line"><span class="string">没有发生异常</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">请输入---&gt;a</span></span><br><span class="line"><span class="string">ShortInputExcrption:输入的长度是1，长度至少应该是3</span></span><br></pre></td></tr></table></figure></p><p>在上面例子中，Exception 默认的 <strong>init</strong>() 被覆盖。新的方式简单的创建 value 属性。这就替换了原来创建 args 属性的方式。<br>异常类中可以定义任何其它类中可以定义的东西，但是通常为了保持简单，只在其中加入几个属性信息，以供异常处理句柄提取。<br>如果一个新创建的模块中需要抛出几种不同的错误时，一个通常的作法是为该模块定义一个异常基类，然后针对不同的错误类型派生出对应的异常子类。</p><h3 id="定义清理行为"><a href="#定义清理行为" class="headerlink" title="定义清理行为"></a>定义清理行为</h3><p>try 语句还有另一个可选的子句，目的在于定义在任何情况下都一定要执行的功能。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    raise KeyboardInterrupt</span><br><span class="line">finally:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Goodbye,world!'</span>)</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">Goodbye,world!</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "d:/soft/python/acode/August4/try.py", line 79, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    raise KeyboardInterrupt</span></span><br><span class="line"><span class="string">KeyboardInterrupt</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure></p><p>不管有没有发生异常，finally子句 在程序离开 try 后都一定会被执行。<br>当 try 语句中发生了未被 except 捕获的异常（或者它发生在 except 或 else 子句中），在 finally 子句执行完后它会被重新抛出。<br>try 语句经由 break ，continue 或 return 语句退 出也一样会执行 finally 子句。</p><h3 id="try-except方式与if的方式的优势"><a href="#try-except方式与if的方式的优势" class="headerlink" title="try..except方式与if的方式的优势"></a>try..except方式与if的方式的优势</h3><p>try..except这种异常处理机制就是取代if那种方式，让你的程序在不牺牲可读性的前提下增强健壮性和容错性。<br>异常处理中为每一个异常定制了异常类型（python中统一了类与类型，类型即类），对于同一种异常，一个except就可以捕捉到，可以同时处理多段代码的异常（无需‘写多个if判断式’）减少了代码，增强了可读性<br>使用try..except的方式<br>1：把错误处理和真正的工作分开来<br>2：代码更易组织，更清晰，复杂的工作任务更容易实现；<br>3：毫无疑问，更安全了，不至于由于一些小的疏忽而使程序意外崩溃了；</p><h3 id="什么时候用异常处理"><a href="#什么时候用异常处理" class="headerlink" title="什么时候用异常处理"></a>什么时候用异常处理</h3><p>try…except应该尽量少用，因为它本身就是你附加给你的程序的一种异常处理的逻辑，与你的主要的工作是没有关系的<br>这种东西加的多了，会导致你的代码可读性变差，只有在有些异常无法预知的情况下，才应该加上try…except，其他的逻辑错误应该尽量修正。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python中的异常类&quot;&gt;&lt;a href=&quot;#Python中的异常类&quot; class=&quot;headerlink&quot; title=&quot;Python中的异常类&quot;&gt;&lt;/a&gt;Python中的异常类&lt;/h2&gt;&lt;p&gt;在这一节，我们将要面对异常，这是一种可以改变程序中控制流程的程序结构。&lt;br&gt;在Python中，异常会根据错误自动地被触发，也能由代码触发和捕获。&lt;br&gt;异常由四个相关语句进行处理，分别为：try、except、else和finally&lt;/p&gt;
&lt;h3 id=&quot;什么是异常&quot;&gt;&lt;a href=&quot;#什么是异常&quot; class=&quot;headerlink&quot; title=&quot;什么是异常&quot;&gt;&lt;/a&gt;什么是异常&lt;/h3&gt;&lt;p&gt;当Python检测到一个错误时，解释器就会指出当前流已无法继续执行下去，这时候就出现了异常。&lt;br&gt;异常是指因为程序出错而在正常控制流以外采取的行为。异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。&lt;/p&gt;
    
    </summary>
    
    
      <category term="calm" scheme="http://yoursite.com/tags/calm/"/>
    
  </entry>
  
  <entry>
    <title>python基础十五————模块与包</title>
    <link href="http://yoursite.com/2018/10/16/python-15/"/>
    <id>http://yoursite.com/2018/10/16/python-15/</id>
    <published>2018-10-16T11:14:33.271Z</published>
    <updated>2018-08-06T01:46:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是模块"><a href="#什么是模块" class="headerlink" title="什么是模块"></a>什么是模块</h2><p>模块是包括 Python 定义和声明的文件。<br>文件名就是模块名加上 .py 后缀。<br>模块的模块名（做为一个字符串）可以由全局变量 <strong>name</strong> 得到。</p><h2 id="为什么使用模块"><a href="#为什么使用模块" class="headerlink" title="为什么使用模块"></a>为什么使用模块</h2><p>使用场景：<br>如果退出python解释器然后重新进入，那么你之前定义的函数或者变量都将丢失，因此我们通常将程序写到文件中以便永久保存下来，需要时就通过python test.py方式去执行，此时test.py被称为脚本script<br><a id="more"></a><br>随着程序规模及功能越来越多，为了方便管理，我们通常将程序按照功能分为一个个的文件，这样做程序的结构更清晰，方便管理。这时我们不仅把这些文件当做脚本去执行，还可以把他们当做模块导入到其它的模块中，实现了功能的重复利用。<br>为什么使用模块：<br>首先，提高了代码的可维护<br>其次，提高了代码的可重用性<br>最后，避免了函数名和变量名冲突<br>从抽象的视角来看，模块至少有三个角色：<br>代码的重用<br>系统命名空间的划分<br>服务和数据的共享</p><h2 id="模块的载入"><a href="#模块的载入" class="headerlink" title="模块的载入"></a>模块的载入</h2><p>块可以包含可执行的语句和函数的定义，这些语句的目的是初始化模块，它们只在模块名第一次遇到导入import语句时才执行。<br>import语句是可以在程序中的任意位置使用的，如果针对同一个模块import多次，为了防止你重复导入，只有第一次导入后就将模块名加载到内存了。<br>后续的import语句仅是对已经加载到内存中的模块对象增加了一次引用，不会重新执行模块内的语句。</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>当引入模块的时候，当前工作所在文件夹会多一个文件夹<strong>pycache</strong>，里面放的是我们引入的模块，如sendmsg<br><strong>pycache</strong>是一个缓冲，我们在执行文件的时候，编程语言（可识别语言），通过解释器，形成二进制文件，而有了这个缓冲之后，我们写的代码可以不用再重头开始经过解释器执行，而直接通过缓冲执行</p><h3 id="第一种方法：用import引入，import-模块名-或-import-模块名-as-sen"><a href="#第一种方法：用import引入，import-模块名-或-import-模块名-as-sen" class="headerlink" title="第一种方法：用import引入，import 模块名 或 import 模块名 as sen"></a>第一种方法：用import引入，import 模块名 或 import 模块名 as sen</h3><p>sendmsg.py内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def test1():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----sendmsg_test1------'</span>)</span><br><span class="line">def test2():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----sendmsg_test2------'</span>)</span><br><span class="line">test1()</span><br><span class="line">test2()</span><br></pre></td></tr></table></figure></p><p>在test.py调用,直接import sendmsg<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import sendmsg</span><br><span class="line"><span class="comment">#-----sendmsg_test1------</span></span><br><span class="line"><span class="comment">#-----sendmsg_test2------</span></span><br></pre></td></tr></table></figure></p><h3 id="第二种方法：用from-模块-import-函数名-调用"><a href="#第二种方法：用from-模块-import-函数名-调用" class="headerlink" title="第二种方法：用from 模块 import 函数名 调用"></a>第二种方法：用from 模块 import 函数名 调用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from sendmsg import test1,test2</span><br><span class="line"><span class="comment">#-----sendmsg_test1------</span></span><br><span class="line"><span class="comment">#-----sendmsg_test2------</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from sendmsg import test1,test2</span><br><span class="line">test1()</span><br><span class="line">test2()</span><br><span class="line"><span class="comment">#-----sendmsg_test1------</span></span><br><span class="line"><span class="comment">#-----sendmsg_test2------</span></span><br><span class="line"><span class="comment">#-----sendmsg_test1------</span></span><br><span class="line"><span class="comment">#-----sendmsg_test2------</span></span><br></pre></td></tr></table></figure><p>如果只引入test1()函数，test2()不能使用，会报错显示test2不能识别<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from sendmsg import test1</span><br><span class="line">test1()</span><br><span class="line">test2()</span><br><span class="line"><span class="comment">#NameError: name 'test2' is not defined</span></span><br></pre></td></tr></table></figure></p><h3 id="第三种方法：用from引入模块时如果参数太多，可以用from-模块名-import"><a href="#第三种方法：用from引入模块时如果参数太多，可以用from-模块名-import" class="headerlink" title="第三种方法：用from引入模块时如果参数太多，可以用from 模块名 import *"></a>第三种方法：用from引入模块时如果参数太多，可以用from 模块名 import *</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from sendmsg import *</span><br><span class="line"><span class="comment">#-----sendmsg_test1------</span></span><br><span class="line"><span class="comment">#-----sendmsg_test2------</span></span><br></pre></td></tr></table></figure><p>当两个模块的函数名一样，如果都引用，前面的引用会被后面的更新，想当于只调用了后面写的模块，所以遇到这种情况，不能用from 模块 import 函数名，只能用import 模块名这种方法<br>recmsg.py模块代码，和sendmsg.py一样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def test1():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----recmsg_test1------'</span>)</span><br><span class="line">def test2():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----recmsg_test2------'</span>)</span><br><span class="line">test1()</span><br><span class="line">test2()</span><br></pre></td></tr></table></figure></p><p>引用模块，这里调用test1(),只能是后面写的recmsg模块里面的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from sendmsg import test1</span><br><span class="line">from recmsg import test1</span><br><span class="line">test1()</span><br><span class="line"><span class="comment">#-----sendmsg_test1------</span></span><br><span class="line"><span class="comment">#-----sendmsg_test2------</span></span><br><span class="line"><span class="comment">#-----recmsg_test1------</span></span><br><span class="line"><span class="comment">#-----recmsg_test2------</span></span><br><span class="line"><span class="comment">#-----recmsg_test1------</span></span><br></pre></td></tr></table></figure></p><h3 id="if-name-’main‘方法"><a href="#if-name-’main‘方法" class="headerlink" title="if name==’main‘方法"></a>if <strong>name</strong>==’<strong>main</strong>‘方法</h3><p>我们可以看到上面调用模块重复执行（模块内部的函数执行了一次，在引入模块的时候又执行了一次），为了避免这种情况，需要在模块里面用if <strong>name</strong>==’<strong>main</strong>‘方法，如在recmsg里面(sendmsg一样)：<br>官方说明：<br>我们可以通过模块的全局变量<strong>name</strong>来查看模块名<br>当做脚本运行:<br><strong>name</strong> 等于’<strong>main</strong>‘<br>当做模块导入:<br><strong>name</strong> 等于模块名<br>如果一个py文件被导入了，他就是一个模块<br>如果这个py文件被直接执行，这个被直接执行的文件就是一个脚本<br>作用：用来控制.py文件在不同的应用场景下执行不同的逻辑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def test1():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----recmsg_test1------'</span>)</span><br><span class="line">def test2():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----recmsg_test2------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    test1()</span><br><span class="line">    test2()</span><br></pre></td></tr></table></figure><p>总结：当一个模块被当做脚本执行的时候，<strong>name</strong>是一个字符串数据类型的’<strong>main</strong>‘<br>当一个模块被当做模块导入的时候，<strong>name</strong>是一个字符串数据类型模块名<br>if <strong>name</strong> == ‘<strong>main</strong>‘:控制了:<br>    只要当前这个文件直接被执行，就会执行if条件语句内的代码<br>    否则，就不会执行if条件语句内的代码</p><p>在test.py应用调用，就只有调用的test1()的内容了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from sendmsg import test1</span><br><span class="line">from recmsg import test1</span><br><span class="line">test1()</span><br><span class="line"><span class="comment">#-----recmsg_test1------</span></span><br></pre></td></tr></table></figure></p><h3 id="all方法"><a href="#all方法" class="headerlink" title="all方法"></a><strong>all</strong>方法</h3><p>在引入模块中，有些功能不想全被调用，此时我们可以在模块里面设置权限，用<strong>all</strong>方法，把能被调用的函数功能放进去，这样引用模块之后也不能调用模板<strong>all</strong>外面的函数,注意只针对from 模块名 import *这种方法，对import sendmsg as sen的方法不受影响</p><p>如：在recmsg中添加<strong>all</strong>把函数test1()和变量num放进去，在外面引用recmsg模板的时候就只能调用里面的test1()和输出num的值，无法识别test2()函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">recmsg.py:</span><br><span class="line"></span><br><span class="line">__all__=[<span class="string">'test1'</span>,<span class="string">'num'</span>]</span><br><span class="line">def test1():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----recmsg_test1------'</span>)</span><br><span class="line">def test2():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----recmsg_test2------'</span>)</span><br><span class="line"></span><br><span class="line">num=100</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    test1()</span><br><span class="line">    test2()</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line">test.py</span><br><span class="line">from recmsg import *</span><br><span class="line">test1()</span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line">test2()</span><br><span class="line"><span class="comment">#-----recmsg_test1------</span></span><br><span class="line"><span class="comment">#100</span></span><br><span class="line"><span class="comment">#NameError: name 'test2' is not defined</span></span><br></pre></td></tr></table></figure></p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>Python的程序由包（package）、模块（module）和函数组成。包是由一系列模块组成的集合，模块是处理某一类问题的函数和类的集合</p><p>把写有功能函数的模板(.py)文件加进一个文件夹中，把文件夹变成一个包，如上述例子建立一个文件夹<br>msg,把sendmsg.py和recmsg.py放进msg文件夹中，同时在msg包文件夹下建立一个<strong>init</strong>.py文件，<br>程序访问的时候先访问<strong>init</strong>.py文件，在<strong>init</strong>文件中引入里面的模块，用from . import sending,再在main主程序中调用<br>main调用格式：<br>包-模块 -方法<br>import 文件夹名字<br>文件夹名字.sendmsg.test1()<br>举例理解：<br>recmsg.py<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">__all__=[<span class="string">'test1'</span>,<span class="string">'num'</span>]</span><br><span class="line">def test1():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----recmsg_test1------'</span>)</span><br><span class="line">def test2():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----recmsg_test2------'</span>)</span><br><span class="line"></span><br><span class="line">num=100</span><br><span class="line"><span class="comment">#__name__变量  如果在当前文件下。抵用的时候显示的是__main__</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    test1()</span><br><span class="line">    test2()</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure></p><p>sendmsg.py<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def test1():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----sendmsg_test1------'</span>)</span><br><span class="line">def test2():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-----sendmsg_test2------'</span>)</span><br><span class="line"><span class="comment"># test1()</span></span><br><span class="line"><span class="comment"># test2()</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    test1()</span><br><span class="line">    test2()</span><br></pre></td></tr></table></figure></p><p><strong>init</strong>.py<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__all__=[<span class="string">'sendmsg'</span>,<span class="string">'recmsg'</span>]</span><br><span class="line"><span class="comment">#__all__  包  定义在init总的模块能够被调用。</span></span><br><span class="line"><span class="comment">#用from .是因为它们在同级</span></span><br><span class="line">from . import sendmsg</span><br><span class="line">from . import recmsg</span><br></pre></td></tr></table></figure></p><p>主程序调用包，三种方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#包的调用</span></span><br><span class="line"><span class="comment">#第一种</span></span><br><span class="line">import msg</span><br><span class="line">msg.sendmsg.test1()</span><br><span class="line">msg.recmsg.test2()</span><br><span class="line"><span class="comment">#-----sendmsg_test1------</span></span><br><span class="line"><span class="comment">#-----recmsg_test2------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二种</span></span><br><span class="line">from msg import sendmsg</span><br><span class="line">sendmsg.test1()</span><br><span class="line"><span class="comment">#-----sendmsg_test1------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第三种</span></span><br><span class="line">from msg import *</span><br><span class="line">recmsg.test1()</span><br><span class="line"><span class="comment">#----recmsg_test1------</span></span><br></pre></td></tr></table></figure></p><h3 id="建议写程序的模式"><a href="#建议写程序的模式" class="headerlink" title="建议写程序的模式"></a>建议写程序的模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">函数功能描述</span><br><span class="line">参数说明</span><br><span class="line">返回值</span><br><span class="line">def add():</span><br><span class="line">    pass</span><br><span class="line">函数功能描述</span><br><span class="line">参数说明</span><br><span class="line">返回值   </span><br><span class="line">def delete():</span><br><span class="line">    pass</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">def main():</span><br><span class="line">    pass</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>路径：先在本地查找（名称不能和内带的函数名称相同）——系统查找<br>跨文件引入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.path.append(r<span class="string">'..\python'</span>)</span><br><span class="line">from pack.pack1.aa import fun1</span><br><span class="line">fun1()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是模块&quot;&gt;&lt;a href=&quot;#什么是模块&quot; class=&quot;headerlink&quot; title=&quot;什么是模块&quot;&gt;&lt;/a&gt;什么是模块&lt;/h2&gt;&lt;p&gt;模块是包括 Python 定义和声明的文件。&lt;br&gt;文件名就是模块名加上 .py 后缀。&lt;br&gt;模块的模块名（做为一个字符串）可以由全局变量 &lt;strong&gt;name&lt;/strong&gt; 得到。&lt;/p&gt;
&lt;h2 id=&quot;为什么使用模块&quot;&gt;&lt;a href=&quot;#为什么使用模块&quot; class=&quot;headerlink&quot; title=&quot;为什么使用模块&quot;&gt;&lt;/a&gt;为什么使用模块&lt;/h2&gt;&lt;p&gt;使用场景：&lt;br&gt;如果退出python解释器然后重新进入，那么你之前定义的函数或者变量都将丢失，因此我们通常将程序写到文件中以便永久保存下来，需要时就通过python test.py方式去执行，此时test.py被称为脚本script&lt;br&gt;
    
    </summary>
    
    
      <category term="calm" scheme="http://yoursite.com/tags/calm/"/>
    
  </entry>
  
  <entry>
    <title>python基础十四————日期时间操作</title>
    <link href="http://yoursite.com/2018/10/16/python-14/"/>
    <id>http://yoursite.com/2018/10/16/python-14/</id>
    <published>2018-10-16T11:14:33.251Z</published>
    <updated>2018-08-04T01:33:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p>1.时间戳(timestamp)的方式：通常来说，时间戳表示的是从1970年1月１日开始按秒计算的偏移量(time.gmtime(0))此模块中的函数无法处理1970纪元年以前的时间或太遥远的未来(处理极限取决于C函数库，对于32位系统而言，是2038年)<br>2.UTC(Coordinated Universal Time,世界协调时)也叫格林威治天文时间，是世界标准时间．在我国为UTC+8<br>3.DST(Daylight Saving Time)即夏令时<br>4.时间元组：用于表示时间格式的元组数据而已，他是time模块操作时间的主要方式<br><a id="more"></a></p><p>时间模块的值<br>timezone()当前时区与格林尼治时间相差的秒数<br>altzone() 在有夏令营的情况下，获取当前时区与格林尼治的时间差<br>dayligth() 检测是否为夏令时状态</p><h3 id="时间模块的函数"><a href="#时间模块的函数" class="headerlink" title="时间模块的函数"></a>时间模块的函数</h3><p>time()    time() 函数用于返回当前时间的时间戳<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">nows=int(time.time())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'时间戳为：'</span>,time.time())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'时间戳为：'</span>,nows)</span><br><span class="line"><span class="comment">#时间戳的单位是秒，微妙数</span></span><br></pre></td></tr></table></figure></p><p>localtime()    获得当前日期元组+8<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(time.localtime())</span><br><span class="line"><span class="comment">#time.struct_time(tm_year=2018, tm_mon=8, tm_mday=3, tm_hour=19, tm_min=28, tm_sec=37, tm_wday=4, tm_yday=215, tm_isdst=0)</span></span><br><span class="line">               </span><br><span class="line"><span class="comment">#将时间戳转为年月日（时间元组）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'本地时间：'</span>,time.localtime(time.time()))</span><br></pre></td></tr></table></figure></p><p>gmtime()    获得当前日期元组-8  ,现在是19时，获得tm_hour=11<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(time.gmtime())</span><br><span class="line"><span class="comment">#time.struct_time(tm_year=2018, tm_mon=8, tm_mday=3, tm_hour=11, tm_min=33, tm_sec=27, tm_wday=4, tm_yday=215, tm_isdst=0)</span></span><br></pre></td></tr></table></figure></p><p>asctime()    返回一个正常可读的时间字符串(可读是针对英语)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(time.asctime())</span><br><span class="line"><span class="comment">#Fri Aug  3 19:31:54 2018</span></span><br></pre></td></tr></table></figure></p><p>ctime()    获取本地时间的字符串格式= asctime(localtime)=asctime<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(time.ctime())</span><br><span class="line"><span class="comment">#Fri Aug  3 19:38:06 2018</span></span><br><span class="line"><span class="built_in">print</span>(time.asctime(time.localtime()))</span><br><span class="line"><span class="comment">#Fri Aug  3 19:38:06 2018</span></span><br></pre></td></tr></table></figure></p><p>mktime()    使用时间元组制作时间戳,时间元组个数必须写全<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tt=(2018,11,20,15,20,30,4,200,0)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'时间戳为：%f'</span>%time.mktime(tt))</span><br><span class="line"><span class="comment">#时间戳为：1542698430.000000</span></span><br></pre></td></tr></table></figure></p><p>clock()<br>sleep()    程序睡眠，使程序在此处等待指定的时间<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(time.clock())</span><br><span class="line"><span class="comment">#8.210392961722738e-07</span></span><br><span class="line"><span class="comment">#用于计时</span></span><br><span class="line">def tim():</span><br><span class="line">    <span class="comment">#获取开始时间</span></span><br><span class="line">    start=time.clock()</span><br><span class="line">    time.sleep(3)</span><br><span class="line">    <span class="comment">#end</span></span><br><span class="line">    end=time.clock() <span class="comment">#执行了多少秒</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(end-start)</span><br><span class="line">tim()  <span class="comment">#2.9994724822522096，近似值</span></span><br></pre></td></tr></table></figure></p><p>strftime()    想要什么格式就输出什么格式,默认输出为24小时制，%p输出为下午<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">time_tup=time.localtime() <span class="comment">#元组</span></span><br><span class="line">time_tup=(1918,7,1,15,45,10,1,200,0)</span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">'%Y&#123;&#125;%m&#123;&#125;%d&#123;&#125; %I:%M:%S %p'</span>,time_tup).format(<span class="string">'年'</span>,<span class="string">'月'</span>,<span class="string">'日'</span>))</span><br><span class="line"><span class="comment">#1918年07月01日 03:45:10 PM</span></span><br><span class="line"><span class="comment">#strptime()返回时间元组</span></span><br><span class="line">strtime=<span class="string">'1918/07/01 03:45:10'</span></span><br><span class="line">res=time.strptime(strtime,<span class="string">'%Y/%m/%d  %I:%M:%S'</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#ime.struct_time(tm_year=1918, tm_mon=7, tm_mday=1, tm_hour=3, tm_min=45, tm_sec=10, tm_wday=0, tm_yday=182, tm_isdst=-1)</span></span><br></pre></td></tr></table></figure></p><h3 id="时间元组"><a href="#时间元组" class="headerlink" title="时间元组"></a>时间元组</h3><p>0  (tm_year)年<br>1  (tm_mon)月               1-12<br>2  (tm_mday)日              1-31<br>3  (tm_hour)时              0-23<br>4  (tm_min)分               0-59<br>5  (tm_sec)秒              0-61(60代表闰秒，61是基于历史原因保留)<br>6  (tm_wday)星期几          0-6(0为周一)<br>7  (tm_yday)一年中的第几天   1-366<br>8  (tm_isdst)是否为夏令时    0,1，-1(-1代表夏令时)</p><h3 id="python中时间日期格式化符号"><a href="#python中时间日期格式化符号" class="headerlink" title="python中时间日期格式化符号"></a>python中时间日期格式化符号</h3><p>(%a) 星期几的简写<br>(%A) 星期几的全称<br>(%b) 月分的简写<br>(%B) 月份的全称<br>(%c) 标准的日期的时间串<br>(%C) 年份的后两位数字<br>(%d)%D 月/天/年<br>(%e) 在两字符域中，十进制表示的每月的第几天<br>(%F) 年-月-日<br>(%g)年份的后两位数字，使用基于周的年<br>(%G) 年分，使用基于周的年<br>(%h) 简写的月份名<br>(%H) 24小时制的小时<br>(%I) 12小时制的小时<br>(%j) 十进制表示的每年的第几天<br>(%m) 十进制表示的月份<br>(%M) 十时制表示的分钟数<br>(%n) 新行符<br>(%p) 本地的AM或PM的等价显示<br>(%r) 12小时的时间<br>(%R) 显示小时和分钟：hh:mm<br>(%S) 十进制的秒数<br>(%t) 水平制表符<br>(%T) 显示时分秒：hh:mm:ss<br>(%u) 每周的第几天，星期一为第一天 （值从0到6，星期一为0）<br>(%U) 第年的第几周，把星期日做为第一天（值从0到53）<br>(%V) 每年的第几周，使用基于周的年<br>(%w) 十进制表示的星期几（值从0到6，星期天为0）<br>(%W） 每年的第几周，把星期一做为第一天（值从0到53）<br>（%x） 标准的日期串<br>（%X） 标准的时间串<br>（%y） 不带世纪的十进制年份（值从0到99）<br>（%Y） 带世纪部分的十制年份<br>（%z，%Z）时区名称，如果不能得到时区名称则返回空字符。<br>（%% ）百分号</p><h3 id="time函数-案例"><a href="#time函数-案例" class="headerlink" title="time函数-案例"></a>time函数-案例</h3><p>计算两个时间之间的差值，使用函数，调用时只需要输入开始时间和结束时间<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def <span class="built_in">times</span>(old,new):</span><br><span class="line">    <span class="comment">#转为时间元组</span></span><br><span class="line">    old_tup=time.strptime(old,<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">    new_tup=time.strptime(new,<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">    <span class="comment">#转为时间戳</span></span><br><span class="line">    old_timestamp=time.mktime(old_tup)</span><br><span class="line">    new_timestamp=time.mktime(new_tup)</span><br><span class="line">    <span class="comment">#差值</span></span><br><span class="line">    time_x=new_timestamp-old_timestamp</span><br><span class="line">    <span class="comment">#计算有多少个小时 时间戳/60/60</span></span><br><span class="line">    <span class="built_in">print</span>(time_x/3600)</span><br><span class="line">    <span class="comment">#开始培训到最后结束，中间一共有多少年，多少月，多少天</span></span><br><span class="line">    <span class="comment">#2018-7-5     2018-11-25</span></span><br><span class="line">old=input(<span class="string">'老的时间（YYYY-MM-DD）：'</span>)</span><br><span class="line">new=input(<span class="string">'新的时间（YYYY-MM-DD）：'</span>)</span><br><span class="line"><span class="built_in">times</span>(old,new)</span><br></pre></td></tr></table></figure></p><h2 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h2><p>today()    获取今天的日期<br>now([tz])    获得当前时间<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now())</span><br><span class="line"><span class="comment">#2018-08-03 20:19:34.211499</span></span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.today())</span><br><span class="line"><span class="comment">#2018-08-03 20:19:34.211499</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">now=datetime.datetime.now()</span><br><span class="line">yes=now-datetime.timedelta(days=7)</span><br><span class="line"><span class="comment">#2018-07-27 20:19:34.211499 现在的时间减去7天，七天之前是什么日子</span></span><br><span class="line"><span class="built_in">print</span>(yes)</span><br><span class="line"></span><br><span class="line">year=now+datetime.timedelta(days=365)</span><br><span class="line"><span class="comment">#2019-08-03 20:19:34.211499现在的时间加365天，一年后的时间</span></span><br><span class="line"><span class="built_in">print</span>(year)</span><br></pre></td></tr></table></figure><p>datetime.utcnow()    返回一个当前utc时间的datetime对象,-8<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(datetime.datetime.utcnow())</span><br><span class="line"><span class="comment">#2018-08-03 12:23:37.419410</span></span><br></pre></td></tr></table></figure></p><h2 id="日历函数"><a href="#日历函数" class="headerlink" title="日历函数"></a>日历函数</h2><p>calendar()    获取指定年份的日历字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#格式def formatyear(theyear, w=2, l=1, c=6, m=3)</span></span><br><span class="line">import calendar</span><br><span class="line"><span class="built_in">print</span>(calendar.calendar(2018))</span><br><span class="line">        <span class="comment">#获取2018年日历，默认四行三列</span></span><br></pre></td></tr></table></figure></p><p>month()    获取指定年月的日历字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(calendar.month(2018,8))</span><br><span class="line"><span class="comment">#获取2018年8月份月历</span></span><br></pre></td></tr></table></figure></p><p>monthcalendar()获取一个年月的矩阵列表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(calendar.monthcalendar(2018,8))</span><br><span class="line"><span class="comment">#[[0, 0, 1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26], [27, 28, 29, 30, 31, 0, 0]]</span></span><br></pre></td></tr></table></figure></p><p>calendar.isleap()检测是否为闰年<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(calendar.isleap(2018))</span><br><span class="line"><span class="comment">#False</span></span><br></pre></td></tr></table></figure></p><p>leapdays(y1，y2)    返回在y1,y2两年之间的闰年总数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(calendar.leapdays(2001,2016))</span><br><span class="line"><span class="comment">#4 包前不包后，前闭后合</span></span><br></pre></td></tr></table></figure></p><p>monthrange()    获取一个月是从哪天开始，本月有几天<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(calendar.monthrange(2018,8))</span><br><span class="line"><span class="comment">#(2, 31)</span></span><br></pre></td></tr></table></figure></p><p>weekday()    根据年月日计算周几（0-6）星期1 星期天<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(calendar.weekday(2018,8,2))</span><br><span class="line"><span class="comment">#3 表示周四</span></span><br></pre></td></tr></table></figure></p><p>timegm()    将时间元组转为时间戳<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(calendar.timegm((1988,7,1,15,45,10,1,200,0)))</span><br><span class="line"><span class="comment">#583775110</span></span><br></pre></td></tr></table></figure></p><p>有一个人从2012-1-1日开始过上了三天打鱼两天晒网的日子，问今天该打鱼还是晒网，明天呢？明年的今天呢？<br>1 1   0  鱼<br>1 2   1  鱼<br>1 3   2  鱼<br>1  4  晒  3<br>1  5  晒  4<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">import math</span><br><span class="line">def fish(end):</span><br><span class="line">    start=<span class="string">'2012-1-1'</span></span><br><span class="line">    starttime=time.strptime(start,<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">    startday=int(time.mktime(starttime))</span><br><span class="line"></span><br><span class="line">    endtime=time.strptime(end,<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">    endday=int(time.mktime(endtime))</span><br><span class="line"></span><br><span class="line">    m=math.floor((endday-startday)/86400%5)</span><br><span class="line">    <span class="keyword">if</span> m&lt;3:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'今天在打鱼'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'今天在晒网'</span>)</span><br><span class="line">fish(<span class="string">'2018-8-2'</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;time&quot;&gt;&lt;a href=&quot;#time&quot; class=&quot;headerlink&quot; title=&quot;time&quot;&gt;&lt;/a&gt;time&lt;/h2&gt;&lt;p&gt;1.时间戳(timestamp)的方式：通常来说，时间戳表示的是从1970年1月１日开始按秒计算的偏移量(time.gmtime(0))此模块中的函数无法处理1970纪元年以前的时间或太遥远的未来(处理极限取决于C函数库，对于32位系统而言，是2038年)&lt;br&gt;2.UTC(Coordinated Universal Time,世界协调时)也叫格林威治天文时间，是世界标准时间．在我国为UTC+8&lt;br&gt;3.DST(Daylight Saving Time)即夏令时&lt;br&gt;4.时间元组：用于表示时间格式的元组数据而已，他是time模块操作时间的主要方式&lt;br&gt;
    
    </summary>
    
    
      <category term="calm" scheme="http://yoursite.com/tags/calm/"/>
    
  </entry>
  
</feed>
